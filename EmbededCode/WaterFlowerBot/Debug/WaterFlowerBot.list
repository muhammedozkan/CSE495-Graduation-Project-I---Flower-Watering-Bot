
WaterFlowerBot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  0800508c  0800508c  0001508c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053dc  080053dc  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  080053dc  080053dc  000153dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053e4  080053e4  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053e4  080053e4  000153e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053e8  080053e8  000153e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080053ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000098  08005484  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08005484  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001182c  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e1  00000000  00000000  000318f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00033bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00034950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175f1  00000000  00000000  00035600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0c4  00000000  00000000  0004cbf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee94  00000000  00000000  0005bcb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eab49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004248  00000000  00000000  000eab9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005074 	.word	0x08005074

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08005074 	.word	0x08005074

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <findAmount>:
uint8_t leftRightForward = 0;



uint16_t findAmount(uint8_t flowerCode)
{
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	for (int8_t i = 0; i < 3; i++) {
 8000592:	2300      	movs	r3, #0
 8000594:	73fb      	strb	r3, [r7, #15]
 8000596:	e01d      	b.n	80005d4 <findAmount+0x4c>
			if (amount[i].flowerCode == flowerCode)
 8000598:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800059c:	4913      	ldr	r1, [pc, #76]	; (80005ec <findAmount+0x64>)
 800059e:	4613      	mov	r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4413      	add	r3, r2
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	440b      	add	r3, r1
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	79fa      	ldrb	r2, [r7, #7]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d10b      	bne.n	80005c8 <findAmount+0x40>
				return amount[i].waterAmount;
 80005b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80005b4:	490d      	ldr	r1, [pc, #52]	; (80005ec <findAmount+0x64>)
 80005b6:	4613      	mov	r3, r2
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	4413      	add	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	440b      	add	r3, r1
 80005c0:	3304      	adds	r3, #4
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	e00a      	b.n	80005de <findAmount+0x56>
	for (int8_t i = 0; i < 3; i++) {
 80005c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	3301      	adds	r3, #1
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	73fb      	strb	r3, [r7, #15]
 80005d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	dddd      	ble.n	8000598 <findAmount+0x10>
		}
return 0;
 80005dc:	2300      	movs	r3, #0
}
 80005de:	4618      	mov	r0, r3
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000004 	.word	0x20000004

080005f0 <stop>:

void stop() {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,
 80005f4:	2200      	movs	r2, #0
 80005f6:	21f0      	movs	r1, #240	; 0xf0
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <stop+0x20>)
 80005fa:	f001 fb9d 	bl	8001d38 <HAL_GPIO_WritePin>
			RIGHT_BACKWARD_Pin | LEFT_FORWARD_Pin | LEFT_BACKWARD_Pin
					| RIGHT_FORWARD_Pin, GPIO_PIN_RESET);
	left = 0;
 80005fe:	4b05      	ldr	r3, [pc, #20]	; (8000614 <stop+0x24>)
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
	right = 0;
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <stop+0x28>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]

}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40020000 	.word	0x40020000
 8000614:	200000b4 	.word	0x200000b4
 8000618:	200000b5 	.word	0x200000b5

0800061c <forward>:

void forward() {
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	stop();
 8000620:	f7ff ffe6 	bl	80005f0 <stop>
	HAL_GPIO_WritePin(GPIOA, RIGHT_FORWARD_Pin | LEFT_FORWARD_Pin,GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	21a0      	movs	r1, #160	; 0xa0
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <forward+0x24>)
 800062a:	f001 fb85 	bl	8001d38 <HAL_GPIO_WritePin>
	left = 1;
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <forward+0x28>)
 8000630:	2201      	movs	r2, #1
 8000632:	701a      	strb	r2, [r3, #0]
	right = 1;
 8000634:	4b04      	ldr	r3, [pc, #16]	; (8000648 <forward+0x2c>)
 8000636:	2201      	movs	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40020000 	.word	0x40020000
 8000644:	200000b4 	.word	0x200000b4
 8000648:	200000b5 	.word	0x200000b5

0800064c <turnLeft>:

void turnLeft() {
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
	stop();
 8000650:	f7ff ffce 	bl	80005f0 <stop>
	HAL_GPIO_WritePin(RIGHT_FORWARD_GPIO_Port, RIGHT_FORWARD_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2180      	movs	r1, #128	; 0x80
 8000658:	4809      	ldr	r0, [pc, #36]	; (8000680 <turnLeft+0x34>)
 800065a:	f001 fb6d 	bl	8001d38 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LEFT_BACKWARD_GPIO_Port, LEFT_BACKWARD_Pin, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	2140      	movs	r1, #64	; 0x40
 8000662:	4807      	ldr	r0, [pc, #28]	; (8000680 <turnLeft+0x34>)
 8000664:	f001 fb68 	bl	8001d38 <HAL_GPIO_WritePin>
	left = -1;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <turnLeft+0x38>)
 800066a:	22ff      	movs	r2, #255	; 0xff
 800066c:	701a      	strb	r2, [r3, #0]
	right = 1;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <turnLeft+0x3c>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]

	previous = -1;
 8000674:	4b05      	ldr	r3, [pc, #20]	; (800068c <turnLeft+0x40>)
 8000676:	22ff      	movs	r2, #255	; 0xff
 8000678:	701a      	strb	r2, [r3, #0]

}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40020000 	.word	0x40020000
 8000684:	200000b4 	.word	0x200000b4
 8000688:	200000b5 	.word	0x200000b5
 800068c:	200000b6 	.word	0x200000b6

08000690 <turnRight>:

void turnRight() {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	stop();
 8000694:	f7ff ffac 	bl	80005f0 <stop>
	HAL_GPIO_WritePin(LEFT_FORWARD_GPIO_Port, LEFT_FORWARD_Pin, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2120      	movs	r1, #32
 800069c:	4809      	ldr	r0, [pc, #36]	; (80006c4 <turnRight+0x34>)
 800069e:	f001 fb4b 	bl	8001d38 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RIGHT_BACKWARD_GPIO_Port, RIGHT_BACKWARD_Pin, GPIO_PIN_SET);
 80006a2:	2201      	movs	r2, #1
 80006a4:	2110      	movs	r1, #16
 80006a6:	4807      	ldr	r0, [pc, #28]	; (80006c4 <turnRight+0x34>)
 80006a8:	f001 fb46 	bl	8001d38 <HAL_GPIO_WritePin>
	left = 1;
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <turnRight+0x38>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
	right = -1;
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <turnRight+0x3c>)
 80006b4:	22ff      	movs	r2, #255	; 0xff
 80006b6:	701a      	strb	r2, [r3, #0]

	previous = 1;
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <turnRight+0x40>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	701a      	strb	r2, [r3, #0]

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40020000 	.word	0x40020000
 80006c8:	200000b4 	.word	0x200000b4
 80006cc:	200000b5 	.word	0x200000b5
 80006d0:	200000b6 	.word	0x200000b6

080006d4 <backward>:
void backward() {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	stop();
 80006d8:	f7ff ff8a 	bl	80005f0 <stop>
	HAL_GPIO_WritePin(GPIOA, RIGHT_BACKWARD_Pin | LEFT_BACKWARD_Pin,GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2150      	movs	r1, #80	; 0x50
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <backward+0x24>)
 80006e2:	f001 fb29 	bl	8001d38 <HAL_GPIO_WritePin>
	left = -1;
 80006e6:	4b05      	ldr	r3, [pc, #20]	; (80006fc <backward+0x28>)
 80006e8:	22ff      	movs	r2, #255	; 0xff
 80006ea:	701a      	strb	r2, [r3, #0]
	right = -1;
 80006ec:	4b04      	ldr	r3, [pc, #16]	; (8000700 <backward+0x2c>)
 80006ee:	22ff      	movs	r2, #255	; 0xff
 80006f0:	701a      	strb	r2, [r3, #0]

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40020000 	.word	0x40020000
 80006fc:	200000b4 	.word	0x200000b4
 8000700:	200000b5 	.word	0x200000b5

08000704 <readLeftSensor>:

void readLeftSensor() {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart6, Rx_left, 10, 100);
 8000708:	2364      	movs	r3, #100	; 0x64
 800070a:	220a      	movs	r2, #10
 800070c:	4902      	ldr	r1, [pc, #8]	; (8000718 <readLeftSensor+0x14>)
 800070e:	4803      	ldr	r0, [pc, #12]	; (800071c <readLeftSensor+0x18>)
 8000710:	f002 fca3 	bl	800305a <HAL_UART_Receive>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200000c8 	.word	0x200000c8
 800071c:	20000124 	.word	0x20000124

08000720 <readRightSensor>:

void readRightSensor() {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&huart1, Rx_right, 10, 100);
 8000724:	2364      	movs	r3, #100	; 0x64
 8000726:	220a      	movs	r2, #10
 8000728:	4902      	ldr	r1, [pc, #8]	; (8000734 <readRightSensor+0x14>)
 800072a:	4803      	ldr	r0, [pc, #12]	; (8000738 <readRightSensor+0x18>)
 800072c:	f002 fc95 	bl	800305a <HAL_UART_Receive>
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000d4 	.word	0x200000d4
 8000738:	200000e0 	.word	0x200000e0

0800073c <pumpON>:

void pumpON() {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WATER_PUMP_GPIO_Port, WATER_PUMP_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000746:	4802      	ldr	r0, [pc, #8]	; (8000750 <pumpON+0x14>)
 8000748:	f001 faf6 	bl	8001d38 <HAL_GPIO_WritePin>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40020400 	.word	0x40020400

08000754 <pumpOFF>:

void pumpOFF() {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WATER_PUMP_GPIO_Port, WATER_PUMP_Pin, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800075e:	4802      	ldr	r0, [pc, #8]	; (8000768 <pumpOFF+0x14>)
 8000760:	f001 faea 	bl	8001d38 <HAL_GPIO_WritePin>
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40020400 	.word	0x40020400

0800076c <pump>:

void pump(uint16_t time) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(100);
 8000776:	2064      	movs	r0, #100	; 0x64
 8000778:	f000 ff7a 	bl	8001670 <HAL_Delay>
	pumpON();
 800077c:	f7ff ffde 	bl	800073c <pumpON>
	HAL_Delay(time);
 8000780:	88fb      	ldrh	r3, [r7, #6]
 8000782:	4618      	mov	r0, r3
 8000784:	f000 ff74 	bl	8001670 <HAL_Delay>
	pumpOFF();
 8000788:	f7ff ffe4 	bl	8000754 <pumpOFF>
	HAL_Delay(100);
 800078c:	2064      	movs	r0, #100	; 0x64
 800078e:	f000 ff6f 	bl	8001670 <HAL_Delay>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <readSensor>:

void readSensor() {
 800079a:	b580      	push	{r7, lr}
 800079c:	af00      	add	r7, sp, #0
	readLeftSensor();
 800079e:	f7ff ffb1 	bl	8000704 <readLeftSensor>
	readRightSensor();
 80007a2:	f7ff ffbd 	bl	8000720 <readRightSensor>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <karar>:

uint8_t karar(uint8_t code) {
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
	uint8_t rcount = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	73fb      	strb	r3, [r7, #15]
	uint8_t lcount = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 10; ++i) // Using for loop we are initializing
 80007be:	2300      	movs	r3, #0
 80007c0:	737b      	strb	r3, [r7, #13]
 80007c2:	e014      	b.n	80007ee <karar+0x42>
			{
		if (Rx_right[i] == code) {
 80007c4:	7b7b      	ldrb	r3, [r7, #13]
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <karar+0x7c>)
 80007c8:	5cd3      	ldrb	r3, [r2, r3]
 80007ca:	79fa      	ldrb	r2, [r7, #7]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d102      	bne.n	80007d6 <karar+0x2a>
			rcount++;
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	3301      	adds	r3, #1
 80007d4:	73fb      	strb	r3, [r7, #15]
		}

		if (Rx_left[i] == code) {
 80007d6:	7b7b      	ldrb	r3, [r7, #13]
 80007d8:	4a14      	ldr	r2, [pc, #80]	; (800082c <karar+0x80>)
 80007da:	5cd3      	ldrb	r3, [r2, r3]
 80007dc:	79fa      	ldrb	r2, [r7, #7]
 80007de:	429a      	cmp	r2, r3
 80007e0:	d102      	bne.n	80007e8 <karar+0x3c>
			lcount++;
 80007e2:	7bbb      	ldrb	r3, [r7, #14]
 80007e4:	3301      	adds	r3, #1
 80007e6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 10; ++i) // Using for loop we are initializing
 80007e8:	7b7b      	ldrb	r3, [r7, #13]
 80007ea:	3301      	adds	r3, #1
 80007ec:	737b      	strb	r3, [r7, #13]
 80007ee:	7b7b      	ldrb	r3, [r7, #13]
 80007f0:	2b09      	cmp	r3, #9
 80007f2:	d9e7      	bls.n	80007c4 <karar+0x18>
		}

	}

	if (rcount > 0 && lcount > 0) {
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d004      	beq.n	8000804 <karar+0x58>
 80007fa:	7bbb      	ldrb	r3, [r7, #14]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <karar+0x58>
		return 0;
 8000800:	2300      	movs	r3, #0
 8000802:	e00a      	b.n	800081a <karar+0x6e>
	} else if (lcount > 0) {
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <karar+0x62>
		return 1;
 800080a:	2301      	movs	r3, #1
 800080c:	e005      	b.n	800081a <karar+0x6e>
	} else if (rcount > 0) {
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <karar+0x6c>
		return 2;
 8000814:	2302      	movs	r3, #2
 8000816:	e000      	b.n	800081a <karar+0x6e>
	} else {
		return 3;
 8000818:	2303      	movs	r3, #3
	}

}
 800081a:	4618      	mov	r0, r3
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	200000d4 	.word	0x200000d4
 800082c:	200000c8 	.word	0x200000c8

08000830 <resetReadValue>:

void resetReadValue() {
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 10; ++i) {
 8000836:	2300      	movs	r3, #0
 8000838:	71fb      	strb	r3, [r7, #7]
 800083a:	e00b      	b.n	8000854 <resetReadValue+0x24>
		Rx_right[i] = Rx_left[i] = 0;
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <resetReadValue+0x38>)
 8000840:	2100      	movs	r1, #0
 8000842:	54d1      	strb	r1, [r2, r3]
 8000844:	79fa      	ldrb	r2, [r7, #7]
 8000846:	4908      	ldr	r1, [pc, #32]	; (8000868 <resetReadValue+0x38>)
 8000848:	5cc9      	ldrb	r1, [r1, r3]
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <resetReadValue+0x3c>)
 800084c:	5499      	strb	r1, [r3, r2]
	for (uint8_t i = 0; i < 10; ++i) {
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	3301      	adds	r3, #1
 8000852:	71fb      	strb	r3, [r7, #7]
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	2b09      	cmp	r3, #9
 8000858:	d9f0      	bls.n	800083c <resetReadValue+0xc>
	}
}
 800085a:	bf00      	nop
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr
 8000868:	200000c8 	.word	0x200000c8
 800086c:	200000d4 	.word	0x200000d4

08000870 <readProximity>:

uint8_t readProximity() {
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(OBSTACLE_GPIO_Port, OBSTACLE_Pin)) {
 8000874:	2101      	movs	r1, #1
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <readProximity+0x1c>)
 8000878:	f001 fa46 	bl	8001d08 <HAL_GPIO_ReadPin>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d101      	bne.n	8000886 <readProximity+0x16>
		return 1;
 8000882:	2301      	movs	r3, #1
 8000884:	e000      	b.n	8000888 <readProximity+0x18>
	} else {
		return 0;
 8000886:	2300      	movs	r3, #0
	}
}
 8000888:	4618      	mov	r0, r3
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40020400 	.word	0x40020400

08000890 <ara>:

void ara() {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	readSensor();
 8000894:	f7ff ff81 	bl	800079a <readSensor>
	leftRightForward = karar(flowerCode);
 8000898:	4b3a      	ldr	r3, [pc, #232]	; (8000984 <ara+0xf4>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff85 	bl	80007ac <karar>
 80008a2:	4603      	mov	r3, r0
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b38      	ldr	r3, [pc, #224]	; (8000988 <ara+0xf8>)
 80008a8:	701a      	strb	r2, [r3, #0]

	switch (leftRightForward) {
 80008aa:	4b37      	ldr	r3, [pc, #220]	; (8000988 <ara+0xf8>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d861      	bhi.n	8000976 <ara+0xe6>
 80008b2:	a201      	add	r2, pc, #4	; (adr r2, 80008b8 <ara+0x28>)
 80008b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b8:	080008c9 	.word	0x080008c9
 80008bc:	0800093d 	.word	0x0800093d
 80008c0:	08000943 	.word	0x08000943
 80008c4:	08000949 	.word	0x08000949
	case 0:
		if (readProximity()) {
 80008c8:	f7ff ffd2 	bl	8000870 <readProximity>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d031      	beq.n	8000936 <ara+0xa6>
			HAL_Delay(100);
 80008d2:	2064      	movs	r0, #100	; 0x64
 80008d4:	f000 fecc 	bl	8001670 <HAL_Delay>
			stop();
 80008d8:	f7ff fe8a 	bl	80005f0 <stop>

			pump(findAmount(flowerCode));
 80008dc:	4b29      	ldr	r3, [pc, #164]	; (8000984 <ara+0xf4>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fe51 	bl	8000588 <findAmount>
 80008e6:	4603      	mov	r3, r0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff3f 	bl	800076c <pump>

			if (flowerCode == CODE_R)
 80008ee:	4b25      	ldr	r3, [pc, #148]	; (8000984 <ara+0xf4>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b52      	cmp	r3, #82	; 0x52
 80008f4:	d103      	bne.n	80008fe <ara+0x6e>
				{flowerCode = CODE_G;}
 80008f6:	4b23      	ldr	r3, [pc, #140]	; (8000984 <ara+0xf4>)
 80008f8:	224a      	movs	r2, #74	; 0x4a
 80008fa:	701a      	strb	r2, [r3, #0]
						HAL_Delay(10000);}

		} else {
			forward();
		}
		break;
 80008fc:	e03d      	b.n	800097a <ara+0xea>
			else if (flowerCode == CODE_G)
 80008fe:	4b21      	ldr	r3, [pc, #132]	; (8000984 <ara+0xf4>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b4a      	cmp	r3, #74	; 0x4a
 8000904:	d103      	bne.n	800090e <ara+0x7e>
				{flowerCode = CODE_B;}
 8000906:	4b1f      	ldr	r3, [pc, #124]	; (8000984 <ara+0xf4>)
 8000908:	2242      	movs	r2, #66	; 0x42
 800090a:	701a      	strb	r2, [r3, #0]
		break;
 800090c:	e035      	b.n	800097a <ara+0xea>
			else if (flowerCode == CODE_B)
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <ara+0xf4>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b42      	cmp	r3, #66	; 0x42
 8000914:	d131      	bne.n	800097a <ara+0xea>
				{flowerCode = CODE_R;
 8000916:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <ara+0xf4>)
 8000918:	2252      	movs	r2, #82	; 0x52
 800091a:	701a      	strb	r2, [r3, #0]
						backward();
 800091c:	f7ff feda 	bl	80006d4 <backward>
						HAL_Delay(7500);
 8000920:	f641 504c 	movw	r0, #7500	; 0x1d4c
 8000924:	f000 fea4 	bl	8001670 <HAL_Delay>
						stop();
 8000928:	f7ff fe62 	bl	80005f0 <stop>
						HAL_Delay(10000);}
 800092c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000930:	f000 fe9e 	bl	8001670 <HAL_Delay>
		break;
 8000934:	e021      	b.n	800097a <ara+0xea>
			forward();
 8000936:	f7ff fe71 	bl	800061c <forward>
		break;
 800093a:	e01e      	b.n	800097a <ara+0xea>

	case 1:

		turnLeft();
 800093c:	f7ff fe86 	bl	800064c <turnLeft>
		break;
 8000940:	e01c      	b.n	800097c <ara+0xec>

	case 2:

		turnRight();
 8000942:	f7ff fea5 	bl	8000690 <turnRight>
		break;
 8000946:	e019      	b.n	800097c <ara+0xec>
	case 3:
		//obstacle detected
		if (readProximity()) {
 8000948:	f7ff ff92 	bl	8000870 <readProximity>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d006      	beq.n	8000960 <ara+0xd0>

			backward();
 8000952:	f7ff febf 	bl	80006d4 <backward>
			HAL_Delay(5000);
 8000956:	f241 3088 	movw	r0, #5000	; 0x1388
 800095a:	f000 fe89 	bl	8001670 <HAL_Delay>
			}

			//forward();
			//HAL_Delay(2500);
		}
		break;
 800095e:	e00d      	b.n	800097c <ara+0xec>
			if (previous > 0) {
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <ara+0xfc>)
 8000962:	f993 3000 	ldrsb.w	r3, [r3]
 8000966:	2b00      	cmp	r3, #0
 8000968:	dd02      	ble.n	8000970 <ara+0xe0>
				turnRight();
 800096a:	f7ff fe91 	bl	8000690 <turnRight>
		break;
 800096e:	e005      	b.n	800097c <ara+0xec>
				turnLeft();
 8000970:	f7ff fe6c 	bl	800064c <turnLeft>
		break;
 8000974:	e002      	b.n	800097c <ara+0xec>
	default:

		break;
 8000976:	bf00      	nop
 8000978:	e000      	b.n	800097c <ara+0xec>
		break;
 800097a:	bf00      	nop
	}

	resetReadValue();
 800097c:	f7ff ff58 	bl	8000830 <resetReadValue>
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000000 	.word	0x20000000
 8000988:	200000b7 	.word	0x200000b7
 800098c:	200000b6 	.word	0x200000b6

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000994:	f000 fdfa 	bl	800158c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000998:	f000 f830 	bl	80009fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099c:	f000 f968 	bl	8000c70 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80009a0:	f000 f8e4 	bl	8000b6c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80009a4:	f000 f938 	bl	8000c18 <MX_USART6_UART_Init>
  MX_USART2_UART_Init();
 80009a8:	f000 f90c 	bl	8000bc4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80009ac:	f000 f890 	bl	8000ad0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	pumpOFF();
 80009b0:	f7ff fed0 	bl	8000754 <pumpOFF>
	HAL_Delay(100);
 80009b4:	2064      	movs	r0, #100	; 0x64
 80009b6:	f000 fe5b 	bl	8001670 <HAL_Delay>
	memset(buffer, 0, sizeof(buffer));
 80009ba:	2232      	movs	r2, #50	; 0x32
 80009bc:	2100      	movs	r1, #0
 80009be:	480b      	ldr	r0, [pc, #44]	; (80009ec <main+0x5c>)
 80009c0:	f003 faa4 	bl	8003f0c <memset>
	HAL_TIM_Base_Start_IT(&htim2);
 80009c4:	480a      	ldr	r0, [pc, #40]	; (80009f0 <main+0x60>)
 80009c6:	f001 fe69 	bl	800269c <HAL_TIM_Base_Start_IT>
	__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <main+0x64>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	68da      	ldr	r2, [r3, #12]
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <main+0x64>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f042 0220 	orr.w	r2, r2, #32
 80009d8:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (automode == 1) {
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <main+0x68>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d1fa      	bne.n	80009da <main+0x4a>
			ara();
 80009e4:	f7ff ff54 	bl	8000890 <ara>
		if (automode == 1) {
 80009e8:	e7f7      	b.n	80009da <main+0x4a>
 80009ea:	bf00      	nop
 80009ec:	200001f4 	.word	0x200001f4
 80009f0:	20000168 	.word	0x20000168
 80009f4:	200001b0 	.word	0x200001b0
 80009f8:	200000ba 	.word	0x200000ba

080009fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b094      	sub	sp, #80	; 0x50
 8000a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a02:	f107 0320 	add.w	r3, r7, #32
 8000a06:	2230      	movs	r2, #48	; 0x30
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f003 fa7e 	bl	8003f0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
 8000a1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a20:	2300      	movs	r3, #0
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <SystemClock_Config+0xcc>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	4a27      	ldr	r2, [pc, #156]	; (8000ac8 <SystemClock_Config+0xcc>)
 8000a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a30:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <SystemClock_Config+0xcc>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <SystemClock_Config+0xd0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a48:	4a20      	ldr	r2, [pc, #128]	; (8000acc <SystemClock_Config+0xd0>)
 8000a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <SystemClock_Config+0xd0>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a66:	2302      	movs	r3, #2
 8000a68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a70:	2319      	movs	r3, #25
 8000a72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a74:	23a8      	movs	r3, #168	; 0xa8
 8000a76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a80:	f107 0320 	add.w	r3, r7, #32
 8000a84:	4618      	mov	r0, r3
 8000a86:	f001 f971 	bl	8001d6c <HAL_RCC_OscConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a90:	f000 f970 	bl	8000d74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a94:	230f      	movs	r3, #15
 8000a96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	2102      	movs	r1, #2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fbd3 	bl	800225c <HAL_RCC_ClockConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000abc:	f000 f95a 	bl	8000d74 <Error_Handler>
  }
}
 8000ac0:	bf00      	nop
 8000ac2:	3750      	adds	r7, #80	; 0x50
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40007000 	.word	0x40007000

08000ad0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aec:	4b1e      	ldr	r3, [pc, #120]	; (8000b68 <MX_TIM2_Init+0x98>)
 8000aee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720;
 8000af4:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_TIM2_Init+0x98>)
 8000af6:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8000afa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afc:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <MX_TIM2_Init+0x98>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_TIM2_Init+0x98>)
 8000b04:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000b08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0a:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_TIM2_Init+0x98>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b10:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_TIM2_Init+0x98>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b16:	4814      	ldr	r0, [pc, #80]	; (8000b68 <MX_TIM2_Init+0x98>)
 8000b18:	f001 fd70 	bl	80025fc <HAL_TIM_Base_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000b22:	f000 f927 	bl	8000d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	4619      	mov	r1, r3
 8000b32:	480d      	ldr	r0, [pc, #52]	; (8000b68 <MX_TIM2_Init+0x98>)
 8000b34:	f001 ff1c 	bl	8002970 <HAL_TIM_ConfigClockSource>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000b3e:	f000 f919 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b4a:	463b      	mov	r3, r7
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4806      	ldr	r0, [pc, #24]	; (8000b68 <MX_TIM2_Init+0x98>)
 8000b50:	f002 f922 	bl	8002d98 <HAL_TIMEx_MasterConfigSynchronization>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000b5a:	f000 f90b 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000168 	.word	0x20000168

08000b6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <MX_USART1_UART_Init+0x50>)
 8000b72:	4a13      	ldr	r2, [pc, #76]	; (8000bc0 <MX_USART1_UART_Init+0x54>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_USART1_UART_Init+0x50>)
 8000b78:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000b7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_USART1_UART_Init+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <MX_USART1_UART_Init+0x50>)
 8000b86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b8a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_USART1_UART_Init+0x50>)
 8000b8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_USART1_UART_Init+0x50>)
 8000b96:	220c      	movs	r2, #12
 8000b98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <MX_USART1_UART_Init+0x50>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_USART1_UART_Init+0x50>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_USART1_UART_Init+0x50>)
 8000ba8:	f002 f978 	bl	8002e9c <HAL_UART_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000bb2:	f000 f8df 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200000e0 	.word	0x200000e0
 8000bc0:	40011000 	.word	0x40011000

08000bc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <MX_USART2_UART_Init+0x50>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bd0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bfa:	4805      	ldr	r0, [pc, #20]	; (8000c10 <MX_USART2_UART_Init+0x4c>)
 8000bfc:	f002 f94e 	bl	8002e9c <HAL_UART_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c06:	f000 f8b5 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200001b0 	.word	0x200001b0
 8000c14:	40004400 	.word	0x40004400

08000c18 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <MX_USART6_UART_Init+0x50>)
 8000c1e:	4a13      	ldr	r2, [pc, #76]	; (8000c6c <MX_USART6_UART_Init+0x54>)
 8000c20:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 2400;
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_USART6_UART_Init+0x50>)
 8000c24:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000c28:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <MX_USART6_UART_Init+0x50>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_2;
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <MX_USART6_UART_Init+0x50>)
 8000c32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c36:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_USART6_UART_Init+0x50>)
 8000c3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c3e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_USART6_UART_Init+0x50>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <MX_USART6_UART_Init+0x50>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_USART6_UART_Init+0x50>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_USART6_UART_Init+0x50>)
 8000c54:	f002 f922 	bl	8002e9c <HAL_UART_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART6_UART_Init+0x4a>
  {
    Error_Handler();
 8000c5e:	f000 f889 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000124 	.word	0x20000124
 8000c6c:	40011400 	.word	0x40011400

08000c70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
 8000c84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b37      	ldr	r3, [pc, #220]	; (8000d68 <MX_GPIO_Init+0xf8>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	4a36      	ldr	r2, [pc, #216]	; (8000d68 <MX_GPIO_Init+0xf8>)
 8000c90:	f043 0304 	orr.w	r3, r3, #4
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
 8000c96:	4b34      	ldr	r3, [pc, #208]	; (8000d68 <MX_GPIO_Init+0xf8>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	f003 0304 	and.w	r3, r3, #4
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b30      	ldr	r3, [pc, #192]	; (8000d68 <MX_GPIO_Init+0xf8>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a2f      	ldr	r2, [pc, #188]	; (8000d68 <MX_GPIO_Init+0xf8>)
 8000cac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <MX_GPIO_Init+0xf8>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <MX_GPIO_Init+0xf8>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	4a28      	ldr	r2, [pc, #160]	; (8000d68 <MX_GPIO_Init+0xf8>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cce:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <MX_GPIO_Init+0xf8>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60bb      	str	r3, [r7, #8]
 8000cd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	4b22      	ldr	r3, [pc, #136]	; (8000d68 <MX_GPIO_Init+0xf8>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a21      	ldr	r2, [pc, #132]	; (8000d68 <MX_GPIO_Init+0xf8>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <MX_GPIO_Init+0xf8>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RIGHT_BACKWARD_Pin|LEFT_FORWARD_Pin|LEFT_BACKWARD_Pin|RIGHT_FORWARD_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	21f0      	movs	r1, #240	; 0xf0
 8000cfa:	481c      	ldr	r0, [pc, #112]	; (8000d6c <MX_GPIO_Init+0xfc>)
 8000cfc:	f001 f81c 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WATER_PUMP_GPIO_Port, WATER_PUMP_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d06:	481a      	ldr	r0, [pc, #104]	; (8000d70 <MX_GPIO_Init+0x100>)
 8000d08:	f001 f816 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RIGHT_BACKWARD_Pin LEFT_FORWARD_Pin LEFT_BACKWARD_Pin RIGHT_FORWARD_Pin */
  GPIO_InitStruct.Pin = RIGHT_BACKWARD_Pin|LEFT_FORWARD_Pin|LEFT_BACKWARD_Pin|RIGHT_FORWARD_Pin;
 8000d0c:	23f0      	movs	r3, #240	; 0xf0
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	4812      	ldr	r0, [pc, #72]	; (8000d6c <MX_GPIO_Init+0xfc>)
 8000d24:	f000 fe6c 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OBSTACLE_Pin */
  GPIO_InitStruct.Pin = OBSTACLE_Pin;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OBSTACLE_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	480d      	ldr	r0, [pc, #52]	; (8000d70 <MX_GPIO_Init+0x100>)
 8000d3c:	f000 fe60 	bl	8001a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : WATER_PUMP_Pin */
  GPIO_InitStruct.Pin = WATER_PUMP_Pin;
 8000d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WATER_PUMP_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_GPIO_Init+0x100>)
 8000d5a:	f000 fe51 	bl	8001a00 <HAL_GPIO_Init>

}
 8000d5e:	bf00      	nop
 8000d60:	3728      	adds	r7, #40	; 0x28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	40020400 	.word	0x40020400

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>

08000d7e <string_compare>:
uint8_t timer_count = 0, buffer_index = 0;
volatile uint8_t automode = 0;

flowerData amount[3]={{CODE_R,1500,0},{CODE_G,3000,0},{CODE_B,4500,0}};

uint8_t string_compare(char array1[], char array2[], uint16_t length) {
 8000d7e:	b480      	push	{r7}
 8000d80:	b087      	sub	sp, #28
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	80fb      	strh	r3, [r7, #6]
	uint8_t comVAR = 0, i;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < length; i++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	75bb      	strb	r3, [r7, #22]
 8000d94:	e012      	b.n	8000dbc <string_compare+0x3e>
		if (array1[i] == array2[i])
 8000d96:	7dbb      	ldrb	r3, [r7, #22]
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	781a      	ldrb	r2, [r3, #0]
 8000d9e:	7dbb      	ldrb	r3, [r7, #22]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	440b      	add	r3, r1
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d103      	bne.n	8000db2 <string_compare+0x34>
			comVAR++;
 8000daa:	7dfb      	ldrb	r3, [r7, #23]
 8000dac:	3301      	adds	r3, #1
 8000dae:	75fb      	strb	r3, [r7, #23]
 8000db0:	e001      	b.n	8000db6 <string_compare+0x38>
		else
			comVAR = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	75fb      	strb	r3, [r7, #23]
	for (i = 0; i < length; i++) {
 8000db6:	7dbb      	ldrb	r3, [r7, #22]
 8000db8:	3301      	adds	r3, #1
 8000dba:	75bb      	strb	r3, [r7, #22]
 8000dbc:	7dbb      	ldrb	r3, [r7, #22]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	88fa      	ldrh	r2, [r7, #6]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d8e7      	bhi.n	8000d96 <string_compare+0x18>
	}
	if (comVAR == length)
 8000dc6:	7dfb      	ldrb	r3, [r7, #23]
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	88fa      	ldrh	r2, [r7, #6]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d101      	bne.n	8000dd4 <string_compare+0x56>
		return 1;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e000      	b.n	8000dd6 <string_compare+0x58>
	else
		return 0;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	371c      	adds	r7, #28
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <Message_handler>:

void Message_handler() {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
	if (string_compare(buffer, "ON", strlen("ON"))) {
 8000dea:	2202      	movs	r2, #2
 8000dec:	4993      	ldr	r1, [pc, #588]	; (800103c <Message_handler+0x258>)
 8000dee:	4894      	ldr	r0, [pc, #592]	; (8001040 <Message_handler+0x25c>)
 8000df0:	f7ff ffc5 	bl	8000d7e <string_compare>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d009      	beq.n	8000e0e <Message_handler+0x2a>
		pumpON();
 8000dfa:	f7ff fc9f 	bl	800073c <pumpON>
		HAL_UART_Transmit(&huart2, (uint8_t*) "PUMP is ON.\n",
 8000dfe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e02:	220c      	movs	r2, #12
 8000e04:	498f      	ldr	r1, [pc, #572]	; (8001044 <Message_handler+0x260>)
 8000e06:	4890      	ldr	r0, [pc, #576]	; (8001048 <Message_handler+0x264>)
 8000e08:	f002 f895 	bl	8002f36 <HAL_UART_Transmit>
 8000e0c:	e106      	b.n	800101c <Message_handler+0x238>
				strlen("PUMP is ON.\n"), 500);
	} else if (string_compare(buffer, "OFF", strlen("OFF"))) {
 8000e0e:	2203      	movs	r2, #3
 8000e10:	498e      	ldr	r1, [pc, #568]	; (800104c <Message_handler+0x268>)
 8000e12:	488b      	ldr	r0, [pc, #556]	; (8001040 <Message_handler+0x25c>)
 8000e14:	f7ff ffb3 	bl	8000d7e <string_compare>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d009      	beq.n	8000e32 <Message_handler+0x4e>
		pumpOFF();
 8000e1e:	f7ff fc99 	bl	8000754 <pumpOFF>
		HAL_UART_Transmit(&huart2, (uint8_t*) "PUMP is OFF.\n",
 8000e22:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e26:	220d      	movs	r2, #13
 8000e28:	4989      	ldr	r1, [pc, #548]	; (8001050 <Message_handler+0x26c>)
 8000e2a:	4887      	ldr	r0, [pc, #540]	; (8001048 <Message_handler+0x264>)
 8000e2c:	f002 f883 	bl	8002f36 <HAL_UART_Transmit>
 8000e30:	e0f4      	b.n	800101c <Message_handler+0x238>
				strlen("PUMP is OFF.\n"), 500);
	} else if (string_compare(buffer, "FORWARD", strlen("FORWARD"))) {
 8000e32:	2207      	movs	r2, #7
 8000e34:	4987      	ldr	r1, [pc, #540]	; (8001054 <Message_handler+0x270>)
 8000e36:	4882      	ldr	r0, [pc, #520]	; (8001040 <Message_handler+0x25c>)
 8000e38:	f7ff ffa1 	bl	8000d7e <string_compare>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d009      	beq.n	8000e56 <Message_handler+0x72>
		forward();
 8000e42:	f7ff fbeb 	bl	800061c <forward>
		HAL_UART_Transmit(&huart2, (uint8_t*) "TANK is FORWARD.\n",
 8000e46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e4a:	2211      	movs	r2, #17
 8000e4c:	4982      	ldr	r1, [pc, #520]	; (8001058 <Message_handler+0x274>)
 8000e4e:	487e      	ldr	r0, [pc, #504]	; (8001048 <Message_handler+0x264>)
 8000e50:	f002 f871 	bl	8002f36 <HAL_UART_Transmit>
 8000e54:	e0e2      	b.n	800101c <Message_handler+0x238>
				strlen("TANK is FORWARD.\n"), 500);
		//HAL_Delay(1000);
		//stop();
	} else if (string_compare(buffer, "BACKWARD", strlen("BACKWARD"))) {
 8000e56:	2208      	movs	r2, #8
 8000e58:	4980      	ldr	r1, [pc, #512]	; (800105c <Message_handler+0x278>)
 8000e5a:	4879      	ldr	r0, [pc, #484]	; (8001040 <Message_handler+0x25c>)
 8000e5c:	f7ff ff8f 	bl	8000d7e <string_compare>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d009      	beq.n	8000e7a <Message_handler+0x96>
		backward();
 8000e66:	f7ff fc35 	bl	80006d4 <backward>
		HAL_UART_Transmit(&huart2, (uint8_t*) "TANK is BACKWARD.\n",
 8000e6a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e6e:	2212      	movs	r2, #18
 8000e70:	497b      	ldr	r1, [pc, #492]	; (8001060 <Message_handler+0x27c>)
 8000e72:	4875      	ldr	r0, [pc, #468]	; (8001048 <Message_handler+0x264>)
 8000e74:	f002 f85f 	bl	8002f36 <HAL_UART_Transmit>
 8000e78:	e0d0      	b.n	800101c <Message_handler+0x238>
				strlen("TANK is BACKWARD.\n"), 500);
		//HAL_Delay(1000);
		//stop();
	} else if (string_compare(buffer, "LEFT", strlen("LEFT"))) {
 8000e7a:	2204      	movs	r2, #4
 8000e7c:	4979      	ldr	r1, [pc, #484]	; (8001064 <Message_handler+0x280>)
 8000e7e:	4870      	ldr	r0, [pc, #448]	; (8001040 <Message_handler+0x25c>)
 8000e80:	f7ff ff7d 	bl	8000d7e <string_compare>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d009      	beq.n	8000e9e <Message_handler+0xba>
		turnLeft();
 8000e8a:	f7ff fbdf 	bl	800064c <turnLeft>
		HAL_UART_Transmit(&huart2, (uint8_t*) "TANK is LEFT.\n",
 8000e8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e92:	220e      	movs	r2, #14
 8000e94:	4974      	ldr	r1, [pc, #464]	; (8001068 <Message_handler+0x284>)
 8000e96:	486c      	ldr	r0, [pc, #432]	; (8001048 <Message_handler+0x264>)
 8000e98:	f002 f84d 	bl	8002f36 <HAL_UART_Transmit>
 8000e9c:	e0be      	b.n	800101c <Message_handler+0x238>
				strlen("TANK is LEFT.\n"), 500);
		//HAL_Delay(1000);
		//stop();
	} else if (string_compare(buffer, "RIGHT", strlen("RIGHT"))) {
 8000e9e:	2205      	movs	r2, #5
 8000ea0:	4972      	ldr	r1, [pc, #456]	; (800106c <Message_handler+0x288>)
 8000ea2:	4867      	ldr	r0, [pc, #412]	; (8001040 <Message_handler+0x25c>)
 8000ea4:	f7ff ff6b 	bl	8000d7e <string_compare>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d009      	beq.n	8000ec2 <Message_handler+0xde>
		turnRight();
 8000eae:	f7ff fbef 	bl	8000690 <turnRight>
		HAL_UART_Transmit(&huart2, (uint8_t*) "TANK is RIGHT.\n",
 8000eb2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000eb6:	220f      	movs	r2, #15
 8000eb8:	496d      	ldr	r1, [pc, #436]	; (8001070 <Message_handler+0x28c>)
 8000eba:	4863      	ldr	r0, [pc, #396]	; (8001048 <Message_handler+0x264>)
 8000ebc:	f002 f83b 	bl	8002f36 <HAL_UART_Transmit>
 8000ec0:	e0ac      	b.n	800101c <Message_handler+0x238>
				strlen("TANK is RIGHT.\n"), 500);
		//HAL_Delay(1000);
		//stop();
	} else if (string_compare(buffer, "STOP", strlen("STOP"))) {
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	496b      	ldr	r1, [pc, #428]	; (8001074 <Message_handler+0x290>)
 8000ec6:	485e      	ldr	r0, [pc, #376]	; (8001040 <Message_handler+0x25c>)
 8000ec8:	f7ff ff59 	bl	8000d7e <string_compare>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d009      	beq.n	8000ee6 <Message_handler+0x102>
		stop();
 8000ed2:	f7ff fb8d 	bl	80005f0 <stop>
		HAL_UART_Transmit(&huart2, (uint8_t*) "TANK is STOP.\n",
 8000ed6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000eda:	220e      	movs	r2, #14
 8000edc:	4966      	ldr	r1, [pc, #408]	; (8001078 <Message_handler+0x294>)
 8000ede:	485a      	ldr	r0, [pc, #360]	; (8001048 <Message_handler+0x264>)
 8000ee0:	f002 f829 	bl	8002f36 <HAL_UART_Transmit>
 8000ee4:	e09a      	b.n	800101c <Message_handler+0x238>
				strlen("TANK is STOP.\n"), 500);
		//HAL_Delay(1000);
		//stop();
	} else if (string_compare(buffer, "AUTO", strlen("AUTO"))) {
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	4964      	ldr	r1, [pc, #400]	; (800107c <Message_handler+0x298>)
 8000eea:	4855      	ldr	r0, [pc, #340]	; (8001040 <Message_handler+0x25c>)
 8000eec:	f7ff ff47 	bl	8000d7e <string_compare>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d015      	beq.n	8000f22 <Message_handler+0x13e>

		if (automode == 0) {
 8000ef6:	4b62      	ldr	r3, [pc, #392]	; (8001080 <Message_handler+0x29c>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d103      	bne.n	8000f08 <Message_handler+0x124>
			automode = 1;
 8000f00:	4b5f      	ldr	r3, [pc, #380]	; (8001080 <Message_handler+0x29c>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	701a      	strb	r2, [r3, #0]
 8000f06:	e004      	b.n	8000f12 <Message_handler+0x12e>
		} else
			{

			automode = 0;
 8000f08:	4b5d      	ldr	r3, [pc, #372]	; (8001080 <Message_handler+0x29c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
			stop();
 8000f0e:	f7ff fb6f 	bl	80005f0 <stop>
			}

		HAL_UART_Transmit(&huart2, (uint8_t*) "TANK is AUTOMODE ON OFF.\n",
 8000f12:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f16:	2219      	movs	r2, #25
 8000f18:	495a      	ldr	r1, [pc, #360]	; (8001084 <Message_handler+0x2a0>)
 8000f1a:	484b      	ldr	r0, [pc, #300]	; (8001048 <Message_handler+0x264>)
 8000f1c:	f002 f80b 	bl	8002f36 <HAL_UART_Transmit>
 8000f20:	e07c      	b.n	800101c <Message_handler+0x238>
				strlen("TANK is AUTOMODE ON OFF.\n"), 500);
		//HAL_Delay(1000);
		//stop();
	} else if (string_compare(buffer, "DATA ", strlen("DATA "))) {
 8000f22:	2205      	movs	r2, #5
 8000f24:	4958      	ldr	r1, [pc, #352]	; (8001088 <Message_handler+0x2a4>)
 8000f26:	4846      	ldr	r0, [pc, #280]	; (8001040 <Message_handler+0x25c>)
 8000f28:	f7ff ff29 	bl	8000d7e <string_compare>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d05d      	beq.n	8000fee <Message_handler+0x20a>
		char delim[] = " ";
 8000f32:	2320      	movs	r3, #32
 8000f34:	803b      	strh	r3, [r7, #0]
		char *ptr = strtok(buffer, delim);//DATA
 8000f36:	463b      	mov	r3, r7
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4841      	ldr	r0, [pc, #260]	; (8001040 <Message_handler+0x25c>)
 8000f3c:	f002 ffee 	bl	8003f1c <strtok>
 8000f40:	6078      	str	r0, [r7, #4]
		ptr = strtok(NULL, delim);//R
 8000f42:	463b      	mov	r3, r7
 8000f44:	4619      	mov	r1, r3
 8000f46:	2000      	movs	r0, #0
 8000f48:	f002 ffe8 	bl	8003f1c <strtok>
 8000f4c:	6078      	str	r0, [r7, #4]
		amount[0].waterAmount=atoi(ptr);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f002 ffae 	bl	8003eb0 <atoi>
 8000f54:	4603      	mov	r3, r0
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b4c      	ldr	r3, [pc, #304]	; (800108c <Message_handler+0x2a8>)
 8000f5a:	605a      	str	r2, [r3, #4]
		ptr = strtok(NULL, delim);//R
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	2000      	movs	r0, #0
 8000f62:	f002 ffdb 	bl	8003f1c <strtok>
 8000f66:	6078      	str	r0, [r7, #4]
		amount[0].waterPeriod=atoi(ptr);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f002 ffa1 	bl	8003eb0 <atoi>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b46      	ldr	r3, [pc, #280]	; (800108c <Message_handler+0x2a8>)
 8000f74:	609a      	str	r2, [r3, #8]
		ptr = strtok(NULL, delim);//G
 8000f76:	463b      	mov	r3, r7
 8000f78:	4619      	mov	r1, r3
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f002 ffce 	bl	8003f1c <strtok>
 8000f80:	6078      	str	r0, [r7, #4]
		amount[1].waterAmount=atoi(ptr);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f002 ff94 	bl	8003eb0 <atoi>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b3f      	ldr	r3, [pc, #252]	; (800108c <Message_handler+0x2a8>)
 8000f8e:	611a      	str	r2, [r3, #16]
		ptr = strtok(NULL, delim);//G
 8000f90:	463b      	mov	r3, r7
 8000f92:	4619      	mov	r1, r3
 8000f94:	2000      	movs	r0, #0
 8000f96:	f002 ffc1 	bl	8003f1c <strtok>
 8000f9a:	6078      	str	r0, [r7, #4]
		amount[1].waterPeriod=atoi(ptr);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f002 ff87 	bl	8003eb0 <atoi>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b39      	ldr	r3, [pc, #228]	; (800108c <Message_handler+0x2a8>)
 8000fa8:	615a      	str	r2, [r3, #20]
		ptr = strtok(NULL, delim);//B
 8000faa:	463b      	mov	r3, r7
 8000fac:	4619      	mov	r1, r3
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f002 ffb4 	bl	8003f1c <strtok>
 8000fb4:	6078      	str	r0, [r7, #4]
		amount[2].waterAmount=atoi(ptr);
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f002 ff7a 	bl	8003eb0 <atoi>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	4b32      	ldr	r3, [pc, #200]	; (800108c <Message_handler+0x2a8>)
 8000fc2:	61da      	str	r2, [r3, #28]
		ptr = strtok(NULL, delim);//B
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f002 ffa7 	bl	8003f1c <strtok>
 8000fce:	6078      	str	r0, [r7, #4]
		amount[2].waterPeriod=atoi(ptr);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f002 ff6d 	bl	8003eb0 <atoi>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <Message_handler+0x2a8>)
 8000fdc:	621a      	str	r2, [r3, #32]


		HAL_UART_Transmit(&huart2, (uint8_t*) "DATA ACCEPTED.\n",
 8000fde:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	492a      	ldr	r1, [pc, #168]	; (8001090 <Message_handler+0x2ac>)
 8000fe6:	4818      	ldr	r0, [pc, #96]	; (8001048 <Message_handler+0x264>)
 8000fe8:	f001 ffa5 	bl	8002f36 <HAL_UART_Transmit>
 8000fec:	e016      	b.n	800101c <Message_handler+0x238>
		//HAL_Delay(1000);
		//stop();
	}

	else {
		strcat(buffer, "\n");
 8000fee:	4814      	ldr	r0, [pc, #80]	; (8001040 <Message_handler+0x25c>)
 8000ff0:	f7ff f8f6 	bl	80001e0 <strlen>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <Message_handler+0x25c>)
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4925      	ldr	r1, [pc, #148]	; (8001094 <Message_handler+0x2b0>)
 8000ffe:	461a      	mov	r2, r3
 8001000:	460b      	mov	r3, r1
 8001002:	881b      	ldrh	r3, [r3, #0]
 8001004:	8013      	strh	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), 500);
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <Message_handler+0x25c>)
 8001008:	f7ff f8ea 	bl	80001e0 <strlen>
 800100c:	4603      	mov	r3, r0
 800100e:	b29a      	uxth	r2, r3
 8001010:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001014:	490a      	ldr	r1, [pc, #40]	; (8001040 <Message_handler+0x25c>)
 8001016:	480c      	ldr	r0, [pc, #48]	; (8001048 <Message_handler+0x264>)
 8001018:	f001 ff8d 	bl	8002f36 <HAL_UART_Transmit>
	}

	memset(buffer, 0, sizeof(buffer));
 800101c:	2232      	movs	r2, #50	; 0x32
 800101e:	2100      	movs	r1, #0
 8001020:	4807      	ldr	r0, [pc, #28]	; (8001040 <Message_handler+0x25c>)
 8001022:	f002 ff73 	bl	8003f0c <memset>
	buffer_index = 0;
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <Message_handler+0x2b4>)
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]
	timer_count = 0;
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <Message_handler+0x2b8>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	0800508c 	.word	0x0800508c
 8001040:	200001f4 	.word	0x200001f4
 8001044:	08005090 	.word	0x08005090
 8001048:	200001b0 	.word	0x200001b0
 800104c:	080050a0 	.word	0x080050a0
 8001050:	080050a4 	.word	0x080050a4
 8001054:	080050b4 	.word	0x080050b4
 8001058:	080050bc 	.word	0x080050bc
 800105c:	080050d0 	.word	0x080050d0
 8001060:	080050dc 	.word	0x080050dc
 8001064:	080050f0 	.word	0x080050f0
 8001068:	080050f8 	.word	0x080050f8
 800106c:	08005108 	.word	0x08005108
 8001070:	08005110 	.word	0x08005110
 8001074:	08005120 	.word	0x08005120
 8001078:	08005128 	.word	0x08005128
 800107c:	08005138 	.word	0x08005138
 8001080:	200000ba 	.word	0x200000ba
 8001084:	08005140 	.word	0x08005140
 8001088:	0800515c 	.word	0x0800515c
 800108c:	20000004 	.word	0x20000004
 8001090:	08005164 	.word	0x08005164
 8001094:	08005174 	.word	0x08005174
 8001098:	200000b9 	.word	0x200000b9
 800109c:	200000b8 	.word	0x200000b8

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <HAL_MspInit+0x4c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	4a0f      	ldr	r2, [pc, #60]	; (80010ec <HAL_MspInit+0x4c>)
 80010b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b4:	6453      	str	r3, [r2, #68]	; 0x44
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <HAL_MspInit+0x4c>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <HAL_MspInit+0x4c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <HAL_MspInit+0x4c>)
 80010cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d0:	6413      	str	r3, [r2, #64]	; 0x40
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_MspInit+0x4c>)
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800

080010f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001100:	d115      	bne.n	800112e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <HAL_TIM_Base_MspInit+0x48>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a0b      	ldr	r2, [pc, #44]	; (8001138 <HAL_TIM_Base_MspInit+0x48>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_TIM_Base_MspInit+0x48>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	201c      	movs	r0, #28
 8001124:	f000 fba3 	bl	800186e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001128:	201c      	movs	r0, #28
 800112a:	f000 fbbc 	bl	80018a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800

0800113c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08e      	sub	sp, #56	; 0x38
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a50      	ldr	r2, [pc, #320]	; (800129c <HAL_UART_MspInit+0x160>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d12d      	bne.n	80011ba <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	623b      	str	r3, [r7, #32]
 8001162:	4b4f      	ldr	r3, [pc, #316]	; (80012a0 <HAL_UART_MspInit+0x164>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a4e      	ldr	r2, [pc, #312]	; (80012a0 <HAL_UART_MspInit+0x164>)
 8001168:	f043 0310 	orr.w	r3, r3, #16
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b4c      	ldr	r3, [pc, #304]	; (80012a0 <HAL_UART_MspInit+0x164>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f003 0310 	and.w	r3, r3, #16
 8001176:	623b      	str	r3, [r7, #32]
 8001178:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
 800117e:	4b48      	ldr	r3, [pc, #288]	; (80012a0 <HAL_UART_MspInit+0x164>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a47      	ldr	r2, [pc, #284]	; (80012a0 <HAL_UART_MspInit+0x164>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b45      	ldr	r3, [pc, #276]	; (80012a0 <HAL_UART_MspInit+0x164>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001196:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011a8:	2307      	movs	r3, #7
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b0:	4619      	mov	r1, r3
 80011b2:	483c      	ldr	r0, [pc, #240]	; (80012a4 <HAL_UART_MspInit+0x168>)
 80011b4:	f000 fc24 	bl	8001a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80011b8:	e06b      	b.n	8001292 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART2)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a3a      	ldr	r2, [pc, #232]	; (80012a8 <HAL_UART_MspInit+0x16c>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d134      	bne.n	800122e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
 80011c8:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <HAL_UART_MspInit+0x164>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	4a34      	ldr	r2, [pc, #208]	; (80012a0 <HAL_UART_MspInit+0x164>)
 80011ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d2:	6413      	str	r3, [r2, #64]	; 0x40
 80011d4:	4b32      	ldr	r3, [pc, #200]	; (80012a0 <HAL_UART_MspInit+0x164>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <HAL_UART_MspInit+0x164>)
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e8:	4a2d      	ldr	r2, [pc, #180]	; (80012a0 <HAL_UART_MspInit+0x164>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	6313      	str	r3, [r2, #48]	; 0x30
 80011f0:	4b2b      	ldr	r3, [pc, #172]	; (80012a0 <HAL_UART_MspInit+0x164>)
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011fc:	230c      	movs	r3, #12
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001208:	2303      	movs	r3, #3
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800120c:	2307      	movs	r3, #7
 800120e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001214:	4619      	mov	r1, r3
 8001216:	4823      	ldr	r0, [pc, #140]	; (80012a4 <HAL_UART_MspInit+0x168>)
 8001218:	f000 fbf2 	bl	8001a00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800121c:	2200      	movs	r2, #0
 800121e:	2100      	movs	r1, #0
 8001220:	2026      	movs	r0, #38	; 0x26
 8001222:	f000 fb24 	bl	800186e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001226:	2026      	movs	r0, #38	; 0x26
 8001228:	f000 fb3d 	bl	80018a6 <HAL_NVIC_EnableIRQ>
}
 800122c:	e031      	b.n	8001292 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <HAL_UART_MspInit+0x170>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d12c      	bne.n	8001292 <HAL_UART_MspInit+0x156>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <HAL_UART_MspInit+0x164>)
 800123e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001240:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <HAL_UART_MspInit+0x164>)
 8001242:	f043 0320 	orr.w	r3, r3, #32
 8001246:	6453      	str	r3, [r2, #68]	; 0x44
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_UART_MspInit+0x164>)
 800124a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124c:	f003 0320 	and.w	r3, r3, #32
 8001250:	613b      	str	r3, [r7, #16]
 8001252:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_UART_MspInit+0x164>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a10      	ldr	r2, [pc, #64]	; (80012a0 <HAL_UART_MspInit+0x164>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_UART_MspInit+0x164>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001270:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001276:	2302      	movs	r3, #2
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001282:	2308      	movs	r3, #8
 8001284:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <HAL_UART_MspInit+0x168>)
 800128e:	f000 fbb7 	bl	8001a00 <HAL_GPIO_Init>
}
 8001292:	bf00      	nop
 8001294:	3738      	adds	r7, #56	; 0x38
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40011000 	.word	0x40011000
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40004400 	.word	0x40004400
 80012ac:	40011400 	.word	0x40011400

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80012b4:	e7fe      	b.n	80012b4 <NMI_Handler+0x4>

080012b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <MemManage_Handler+0x4>

080012c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <UsageFault_Handler+0x4>

080012ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012fc:	f000 f998 	bl	8001630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}

08001304 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (strlen(buffer) > 0)
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <TIM2_IRQHandler+0x30>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <TIM2_IRQHandler+0x18>
		timer_count++;
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <TIM2_IRQHandler+0x34>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	b2da      	uxtb	r2, r3
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <TIM2_IRQHandler+0x34>)
 800131a:	701a      	strb	r2, [r3, #0]

	if (timer_count > 5)
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <TIM2_IRQHandler+0x34>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b05      	cmp	r3, #5
 8001322:	d901      	bls.n	8001328 <TIM2_IRQHandler+0x24>
		Message_handler();
 8001324:	f7ff fd5e 	bl	8000de4 <Message_handler>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <TIM2_IRQHandler+0x38>)
 800132a:	f001 fa19 	bl	8002760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200001f4 	.word	0x200001f4
 8001338:	200000b8 	.word	0x200000b8
 800133c:	20000168 	.word	0x20000168

08001340 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_Receive(&huart2, (uint8_t*) &buffer[buffer_index++], 1, 10);
 8001344:	4b0d      	ldr	r3, [pc, #52]	; (800137c <USART2_IRQHandler+0x3c>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	b2d1      	uxtb	r1, r2
 800134c:	4a0b      	ldr	r2, [pc, #44]	; (800137c <USART2_IRQHandler+0x3c>)
 800134e:	7011      	strb	r1, [r2, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b0b      	ldr	r3, [pc, #44]	; (8001380 <USART2_IRQHandler+0x40>)
 8001354:	18d1      	adds	r1, r2, r3
 8001356:	230a      	movs	r3, #10
 8001358:	2201      	movs	r2, #1
 800135a:	480a      	ldr	r0, [pc, #40]	; (8001384 <USART2_IRQHandler+0x44>)
 800135c:	f001 fe7d 	bl	800305a <HAL_UART_Receive>

	if (buffer[buffer_index - 1] == '\n')
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <USART2_IRQHandler+0x3c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	3b01      	subs	r3, #1
 8001366:	4a06      	ldr	r2, [pc, #24]	; (8001380 <USART2_IRQHandler+0x40>)
 8001368:	5cd3      	ldrb	r3, [r2, r3]
 800136a:	2b0a      	cmp	r3, #10
 800136c:	d101      	bne.n	8001372 <USART2_IRQHandler+0x32>
		Message_handler();
 800136e:	f7ff fd39 	bl	8000de4 <Message_handler>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001372:	4804      	ldr	r0, [pc, #16]	; (8001384 <USART2_IRQHandler+0x44>)
 8001374:	f001 ff14 	bl	80031a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	200000b9 	.word	0x200000b9
 8001380:	200001f4 	.word	0x200001f4
 8001384:	200001b0 	.word	0x200001b0

08001388 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
	return 1;
 800138c:	2301      	movs	r3, #1
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <_kill>:

int _kill(int pid, int sig)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013a2:	f002 fd89 	bl	8003eb8 <__errno>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2216      	movs	r2, #22
 80013aa:	601a      	str	r2, [r3, #0]
	return -1;
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <_exit>:

void _exit (int status)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff ffe7 	bl	8001398 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013ca:	e7fe      	b.n	80013ca <_exit+0x12>

080013cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	e00a      	b.n	80013f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013de:	f3af 8000 	nop.w
 80013e2:	4601      	mov	r1, r0
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	1c5a      	adds	r2, r3, #1
 80013e8:	60ba      	str	r2, [r7, #8]
 80013ea:	b2ca      	uxtb	r2, r1
 80013ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	697a      	ldr	r2, [r7, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	dbf0      	blt.n	80013de <_read+0x12>
	}

return len;
 80013fc:	687b      	ldr	r3, [r7, #4]
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	60f8      	str	r0, [r7, #12]
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	e009      	b.n	800142c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	60ba      	str	r2, [r7, #8]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	dbf1      	blt.n	8001418 <_write+0x12>
	}
	return len;
 8001434:	687b      	ldr	r3, [r7, #4]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_close>:

int _close(int file)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
	return -1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001466:	605a      	str	r2, [r3, #4]
	return 0;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <_isatty>:

int _isatty(int file)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
	return 1;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
	return 0;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80014b0:	4a14      	ldr	r2, [pc, #80]	; (8001504 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80014b2:	4b15      	ldr	r3, [pc, #84]	; (8001508 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <_sbrk+0x64>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <_sbrk+0x68>)
 80014c8:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80014ca:	4b10      	ldr	r3, [pc, #64]	; (800150c <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d207      	bcs.n	80014e8 <_sbrk+0x40>
		errno = ENOMEM;
 80014d8:	f002 fcee 	bl	8003eb8 <__errno>
 80014dc:	4603      	mov	r3, r0
 80014de:	220c      	movs	r2, #12
 80014e0:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	e009      	b.n	80014fc <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80014ee:	4b07      	ldr	r3, [pc, #28]	; (800150c <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <_sbrk+0x64>)
 80014f8:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20010000 	.word	0x20010000
 8001508:	00000400 	.word	0x00000400
 800150c:	200000bc 	.word	0x200000bc
 8001510:	20000240 	.word	0x20000240

08001514 <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory 
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <SystemInit+0x20>)
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800151e:	4a05      	ldr	r2, [pc, #20]	; (8001534 <SystemInit+0x20>)
 8001520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001538:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001570 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800153c:	480d      	ldr	r0, [pc, #52]	; (8001574 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800153e:	490e      	ldr	r1, [pc, #56]	; (8001578 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001540:	4a0e      	ldr	r2, [pc, #56]	; (800157c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001544:	e002      	b.n	800154c <LoopCopyDataInit>

08001546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154a:	3304      	adds	r3, #4

0800154c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800154c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001550:	d3f9      	bcc.n	8001546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001552:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001554:	4c0b      	ldr	r4, [pc, #44]	; (8001584 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001558:	e001      	b.n	800155e <LoopFillZerobss>

0800155a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800155c:	3204      	adds	r2, #4

0800155e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001560:	d3fb      	bcc.n	800155a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001562:	f7ff ffd7 	bl	8001514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001566:	f002 fcad 	bl	8003ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156a:	f7ff fa11 	bl	8000990 <main>
  bx  lr    
 800156e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001570:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001578:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800157c:	080053ec 	.word	0x080053ec
  ldr r2, =_sbss
 8001580:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001584:	2000023c 	.word	0x2000023c

08001588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001588:	e7fe      	b.n	8001588 <ADC_IRQHandler>
	...

0800158c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <HAL_Init+0x40>)
 8001596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0a      	ldr	r2, [pc, #40]	; (80015cc <HAL_Init+0x40>)
 80015a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a07      	ldr	r2, [pc, #28]	; (80015cc <HAL_Init+0x40>)
 80015ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b4:	2003      	movs	r0, #3
 80015b6:	f000 f94f 	bl	8001858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ba:	200f      	movs	r0, #15
 80015bc:	f000 f808 	bl	80015d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c0:	f7ff fd6e 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023c00 	.word	0x40023c00

080015d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_InitTick+0x54>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_InitTick+0x58>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f967 	bl	80018c2 <HAL_SYSTICK_Config>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00e      	b.n	800161c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d80a      	bhi.n	800161a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001604:	2200      	movs	r2, #0
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f000 f92f 	bl	800186e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001610:	4a06      	ldr	r2, [pc, #24]	; (800162c <HAL_InitTick+0x5c>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000028 	.word	0x20000028
 8001628:	20000030 	.word	0x20000030
 800162c:	2000002c 	.word	0x2000002c

08001630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001634:	4b06      	ldr	r3, [pc, #24]	; (8001650 <HAL_IncTick+0x20>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_IncTick+0x24>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4413      	add	r3, r2
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <HAL_IncTick+0x24>)
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000030 	.word	0x20000030
 8001654:	20000228 	.word	0x20000228

08001658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <HAL_GetTick+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000228 	.word	0x20000228

08001670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff ffee 	bl	8001658 <HAL_GetTick>
 800167c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001688:	d005      	beq.n	8001696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_Delay+0x44>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001696:	bf00      	nop
 8001698:	f7ff ffde 	bl	8001658 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d8f7      	bhi.n	8001698 <HAL_Delay+0x28>
  {
  }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000030 	.word	0x20000030

080016b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ea:	4a04      	ldr	r2, [pc, #16]	; (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	60d3      	str	r3, [r2, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	2b00      	cmp	r3, #0
 800172c:	db0b      	blt.n	8001746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	f003 021f 	and.w	r2, r3, #31
 8001734:	4907      	ldr	r1, [pc, #28]	; (8001754 <__NVIC_EnableIRQ+0x38>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	095b      	lsrs	r3, r3, #5
 800173c:	2001      	movs	r0, #1
 800173e:	fa00 f202 	lsl.w	r2, r0, r2
 8001742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000e100 	.word	0xe000e100

08001758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	2b00      	cmp	r3, #0
 800176a:	db0a      	blt.n	8001782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	b2da      	uxtb	r2, r3
 8001770:	490c      	ldr	r1, [pc, #48]	; (80017a4 <__NVIC_SetPriority+0x4c>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	0112      	lsls	r2, r2, #4
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	440b      	add	r3, r1
 800177c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001780:	e00a      	b.n	8001798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4908      	ldr	r1, [pc, #32]	; (80017a8 <__NVIC_SetPriority+0x50>)
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	3b04      	subs	r3, #4
 8001790:	0112      	lsls	r2, r2, #4
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	440b      	add	r3, r1
 8001796:	761a      	strb	r2, [r3, #24]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000e100 	.word	0xe000e100
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b089      	sub	sp, #36	; 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f1c3 0307 	rsb	r3, r3, #7
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	bf28      	it	cs
 80017ca:	2304      	movcs	r3, #4
 80017cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3304      	adds	r3, #4
 80017d2:	2b06      	cmp	r3, #6
 80017d4:	d902      	bls.n	80017dc <NVIC_EncodePriority+0x30>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3b03      	subs	r3, #3
 80017da:	e000      	b.n	80017de <NVIC_EncodePriority+0x32>
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	f04f 32ff 	mov.w	r2, #4294967295
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43da      	mvns	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	401a      	ands	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f4:	f04f 31ff 	mov.w	r1, #4294967295
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	43d9      	mvns	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	4313      	orrs	r3, r2
         );
}
 8001806:	4618      	mov	r0, r3
 8001808:	3724      	adds	r7, #36	; 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001824:	d301      	bcc.n	800182a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001826:	2301      	movs	r3, #1
 8001828:	e00f      	b.n	800184a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <SysTick_Config+0x40>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001832:	210f      	movs	r1, #15
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f7ff ff8e 	bl	8001758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <SysTick_Config+0x40>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001842:	4b04      	ldr	r3, [pc, #16]	; (8001854 <SysTick_Config+0x40>)
 8001844:	2207      	movs	r2, #7
 8001846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	e000e010 	.word	0xe000e010

08001858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ff29 	bl	80016b8 <__NVIC_SetPriorityGrouping>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001880:	f7ff ff3e 	bl	8001700 <__NVIC_GetPriorityGrouping>
 8001884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	6978      	ldr	r0, [r7, #20]
 800188c:	f7ff ff8e 	bl	80017ac <NVIC_EncodePriority>
 8001890:	4602      	mov	r2, r0
 8001892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff5d 	bl	8001758 <__NVIC_SetPriority>
}
 800189e:	bf00      	nop
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff31 	bl	800171c <__NVIC_EnableIRQ>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ffa2 	bl	8001814 <SysTick_Config>
 80018d0:	4603      	mov	r3, r0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b084      	sub	sp, #16
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018e8:	f7ff feb6 	bl	8001658 <HAL_GetTick>
 80018ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d008      	beq.n	800190c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2280      	movs	r2, #128	; 0x80
 80018fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e052      	b.n	80019b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0216 	bic.w	r2, r2, #22
 800191a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	695a      	ldr	r2, [r3, #20]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800192a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001930:	2b00      	cmp	r3, #0
 8001932:	d103      	bne.n	800193c <HAL_DMA_Abort+0x62>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001938:	2b00      	cmp	r3, #0
 800193a:	d007      	beq.n	800194c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0208 	bic.w	r2, r2, #8
 800194a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0201 	bic.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800195c:	e013      	b.n	8001986 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800195e:	f7ff fe7b 	bl	8001658 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b05      	cmp	r3, #5
 800196a:	d90c      	bls.n	8001986 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2220      	movs	r2, #32
 8001970:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2203      	movs	r2, #3
 8001976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e015      	b.n	80019b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1e4      	bne.n	800195e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001998:	223f      	movs	r2, #63	; 0x3f
 800199a:	409a      	lsls	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d004      	beq.n	80019d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2280      	movs	r2, #128	; 0x80
 80019d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e00c      	b.n	80019f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2205      	movs	r2, #5
 80019dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
 8001a1a:	e159      	b.n	8001cd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	f040 8148 	bne.w	8001cca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d005      	beq.n	8001a52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d130      	bne.n	8001ab4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a88:	2201      	movs	r2, #1
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 0201 	and.w	r2, r3, #1
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b03      	cmp	r3, #3
 8001abe:	d017      	beq.n	8001af0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	2203      	movs	r2, #3
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d123      	bne.n	8001b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	08da      	lsrs	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	3208      	adds	r2, #8
 8001b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	691a      	ldr	r2, [r3, #16]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	08da      	lsrs	r2, r3, #3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3208      	adds	r2, #8
 8001b3e:	69b9      	ldr	r1, [r7, #24]
 8001b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	2203      	movs	r2, #3
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 0203 	and.w	r2, r3, #3
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	f000 80a2 	beq.w	8001cca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	4b57      	ldr	r3, [pc, #348]	; (8001ce8 <HAL_GPIO_Init+0x2e8>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a56      	ldr	r2, [pc, #344]	; (8001ce8 <HAL_GPIO_Init+0x2e8>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b54      	ldr	r3, [pc, #336]	; (8001ce8 <HAL_GPIO_Init+0x2e8>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba2:	4a52      	ldr	r2, [pc, #328]	; (8001cec <HAL_GPIO_Init+0x2ec>)
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	3302      	adds	r3, #2
 8001baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	220f      	movs	r2, #15
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a49      	ldr	r2, [pc, #292]	; (8001cf0 <HAL_GPIO_Init+0x2f0>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d019      	beq.n	8001c02 <HAL_GPIO_Init+0x202>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a48      	ldr	r2, [pc, #288]	; (8001cf4 <HAL_GPIO_Init+0x2f4>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_GPIO_Init+0x1fe>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a47      	ldr	r2, [pc, #284]	; (8001cf8 <HAL_GPIO_Init+0x2f8>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00d      	beq.n	8001bfa <HAL_GPIO_Init+0x1fa>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a46      	ldr	r2, [pc, #280]	; (8001cfc <HAL_GPIO_Init+0x2fc>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d007      	beq.n	8001bf6 <HAL_GPIO_Init+0x1f6>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a45      	ldr	r2, [pc, #276]	; (8001d00 <HAL_GPIO_Init+0x300>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d101      	bne.n	8001bf2 <HAL_GPIO_Init+0x1f2>
 8001bee:	2304      	movs	r3, #4
 8001bf0:	e008      	b.n	8001c04 <HAL_GPIO_Init+0x204>
 8001bf2:	2307      	movs	r3, #7
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x204>
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e004      	b.n	8001c04 <HAL_GPIO_Init+0x204>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e002      	b.n	8001c04 <HAL_GPIO_Init+0x204>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <HAL_GPIO_Init+0x204>
 8001c02:	2300      	movs	r3, #0
 8001c04:	69fa      	ldr	r2, [r7, #28]
 8001c06:	f002 0203 	and.w	r2, r2, #3
 8001c0a:	0092      	lsls	r2, r2, #2
 8001c0c:	4093      	lsls	r3, r2
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c14:	4935      	ldr	r1, [pc, #212]	; (8001cec <HAL_GPIO_Init+0x2ec>)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c22:	4b38      	ldr	r3, [pc, #224]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c46:	4a2f      	ldr	r2, [pc, #188]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c4c:	4b2d      	ldr	r3, [pc, #180]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c70:	4a24      	ldr	r2, [pc, #144]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c76:	4b23      	ldr	r3, [pc, #140]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c9a:	4a1a      	ldr	r2, [pc, #104]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca0:	4b18      	ldr	r3, [pc, #96]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc4:	4a0f      	ldr	r2, [pc, #60]	; (8001d04 <HAL_GPIO_Init+0x304>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	2b0f      	cmp	r3, #15
 8001cd4:	f67f aea2 	bls.w	8001a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3724      	adds	r7, #36	; 0x24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40013800 	.word	0x40013800
 8001cf0:	40020000 	.word	0x40020000
 8001cf4:	40020400 	.word	0x40020400
 8001cf8:	40020800 	.word	0x40020800
 8001cfc:	40020c00 	.word	0x40020c00
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40013c00 	.word	0x40013c00

08001d08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	887b      	ldrh	r3, [r7, #2]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d002      	beq.n	8001d26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
 8001d24:	e001      	b.n	8001d2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
 8001d44:	4613      	mov	r3, r2
 8001d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d48:	787b      	ldrb	r3, [r7, #1]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d4e:	887a      	ldrh	r2, [r7, #2]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d54:	e003      	b.n	8001d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d56:	887b      	ldrh	r3, [r7, #2]
 8001d58:	041a      	lsls	r2, r3, #16
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	619a      	str	r2, [r3, #24]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e264      	b.n	8002248 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d075      	beq.n	8001e76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d8a:	4ba3      	ldr	r3, [pc, #652]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d00c      	beq.n	8001db0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d96:	4ba0      	ldr	r3, [pc, #640]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d112      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001da2:	4b9d      	ldr	r3, [pc, #628]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001daa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001dae:	d10b      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db0:	4b99      	ldr	r3, [pc, #612]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d05b      	beq.n	8001e74 <HAL_RCC_OscConfig+0x108>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d157      	bne.n	8001e74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e23f      	b.n	8002248 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd0:	d106      	bne.n	8001de0 <HAL_RCC_OscConfig+0x74>
 8001dd2:	4b91      	ldr	r3, [pc, #580]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a90      	ldr	r2, [pc, #576]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e01d      	b.n	8001e1c <HAL_RCC_OscConfig+0xb0>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de8:	d10c      	bne.n	8001e04 <HAL_RCC_OscConfig+0x98>
 8001dea:	4b8b      	ldr	r3, [pc, #556]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a8a      	ldr	r2, [pc, #552]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	4b88      	ldr	r3, [pc, #544]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a87      	ldr	r2, [pc, #540]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e00b      	b.n	8001e1c <HAL_RCC_OscConfig+0xb0>
 8001e04:	4b84      	ldr	r3, [pc, #528]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a83      	ldr	r2, [pc, #524]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b81      	ldr	r3, [pc, #516]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a80      	ldr	r2, [pc, #512]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001e16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d013      	beq.n	8001e4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7ff fc18 	bl	8001658 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7ff fc14 	bl	8001658 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e204      	b.n	8002248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e3e:	4b76      	ldr	r3, [pc, #472]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0xc0>
 8001e4a:	e014      	b.n	8001e76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4c:	f7ff fc04 	bl	8001658 <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e54:	f7ff fc00 	bl	8001658 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	; 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e1f0      	b.n	8002248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e66:	4b6c      	ldr	r3, [pc, #432]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f0      	bne.n	8001e54 <HAL_RCC_OscConfig+0xe8>
 8001e72:	e000      	b.n	8001e76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d063      	beq.n	8001f4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e82:	4b65      	ldr	r3, [pc, #404]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f003 030c 	and.w	r3, r3, #12
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e8e:	4b62      	ldr	r3, [pc, #392]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	d11c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e9a:	4b5f      	ldr	r3, [pc, #380]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d116      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ea6:	4b5c      	ldr	r3, [pc, #368]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_RCC_OscConfig+0x152>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d001      	beq.n	8001ebe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e1c4      	b.n	8002248 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebe:	4b56      	ldr	r3, [pc, #344]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4952      	ldr	r1, [pc, #328]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed2:	e03a      	b.n	8001f4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d020      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001edc:	4b4f      	ldr	r3, [pc, #316]	; (800201c <HAL_RCC_OscConfig+0x2b0>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee2:	f7ff fbb9 	bl	8001658 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eea:	f7ff fbb5 	bl	8001658 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e1a5      	b.n	8002248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efc:	4b46      	ldr	r3, [pc, #280]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0f0      	beq.n	8001eea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f08:	4b43      	ldr	r3, [pc, #268]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4940      	ldr	r1, [pc, #256]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	600b      	str	r3, [r1, #0]
 8001f1c:	e015      	b.n	8001f4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1e:	4b3f      	ldr	r3, [pc, #252]	; (800201c <HAL_RCC_OscConfig+0x2b0>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7ff fb98 	bl	8001658 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f2c:	f7ff fb94 	bl	8001658 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e184      	b.n	8002248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f3e:	4b36      	ldr	r3, [pc, #216]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d030      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d016      	beq.n	8001f8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5e:	4b30      	ldr	r3, [pc, #192]	; (8002020 <HAL_RCC_OscConfig+0x2b4>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f64:	f7ff fb78 	bl	8001658 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f6c:	f7ff fb74 	bl	8001658 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e164      	b.n	8002248 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f7e:	4b26      	ldr	r3, [pc, #152]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x200>
 8001f8a:	e015      	b.n	8001fb8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f8c:	4b24      	ldr	r3, [pc, #144]	; (8002020 <HAL_RCC_OscConfig+0x2b4>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f92:	f7ff fb61 	bl	8001658 <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f9a:	f7ff fb5d 	bl	8001658 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e14d      	b.n	8002248 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f0      	bne.n	8001f9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 80a0 	beq.w	8002106 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10f      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	4a0e      	ldr	r2, [pc, #56]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe6:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_RCC_OscConfig+0x2b8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d121      	bne.n	8002046 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <HAL_RCC_OscConfig+0x2b8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a07      	ldr	r2, [pc, #28]	; (8002024 <HAL_RCC_OscConfig+0x2b8>)
 8002008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200e:	f7ff fb23 	bl	8001658 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002014:	e011      	b.n	800203a <HAL_RCC_OscConfig+0x2ce>
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	42470000 	.word	0x42470000
 8002020:	42470e80 	.word	0x42470e80
 8002024:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002028:	f7ff fb16 	bl	8001658 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e106      	b.n	8002248 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203a:	4b85      	ldr	r3, [pc, #532]	; (8002250 <HAL_RCC_OscConfig+0x4e4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d106      	bne.n	800205c <HAL_RCC_OscConfig+0x2f0>
 800204e:	4b81      	ldr	r3, [pc, #516]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002052:	4a80      	ldr	r2, [pc, #512]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6713      	str	r3, [r2, #112]	; 0x70
 800205a:	e01c      	b.n	8002096 <HAL_RCC_OscConfig+0x32a>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b05      	cmp	r3, #5
 8002062:	d10c      	bne.n	800207e <HAL_RCC_OscConfig+0x312>
 8002064:	4b7b      	ldr	r3, [pc, #492]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	4a7a      	ldr	r2, [pc, #488]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 800206a:	f043 0304 	orr.w	r3, r3, #4
 800206e:	6713      	str	r3, [r2, #112]	; 0x70
 8002070:	4b78      	ldr	r3, [pc, #480]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	4a77      	ldr	r2, [pc, #476]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6713      	str	r3, [r2, #112]	; 0x70
 800207c:	e00b      	b.n	8002096 <HAL_RCC_OscConfig+0x32a>
 800207e:	4b75      	ldr	r3, [pc, #468]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 8002080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002082:	4a74      	ldr	r2, [pc, #464]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	6713      	str	r3, [r2, #112]	; 0x70
 800208a:	4b72      	ldr	r3, [pc, #456]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 800208c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208e:	4a71      	ldr	r2, [pc, #452]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 8002090:	f023 0304 	bic.w	r3, r3, #4
 8002094:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d015      	beq.n	80020ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209e:	f7ff fadb 	bl	8001658 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a4:	e00a      	b.n	80020bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7ff fad7 	bl	8001658 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e0c5      	b.n	8002248 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020bc:	4b65      	ldr	r3, [pc, #404]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0ee      	beq.n	80020a6 <HAL_RCC_OscConfig+0x33a>
 80020c8:	e014      	b.n	80020f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ca:	f7ff fac5 	bl	8001658 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d2:	f7ff fac1 	bl	8001658 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e0af      	b.n	8002248 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e8:	4b5a      	ldr	r3, [pc, #360]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1ee      	bne.n	80020d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d105      	bne.n	8002106 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fa:	4b56      	ldr	r3, [pc, #344]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a55      	ldr	r2, [pc, #340]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 8002100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 809b 	beq.w	8002246 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002110:	4b50      	ldr	r3, [pc, #320]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	2b08      	cmp	r3, #8
 800211a:	d05c      	beq.n	80021d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d141      	bne.n	80021a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002124:	4b4c      	ldr	r3, [pc, #304]	; (8002258 <HAL_RCC_OscConfig+0x4ec>)
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212a:	f7ff fa95 	bl	8001658 <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002132:	f7ff fa91 	bl	8001658 <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e081      	b.n	8002248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002144:	4b43      	ldr	r3, [pc, #268]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1f0      	bne.n	8002132 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69da      	ldr	r2, [r3, #28]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	019b      	lsls	r3, r3, #6
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002166:	085b      	lsrs	r3, r3, #1
 8002168:	3b01      	subs	r3, #1
 800216a:	041b      	lsls	r3, r3, #16
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002172:	061b      	lsls	r3, r3, #24
 8002174:	4937      	ldr	r1, [pc, #220]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800217a:	4b37      	ldr	r3, [pc, #220]	; (8002258 <HAL_RCC_OscConfig+0x4ec>)
 800217c:	2201      	movs	r2, #1
 800217e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7ff fa6a 	bl	8001658 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002188:	f7ff fa66 	bl	8001658 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e056      	b.n	8002248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219a:	4b2e      	ldr	r3, [pc, #184]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x41c>
 80021a6:	e04e      	b.n	8002246 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a8:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <HAL_RCC_OscConfig+0x4ec>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ae:	f7ff fa53 	bl	8001658 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b4:	e008      	b.n	80021c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b6:	f7ff fa4f 	bl	8001658 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e03f      	b.n	8002248 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c8:	4b22      	ldr	r3, [pc, #136]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1f0      	bne.n	80021b6 <HAL_RCC_OscConfig+0x44a>
 80021d4:	e037      	b.n	8002246 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e032      	b.n	8002248 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021e2:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <HAL_RCC_OscConfig+0x4e8>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d028      	beq.n	8002242 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d121      	bne.n	8002242 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002208:	429a      	cmp	r2, r3
 800220a:	d11a      	bne.n	8002242 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002212:	4013      	ands	r3, r2
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002218:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800221a:	4293      	cmp	r3, r2
 800221c:	d111      	bne.n	8002242 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002228:	085b      	lsrs	r3, r3, #1
 800222a:	3b01      	subs	r3, #1
 800222c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800222e:	429a      	cmp	r2, r3
 8002230:	d107      	bne.n	8002242 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800223e:	429a      	cmp	r2, r3
 8002240:	d001      	beq.n	8002246 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e000      	b.n	8002248 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40007000 	.word	0x40007000
 8002254:	40023800 	.word	0x40023800
 8002258:	42470060 	.word	0x42470060

0800225c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0cc      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002270:	4b68      	ldr	r3, [pc, #416]	; (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d90c      	bls.n	8002298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b65      	ldr	r3, [pc, #404]	; (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b63      	ldr	r3, [pc, #396]	; (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0b8      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d020      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b0:	4b59      	ldr	r3, [pc, #356]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	4a58      	ldr	r2, [pc, #352]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c8:	4b53      	ldr	r3, [pc, #332]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4a52      	ldr	r2, [pc, #328]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d4:	4b50      	ldr	r3, [pc, #320]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	494d      	ldr	r1, [pc, #308]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d044      	beq.n	800237c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	4b47      	ldr	r3, [pc, #284]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d119      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e07f      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d003      	beq.n	800231a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002316:	2b03      	cmp	r3, #3
 8002318:	d107      	bne.n	800232a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231a:	4b3f      	ldr	r3, [pc, #252]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e06f      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232a:	4b3b      	ldr	r3, [pc, #236]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e067      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800233a:	4b37      	ldr	r3, [pc, #220]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f023 0203 	bic.w	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4934      	ldr	r1, [pc, #208]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800234c:	f7ff f984 	bl	8001658 <HAL_GetTick>
 8002350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002352:	e00a      	b.n	800236a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002354:	f7ff f980 	bl	8001658 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e04f      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 020c 	and.w	r2, r3, #12
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	429a      	cmp	r2, r3
 800237a:	d1eb      	bne.n	8002354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d20c      	bcs.n	80023a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b22      	ldr	r3, [pc, #136]	; (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	4b20      	ldr	r3, [pc, #128]	; (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e032      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b0:	4b19      	ldr	r3, [pc, #100]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4916      	ldr	r1, [pc, #88]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ce:	4b12      	ldr	r3, [pc, #72]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	490e      	ldr	r1, [pc, #56]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023e2:	f000 f821 	bl	8002428 <HAL_RCC_GetSysClockFreq>
 80023e6:	4602      	mov	r2, r0
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	490a      	ldr	r1, [pc, #40]	; (800241c <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	5ccb      	ldrb	r3, [r1, r3]
 80023f6:	fa22 f303 	lsr.w	r3, r2, r3
 80023fa:	4a09      	ldr	r2, [pc, #36]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff f8e4 	bl	80015d0 <HAL_InitTick>

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023c00 	.word	0x40023c00
 8002418:	40023800 	.word	0x40023800
 800241c:	08005178 	.word	0x08005178
 8002420:	20000028 	.word	0x20000028
 8002424:	2000002c 	.word	0x2000002c

08002428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002428:	b5b0      	push	{r4, r5, r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800242e:	2100      	movs	r1, #0
 8002430:	6079      	str	r1, [r7, #4]
 8002432:	2100      	movs	r1, #0
 8002434:	60f9      	str	r1, [r7, #12]
 8002436:	2100      	movs	r1, #0
 8002438:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800243a:	2100      	movs	r1, #0
 800243c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800243e:	4952      	ldr	r1, [pc, #328]	; (8002588 <HAL_RCC_GetSysClockFreq+0x160>)
 8002440:	6889      	ldr	r1, [r1, #8]
 8002442:	f001 010c 	and.w	r1, r1, #12
 8002446:	2908      	cmp	r1, #8
 8002448:	d00d      	beq.n	8002466 <HAL_RCC_GetSysClockFreq+0x3e>
 800244a:	2908      	cmp	r1, #8
 800244c:	f200 8094 	bhi.w	8002578 <HAL_RCC_GetSysClockFreq+0x150>
 8002450:	2900      	cmp	r1, #0
 8002452:	d002      	beq.n	800245a <HAL_RCC_GetSysClockFreq+0x32>
 8002454:	2904      	cmp	r1, #4
 8002456:	d003      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x38>
 8002458:	e08e      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800245a:	4b4c      	ldr	r3, [pc, #304]	; (800258c <HAL_RCC_GetSysClockFreq+0x164>)
 800245c:	60bb      	str	r3, [r7, #8]
       break;
 800245e:	e08e      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002460:	4b4b      	ldr	r3, [pc, #300]	; (8002590 <HAL_RCC_GetSysClockFreq+0x168>)
 8002462:	60bb      	str	r3, [r7, #8]
      break;
 8002464:	e08b      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002466:	4948      	ldr	r1, [pc, #288]	; (8002588 <HAL_RCC_GetSysClockFreq+0x160>)
 8002468:	6849      	ldr	r1, [r1, #4]
 800246a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800246e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002470:	4945      	ldr	r1, [pc, #276]	; (8002588 <HAL_RCC_GetSysClockFreq+0x160>)
 8002472:	6849      	ldr	r1, [r1, #4]
 8002474:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002478:	2900      	cmp	r1, #0
 800247a:	d024      	beq.n	80024c6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247c:	4942      	ldr	r1, [pc, #264]	; (8002588 <HAL_RCC_GetSysClockFreq+0x160>)
 800247e:	6849      	ldr	r1, [r1, #4]
 8002480:	0989      	lsrs	r1, r1, #6
 8002482:	4608      	mov	r0, r1
 8002484:	f04f 0100 	mov.w	r1, #0
 8002488:	f240 14ff 	movw	r4, #511	; 0x1ff
 800248c:	f04f 0500 	mov.w	r5, #0
 8002490:	ea00 0204 	and.w	r2, r0, r4
 8002494:	ea01 0305 	and.w	r3, r1, r5
 8002498:	493d      	ldr	r1, [pc, #244]	; (8002590 <HAL_RCC_GetSysClockFreq+0x168>)
 800249a:	fb01 f003 	mul.w	r0, r1, r3
 800249e:	2100      	movs	r1, #0
 80024a0:	fb01 f102 	mul.w	r1, r1, r2
 80024a4:	1844      	adds	r4, r0, r1
 80024a6:	493a      	ldr	r1, [pc, #232]	; (8002590 <HAL_RCC_GetSysClockFreq+0x168>)
 80024a8:	fba2 0101 	umull	r0, r1, r2, r1
 80024ac:	1863      	adds	r3, r4, r1
 80024ae:	4619      	mov	r1, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f04f 0300 	mov.w	r3, #0
 80024b8:	f7fd feea 	bl	8000290 <__aeabi_uldivmod>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4613      	mov	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	e04a      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024c6:	4b30      	ldr	r3, [pc, #192]	; (8002588 <HAL_RCC_GetSysClockFreq+0x160>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	099b      	lsrs	r3, r3, #6
 80024cc:	461a      	mov	r2, r3
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024d6:	f04f 0100 	mov.w	r1, #0
 80024da:	ea02 0400 	and.w	r4, r2, r0
 80024de:	ea03 0501 	and.w	r5, r3, r1
 80024e2:	4620      	mov	r0, r4
 80024e4:	4629      	mov	r1, r5
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	014b      	lsls	r3, r1, #5
 80024f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024f4:	0142      	lsls	r2, r0, #5
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	1b00      	subs	r0, r0, r4
 80024fc:	eb61 0105 	sbc.w	r1, r1, r5
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	018b      	lsls	r3, r1, #6
 800250a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800250e:	0182      	lsls	r2, r0, #6
 8002510:	1a12      	subs	r2, r2, r0
 8002512:	eb63 0301 	sbc.w	r3, r3, r1
 8002516:	f04f 0000 	mov.w	r0, #0
 800251a:	f04f 0100 	mov.w	r1, #0
 800251e:	00d9      	lsls	r1, r3, #3
 8002520:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002524:	00d0      	lsls	r0, r2, #3
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	1912      	adds	r2, r2, r4
 800252c:	eb45 0303 	adc.w	r3, r5, r3
 8002530:	f04f 0000 	mov.w	r0, #0
 8002534:	f04f 0100 	mov.w	r1, #0
 8002538:	0299      	lsls	r1, r3, #10
 800253a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800253e:	0290      	lsls	r0, r2, #10
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	461a      	mov	r2, r3
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	f7fd fe9e 	bl	8000290 <__aeabi_uldivmod>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4613      	mov	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800255c:	4b0a      	ldr	r3, [pc, #40]	; (8002588 <HAL_RCC_GetSysClockFreq+0x160>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	0c1b      	lsrs	r3, r3, #16
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	3301      	adds	r3, #1
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	fbb2 f3f3 	udiv	r3, r2, r3
 8002574:	60bb      	str	r3, [r7, #8]
      break;
 8002576:	e002      	b.n	800257e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <HAL_RCC_GetSysClockFreq+0x164>)
 800257a:	60bb      	str	r3, [r7, #8]
      break;
 800257c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800257e:	68bb      	ldr	r3, [r7, #8]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bdb0      	pop	{r4, r5, r7, pc}
 8002588:	40023800 	.word	0x40023800
 800258c:	00f42400 	.word	0x00f42400
 8002590:	017d7840 	.word	0x017d7840

08002594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000028 	.word	0x20000028

080025ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025b0:	f7ff fff0 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	0a9b      	lsrs	r3, r3, #10
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	4903      	ldr	r1, [pc, #12]	; (80025d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40023800 	.word	0x40023800
 80025d0:	08005188 	.word	0x08005188

080025d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025d8:	f7ff ffdc 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	0b5b      	lsrs	r3, r3, #13
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	4903      	ldr	r1, [pc, #12]	; (80025f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ea:	5ccb      	ldrb	r3, [r1, r3]
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40023800 	.word	0x40023800
 80025f8:	08005188 	.word	0x08005188

080025fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e041      	b.n	8002692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fd64 	bl	80010f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	4619      	mov	r1, r3
 800263a:	4610      	mov	r0, r2
 800263c:	f000 fa92 	bl	8002b64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d001      	beq.n	80026b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e044      	b.n	800273e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a1e      	ldr	r2, [pc, #120]	; (800274c <HAL_TIM_Base_Start_IT+0xb0>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d018      	beq.n	8002708 <HAL_TIM_Base_Start_IT+0x6c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026de:	d013      	beq.n	8002708 <HAL_TIM_Base_Start_IT+0x6c>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1a      	ldr	r2, [pc, #104]	; (8002750 <HAL_TIM_Base_Start_IT+0xb4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d00e      	beq.n	8002708 <HAL_TIM_Base_Start_IT+0x6c>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a19      	ldr	r2, [pc, #100]	; (8002754 <HAL_TIM_Base_Start_IT+0xb8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d009      	beq.n	8002708 <HAL_TIM_Base_Start_IT+0x6c>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a17      	ldr	r2, [pc, #92]	; (8002758 <HAL_TIM_Base_Start_IT+0xbc>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d004      	beq.n	8002708 <HAL_TIM_Base_Start_IT+0x6c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a16      	ldr	r2, [pc, #88]	; (800275c <HAL_TIM_Base_Start_IT+0xc0>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d111      	bne.n	800272c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b06      	cmp	r3, #6
 8002718:	d010      	beq.n	800273c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0201 	orr.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800272a:	e007      	b.n	800273c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40010000 	.word	0x40010000
 8002750:	40000400 	.word	0x40000400
 8002754:	40000800 	.word	0x40000800
 8002758:	40000c00 	.word	0x40000c00
 800275c:	40014000 	.word	0x40014000

08002760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b02      	cmp	r3, #2
 8002774:	d122      	bne.n	80027bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b02      	cmp	r3, #2
 8002782:	d11b      	bne.n	80027bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0202 	mvn.w	r2, #2
 800278c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f9bf 	bl	8002b26 <HAL_TIM_IC_CaptureCallback>
 80027a8:	e005      	b.n	80027b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f9b1 	bl	8002b12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f9c2 	bl	8002b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d122      	bne.n	8002810 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d11b      	bne.n	8002810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0204 	mvn.w	r2, #4
 80027e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2202      	movs	r2, #2
 80027e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f995 	bl	8002b26 <HAL_TIM_IC_CaptureCallback>
 80027fc:	e005      	b.n	800280a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f987 	bl	8002b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f998 	bl	8002b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b08      	cmp	r3, #8
 800281c:	d122      	bne.n	8002864 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	2b08      	cmp	r3, #8
 800282a:	d11b      	bne.n	8002864 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0208 	mvn.w	r2, #8
 8002834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2204      	movs	r2, #4
 800283a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f96b 	bl	8002b26 <HAL_TIM_IC_CaptureCallback>
 8002850:	e005      	b.n	800285e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f95d 	bl	8002b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f96e 	bl	8002b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b10      	cmp	r3, #16
 8002870:	d122      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0310 	and.w	r3, r3, #16
 800287c:	2b10      	cmp	r3, #16
 800287e:	d11b      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0210 	mvn.w	r2, #16
 8002888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2208      	movs	r2, #8
 800288e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f941 	bl	8002b26 <HAL_TIM_IC_CaptureCallback>
 80028a4:	e005      	b.n	80028b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f933 	bl	8002b12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f944 	bl	8002b3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d10e      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d107      	bne.n	80028e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0201 	mvn.w	r2, #1
 80028dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f90d 	bl	8002afe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ee:	2b80      	cmp	r3, #128	; 0x80
 80028f0:	d10e      	bne.n	8002910 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fc:	2b80      	cmp	r3, #128	; 0x80
 80028fe:	d107      	bne.n	8002910 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fabc 	bl	8002e88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291a:	2b40      	cmp	r3, #64	; 0x40
 800291c:	d10e      	bne.n	800293c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002928:	2b40      	cmp	r3, #64	; 0x40
 800292a:	d107      	bne.n	800293c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f909 	bl	8002b4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	2b20      	cmp	r3, #32
 8002948:	d10e      	bne.n	8002968 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b20      	cmp	r3, #32
 8002956:	d107      	bne.n	8002968 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0220 	mvn.w	r2, #32
 8002960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fa86 	bl	8002e74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_TIM_ConfigClockSource+0x1c>
 8002988:	2302      	movs	r3, #2
 800298a:	e0b4      	b.n	8002af6 <HAL_TIM_ConfigClockSource+0x186>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80029aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c4:	d03e      	beq.n	8002a44 <HAL_TIM_ConfigClockSource+0xd4>
 80029c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ca:	f200 8087 	bhi.w	8002adc <HAL_TIM_ConfigClockSource+0x16c>
 80029ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d2:	f000 8086 	beq.w	8002ae2 <HAL_TIM_ConfigClockSource+0x172>
 80029d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029da:	d87f      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x16c>
 80029dc:	2b70      	cmp	r3, #112	; 0x70
 80029de:	d01a      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0xa6>
 80029e0:	2b70      	cmp	r3, #112	; 0x70
 80029e2:	d87b      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x16c>
 80029e4:	2b60      	cmp	r3, #96	; 0x60
 80029e6:	d050      	beq.n	8002a8a <HAL_TIM_ConfigClockSource+0x11a>
 80029e8:	2b60      	cmp	r3, #96	; 0x60
 80029ea:	d877      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x16c>
 80029ec:	2b50      	cmp	r3, #80	; 0x50
 80029ee:	d03c      	beq.n	8002a6a <HAL_TIM_ConfigClockSource+0xfa>
 80029f0:	2b50      	cmp	r3, #80	; 0x50
 80029f2:	d873      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x16c>
 80029f4:	2b40      	cmp	r3, #64	; 0x40
 80029f6:	d058      	beq.n	8002aaa <HAL_TIM_ConfigClockSource+0x13a>
 80029f8:	2b40      	cmp	r3, #64	; 0x40
 80029fa:	d86f      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x16c>
 80029fc:	2b30      	cmp	r3, #48	; 0x30
 80029fe:	d064      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x15a>
 8002a00:	2b30      	cmp	r3, #48	; 0x30
 8002a02:	d86b      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x16c>
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	d060      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x15a>
 8002a08:	2b20      	cmp	r3, #32
 8002a0a:	d867      	bhi.n	8002adc <HAL_TIM_ConfigClockSource+0x16c>
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d05c      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x15a>
 8002a10:	2b10      	cmp	r3, #16
 8002a12:	d05a      	beq.n	8002aca <HAL_TIM_ConfigClockSource+0x15a>
 8002a14:	e062      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6899      	ldr	r1, [r3, #8]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	685a      	ldr	r2, [r3, #4]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f000 f997 	bl	8002d58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	609a      	str	r2, [r3, #8]
      break;
 8002a42:	e04f      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6899      	ldr	r1, [r3, #8]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f000 f980 	bl	8002d58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a66:	609a      	str	r2, [r3, #8]
      break;
 8002a68:	e03c      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6818      	ldr	r0, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6859      	ldr	r1, [r3, #4]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	461a      	mov	r2, r3
 8002a78:	f000 f8f4 	bl	8002c64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2150      	movs	r1, #80	; 0x50
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f94d 	bl	8002d22 <TIM_ITRx_SetConfig>
      break;
 8002a88:	e02c      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6818      	ldr	r0, [r3, #0]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6859      	ldr	r1, [r3, #4]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	461a      	mov	r2, r3
 8002a98:	f000 f913 	bl	8002cc2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2160      	movs	r1, #96	; 0x60
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 f93d 	bl	8002d22 <TIM_ITRx_SetConfig>
      break;
 8002aa8:	e01c      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	6859      	ldr	r1, [r3, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f000 f8d4 	bl	8002c64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2140      	movs	r1, #64	; 0x40
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 f92d 	bl	8002d22 <TIM_ITRx_SetConfig>
      break;
 8002ac8:	e00c      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4610      	mov	r0, r2
 8002ad6:	f000 f924 	bl	8002d22 <TIM_ITRx_SetConfig>
      break;
 8002ada:	e003      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae0:	e000      	b.n	8002ae4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ae2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	b083      	sub	sp, #12
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a34      	ldr	r2, [pc, #208]	; (8002c48 <TIM_Base_SetConfig+0xe4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00f      	beq.n	8002b9c <TIM_Base_SetConfig+0x38>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b82:	d00b      	beq.n	8002b9c <TIM_Base_SetConfig+0x38>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a31      	ldr	r2, [pc, #196]	; (8002c4c <TIM_Base_SetConfig+0xe8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d007      	beq.n	8002b9c <TIM_Base_SetConfig+0x38>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a30      	ldr	r2, [pc, #192]	; (8002c50 <TIM_Base_SetConfig+0xec>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d003      	beq.n	8002b9c <TIM_Base_SetConfig+0x38>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a2f      	ldr	r2, [pc, #188]	; (8002c54 <TIM_Base_SetConfig+0xf0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d108      	bne.n	8002bae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a25      	ldr	r2, [pc, #148]	; (8002c48 <TIM_Base_SetConfig+0xe4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d01b      	beq.n	8002bee <TIM_Base_SetConfig+0x8a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bbc:	d017      	beq.n	8002bee <TIM_Base_SetConfig+0x8a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a22      	ldr	r2, [pc, #136]	; (8002c4c <TIM_Base_SetConfig+0xe8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d013      	beq.n	8002bee <TIM_Base_SetConfig+0x8a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a21      	ldr	r2, [pc, #132]	; (8002c50 <TIM_Base_SetConfig+0xec>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d00f      	beq.n	8002bee <TIM_Base_SetConfig+0x8a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a20      	ldr	r2, [pc, #128]	; (8002c54 <TIM_Base_SetConfig+0xf0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00b      	beq.n	8002bee <TIM_Base_SetConfig+0x8a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a1f      	ldr	r2, [pc, #124]	; (8002c58 <TIM_Base_SetConfig+0xf4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d007      	beq.n	8002bee <TIM_Base_SetConfig+0x8a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a1e      	ldr	r2, [pc, #120]	; (8002c5c <TIM_Base_SetConfig+0xf8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d003      	beq.n	8002bee <TIM_Base_SetConfig+0x8a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <TIM_Base_SetConfig+0xfc>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d108      	bne.n	8002c00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68fa      	ldr	r2, [r7, #12]
 8002c12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <TIM_Base_SetConfig+0xe4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d103      	bne.n	8002c34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	615a      	str	r2, [r3, #20]
}
 8002c3a:	bf00      	nop
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40010000 	.word	0x40010000
 8002c4c:	40000400 	.word	0x40000400
 8002c50:	40000800 	.word	0x40000800
 8002c54:	40000c00 	.word	0x40000c00
 8002c58:	40014000 	.word	0x40014000
 8002c5c:	40014400 	.word	0x40014400
 8002c60:	40014800 	.word	0x40014800

08002c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	f023 0201 	bic.w	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	011b      	lsls	r3, r3, #4
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f023 030a 	bic.w	r3, r3, #10
 8002ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	621a      	str	r2, [r3, #32]
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b087      	sub	sp, #28
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	f023 0210 	bic.w	r2, r3, #16
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	031b      	lsls	r3, r3, #12
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002cfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	621a      	str	r2, [r3, #32]
}
 8002d16:	bf00      	nop
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b085      	sub	sp, #20
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
 8002d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f043 0307 	orr.w	r3, r3, #7
 8002d44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68fa      	ldr	r2, [r7, #12]
 8002d4a:	609a      	str	r2, [r3, #8]
}
 8002d4c:	bf00      	nop
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b087      	sub	sp, #28
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	021a      	lsls	r2, r3, #8
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	609a      	str	r2, [r3, #8]
}
 8002d8c:	bf00      	nop
 8002d8e:	371c      	adds	r7, #28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e050      	b.n	8002e52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a1c      	ldr	r2, [pc, #112]	; (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d018      	beq.n	8002e26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfc:	d013      	beq.n	8002e26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a18      	ldr	r2, [pc, #96]	; (8002e64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00e      	beq.n	8002e26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a16      	ldr	r2, [pc, #88]	; (8002e68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d009      	beq.n	8002e26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a15      	ldr	r2, [pc, #84]	; (8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d004      	beq.n	8002e26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a13      	ldr	r2, [pc, #76]	; (8002e70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d10c      	bne.n	8002e40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40010000 	.word	0x40010000
 8002e64:	40000400 	.word	0x40000400
 8002e68:	40000800 	.word	0x40000800
 8002e6c:	40000c00 	.word	0x40000c00
 8002e70:	40014000 	.word	0x40014000

08002e74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e03f      	b.n	8002f2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d106      	bne.n	8002ec8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fe f93a 	bl	800113c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2224      	movs	r2, #36	; 0x24
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ede:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 fe1d 	bl	8003b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ef4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68da      	ldr	r2, [r3, #12]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b08a      	sub	sp, #40	; 0x28
 8002f3a:	af02      	add	r7, sp, #8
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	603b      	str	r3, [r7, #0]
 8002f42:	4613      	mov	r3, r2
 8002f44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b20      	cmp	r3, #32
 8002f54:	d17c      	bne.n	8003050 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <HAL_UART_Transmit+0x2c>
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d101      	bne.n	8002f66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e075      	b.n	8003052 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_UART_Transmit+0x3e>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e06e      	b.n	8003052 <HAL_UART_Transmit+0x11c>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2221      	movs	r2, #33	; 0x21
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f8a:	f7fe fb65 	bl	8001658 <HAL_GetTick>
 8002f8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	88fa      	ldrh	r2, [r7, #6]
 8002f94:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	88fa      	ldrh	r2, [r7, #6]
 8002f9a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa4:	d108      	bne.n	8002fb8 <HAL_UART_Transmit+0x82>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d104      	bne.n	8002fb8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	61bb      	str	r3, [r7, #24]
 8002fb6:	e003      	b.n	8002fc0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fc8:	e02a      	b.n	8003020 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2180      	movs	r1, #128	; 0x80
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 fb9b 	bl	8003710 <UART_WaitOnFlagUntilTimeout>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e036      	b.n	8003052 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10b      	bne.n	8003002 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	881b      	ldrh	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ff8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	3302      	adds	r3, #2
 8002ffe:	61bb      	str	r3, [r7, #24]
 8003000:	e007      	b.n	8003012 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	781a      	ldrb	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	3301      	adds	r3, #1
 8003010:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003024:	b29b      	uxth	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1cf      	bne.n	8002fca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2200      	movs	r2, #0
 8003032:	2140      	movs	r1, #64	; 0x40
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fb6b 	bl	8003710 <UART_WaitOnFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e006      	b.n	8003052 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	e000      	b.n	8003052 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003050:	2302      	movs	r3, #2
  }
}
 8003052:	4618      	mov	r0, r3
 8003054:	3720      	adds	r7, #32
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b08a      	sub	sp, #40	; 0x28
 800305e:	af02      	add	r7, sp, #8
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	603b      	str	r3, [r7, #0]
 8003066:	4613      	mov	r3, r2
 8003068:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b20      	cmp	r3, #32
 8003078:	f040 808c 	bne.w	8003194 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_UART_Receive+0x2e>
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e084      	b.n	8003196 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_UART_Receive+0x40>
 8003096:	2302      	movs	r3, #2
 8003098:	e07d      	b.n	8003196 <HAL_UART_Receive+0x13c>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2222      	movs	r2, #34	; 0x22
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030b6:	f7fe facf 	bl	8001658 <HAL_GetTick>
 80030ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	88fa      	ldrh	r2, [r7, #6]
 80030c0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	88fa      	ldrh	r2, [r7, #6]
 80030c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d0:	d108      	bne.n	80030e4 <HAL_UART_Receive+0x8a>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d104      	bne.n	80030e4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	61bb      	str	r3, [r7, #24]
 80030e2:	e003      	b.n	80030ec <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030e8:	2300      	movs	r3, #0
 80030ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80030f4:	e043      	b.n	800317e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2200      	movs	r2, #0
 80030fe:	2120      	movs	r1, #32
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fb05 	bl	8003710 <UART_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e042      	b.n	8003196 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10c      	bne.n	8003130 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	b29b      	uxth	r3, r3
 800311e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003122:	b29a      	uxth	r2, r3
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	3302      	adds	r3, #2
 800312c:	61bb      	str	r3, [r7, #24]
 800312e:	e01f      	b.n	8003170 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003138:	d007      	beq.n	800314a <HAL_UART_Receive+0xf0>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <HAL_UART_Receive+0xfe>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d106      	bne.n	8003158 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	b2da      	uxtb	r2, r3
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	701a      	strb	r2, [r3, #0]
 8003156:	e008      	b.n	800316a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003164:	b2da      	uxtb	r2, r3
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3301      	adds	r3, #1
 800316e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003182:	b29b      	uxth	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1b6      	bne.n	80030f6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003190:	2300      	movs	r3, #0
 8003192:	e000      	b.n	8003196 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003194:	2302      	movs	r3, #2
  }
}
 8003196:	4618      	mov	r0, r3
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b0ba      	sub	sp, #232	; 0xe8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80031de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10f      	bne.n	8003206 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d009      	beq.n	8003206 <HAL_UART_IRQHandler+0x66>
 80031f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fbd3 	bl	80039aa <UART_Receive_IT>
      return;
 8003204:	e256      	b.n	80036b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003206:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 80de 	beq.w	80033cc <HAL_UART_IRQHandler+0x22c>
 8003210:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d106      	bne.n	800322a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800321c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003220:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80d1 	beq.w	80033cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800322a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00b      	beq.n	800324e <HAL_UART_IRQHandler+0xae>
 8003236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800323a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f043 0201 	orr.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800324e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00b      	beq.n	8003272 <HAL_UART_IRQHandler+0xd2>
 800325a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d005      	beq.n	8003272 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f043 0202 	orr.w	r2, r3, #2
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <HAL_UART_IRQHandler+0xf6>
 800327e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	f043 0204 	orr.w	r2, r3, #4
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d011      	beq.n	80032c6 <HAL_UART_IRQHandler+0x126>
 80032a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d105      	bne.n	80032ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f043 0208 	orr.w	r2, r3, #8
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 81ed 	beq.w	80036aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d4:	f003 0320 	and.w	r3, r3, #32
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d008      	beq.n	80032ee <HAL_UART_IRQHandler+0x14e>
 80032dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f000 fb5e 	bl	80039aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f8:	2b40      	cmp	r3, #64	; 0x40
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d103      	bne.n	800331a <HAL_UART_IRQHandler+0x17a>
 8003312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003316:	2b00      	cmp	r3, #0
 8003318:	d04f      	beq.n	80033ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 fa66 	bl	80037ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b40      	cmp	r3, #64	; 0x40
 800332c:	d141      	bne.n	80033b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3314      	adds	r3, #20
 8003334:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003338:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800333c:	e853 3f00 	ldrex	r3, [r3]
 8003340:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003344:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800334c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3314      	adds	r3, #20
 8003356:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800335a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800335e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003362:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003366:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800336a:	e841 2300 	strex	r3, r2, [r1]
 800336e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1d9      	bne.n	800332e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	2b00      	cmp	r3, #0
 8003380:	d013      	beq.n	80033aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	4a7d      	ldr	r2, [pc, #500]	; (800357c <HAL_UART_IRQHandler+0x3dc>)
 8003388:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338e:	4618      	mov	r0, r3
 8003390:	f7fe fb13 	bl	80019ba <HAL_DMA_Abort_IT>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d016      	beq.n	80033c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033a4:	4610      	mov	r0, r2
 80033a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a8:	e00e      	b.n	80033c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f99a 	bl	80036e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	e00a      	b.n	80033c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f996 	bl	80036e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b8:	e006      	b.n	80033c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f992 	bl	80036e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80033c6:	e170      	b.n	80036aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	bf00      	nop
    return;
 80033ca:	e16e      	b.n	80036aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	f040 814a 	bne.w	800366a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b00      	cmp	r3, #0
 80033e0:	f000 8143 	beq.w	800366a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e8:	f003 0310 	and.w	r3, r3, #16
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 813c 	beq.w	800366a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	60bb      	str	r3, [r7, #8]
 8003406:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003412:	2b40      	cmp	r3, #64	; 0x40
 8003414:	f040 80b4 	bne.w	8003580 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003424:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 8140 	beq.w	80036ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003432:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003436:	429a      	cmp	r2, r3
 8003438:	f080 8139 	bcs.w	80036ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003442:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344e:	f000 8088 	beq.w	8003562 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	330c      	adds	r3, #12
 8003458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003460:	e853 3f00 	ldrex	r3, [r3]
 8003464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003468:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800346c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003470:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	330c      	adds	r3, #12
 800347a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800347e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800348a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1d9      	bne.n	8003452 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3314      	adds	r3, #20
 80034a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80034ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034b0:	f023 0301 	bic.w	r3, r3, #1
 80034b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3314      	adds	r3, #20
 80034be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80034c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80034c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80034ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80034ce:	e841 2300 	strex	r3, r2, [r1]
 80034d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80034d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1e1      	bne.n	800349e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3314      	adds	r3, #20
 80034e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034e4:	e853 3f00 	ldrex	r3, [r3]
 80034e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80034ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3314      	adds	r3, #20
 80034fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80034fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003500:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003504:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800350c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e3      	bne.n	80034da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	330c      	adds	r3, #12
 8003526:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800352a:	e853 3f00 	ldrex	r3, [r3]
 800352e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003532:	f023 0310 	bic.w	r3, r3, #16
 8003536:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	330c      	adds	r3, #12
 8003540:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003544:	65ba      	str	r2, [r7, #88]	; 0x58
 8003546:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003548:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800354a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800354c:	e841 2300 	strex	r3, r2, [r1]
 8003550:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1e3      	bne.n	8003520 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355c:	4618      	mov	r0, r3
 800355e:	f7fe f9bc 	bl	80018da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800356a:	b29b      	uxth	r3, r3
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	b29b      	uxth	r3, r3
 8003570:	4619      	mov	r1, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f8c0 	bl	80036f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003578:	e099      	b.n	80036ae <HAL_UART_IRQHandler+0x50e>
 800357a:	bf00      	nop
 800357c:	080038b3 	.word	0x080038b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003588:	b29b      	uxth	r3, r3
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003594:	b29b      	uxth	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 808b 	beq.w	80036b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800359c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8086 	beq.w	80036b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	330c      	adds	r3, #12
 80035ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b0:	e853 3f00 	ldrex	r3, [r3]
 80035b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	330c      	adds	r3, #12
 80035c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80035ca:	647a      	str	r2, [r7, #68]	; 0x44
 80035cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035d2:	e841 2300 	strex	r3, r2, [r1]
 80035d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1e3      	bne.n	80035a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3314      	adds	r3, #20
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	623b      	str	r3, [r7, #32]
   return(result);
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	3314      	adds	r3, #20
 80035fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003602:	633a      	str	r2, [r7, #48]	; 0x30
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800360a:	e841 2300 	strex	r3, r2, [r1]
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1e3      	bne.n	80035de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2220      	movs	r2, #32
 800361a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	60fb      	str	r3, [r7, #12]
   return(result);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0310 	bic.w	r3, r3, #16
 800363a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	330c      	adds	r3, #12
 8003644:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003648:	61fa      	str	r2, [r7, #28]
 800364a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364c:	69b9      	ldr	r1, [r7, #24]
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	e841 2300 	strex	r3, r2, [r1]
 8003654:	617b      	str	r3, [r7, #20]
   return(result);
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e3      	bne.n	8003624 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800365c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003660:	4619      	mov	r1, r3
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f848 	bl	80036f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003668:	e023      	b.n	80036b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800366a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800366e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_UART_IRQHandler+0x4ea>
 8003676:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800367a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f929 	bl	80038da <UART_Transmit_IT>
    return;
 8003688:	e014      	b.n	80036b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800368a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00e      	beq.n	80036b4 <HAL_UART_IRQHandler+0x514>
 8003696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800369a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f969 	bl	800397a <UART_EndTransmit_IT>
    return;
 80036a8:	e004      	b.n	80036b4 <HAL_UART_IRQHandler+0x514>
    return;
 80036aa:	bf00      	nop
 80036ac:	e002      	b.n	80036b4 <HAL_UART_IRQHandler+0x514>
      return;
 80036ae:	bf00      	nop
 80036b0:	e000      	b.n	80036b4 <HAL_UART_IRQHandler+0x514>
      return;
 80036b2:	bf00      	nop
  }
}
 80036b4:	37e8      	adds	r7, #232	; 0xe8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop

080036bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b090      	sub	sp, #64	; 0x40
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003720:	e050      	b.n	80037c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d04c      	beq.n	80037c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800372a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800372c:	2b00      	cmp	r3, #0
 800372e:	d007      	beq.n	8003740 <UART_WaitOnFlagUntilTimeout+0x30>
 8003730:	f7fd ff92 	bl	8001658 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800373c:	429a      	cmp	r2, r3
 800373e:	d241      	bcs.n	80037c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	330c      	adds	r3, #12
 8003746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374a:	e853 3f00 	ldrex	r3, [r3]
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003752:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003760:	637a      	str	r2, [r7, #52]	; 0x34
 8003762:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800376e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e5      	bne.n	8003740 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3314      	adds	r3, #20
 800377a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	613b      	str	r3, [r7, #16]
   return(result);
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	63bb      	str	r3, [r7, #56]	; 0x38
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3314      	adds	r3, #20
 8003792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003794:	623a      	str	r2, [r7, #32]
 8003796:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	69f9      	ldr	r1, [r7, #28]
 800379a:	6a3a      	ldr	r2, [r7, #32]
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e5      	bne.n	8003774 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e00f      	b.n	80037e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4013      	ands	r3, r2
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d09f      	beq.n	8003722 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3740      	adds	r7, #64	; 0x40
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b095      	sub	sp, #84	; 0x54
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	330c      	adds	r3, #12
 80037fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fe:	e853 3f00 	ldrex	r3, [r3]
 8003802:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003806:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800380a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	330c      	adds	r3, #12
 8003812:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003814:	643a      	str	r2, [r7, #64]	; 0x40
 8003816:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003818:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800381a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800381c:	e841 2300 	strex	r3, r2, [r1]
 8003820:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1e5      	bne.n	80037f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	3314      	adds	r3, #20
 800382e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	e853 3f00 	ldrex	r3, [r3]
 8003836:	61fb      	str	r3, [r7, #28]
   return(result);
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f023 0301 	bic.w	r3, r3, #1
 800383e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3314      	adds	r3, #20
 8003846:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003848:	62fa      	str	r2, [r7, #44]	; 0x2c
 800384a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800384e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003850:	e841 2300 	strex	r3, r2, [r1]
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1e5      	bne.n	8003828 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	2b01      	cmp	r3, #1
 8003862:	d119      	bne.n	8003898 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	330c      	adds	r3, #12
 800386a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	60bb      	str	r3, [r7, #8]
   return(result);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f023 0310 	bic.w	r3, r3, #16
 800387a:	647b      	str	r3, [r7, #68]	; 0x44
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	330c      	adds	r3, #12
 8003882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003884:	61ba      	str	r2, [r7, #24]
 8003886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	6979      	ldr	r1, [r7, #20]
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	e841 2300 	strex	r3, r2, [r1]
 8003890:	613b      	str	r3, [r7, #16]
   return(result);
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e5      	bne.n	8003864 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2220      	movs	r2, #32
 800389c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80038a6:	bf00      	nop
 80038a8:	3754      	adds	r7, #84	; 0x54
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff ff09 	bl	80036e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038d2:	bf00      	nop
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038da:	b480      	push	{r7}
 80038dc:	b085      	sub	sp, #20
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b21      	cmp	r3, #33	; 0x21
 80038ec:	d13e      	bne.n	800396c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f6:	d114      	bne.n	8003922 <UART_Transmit_IT+0x48>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d110      	bne.n	8003922 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003914:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	1c9a      	adds	r2, r3, #2
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	621a      	str	r2, [r3, #32]
 8003920:	e008      	b.n	8003934 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	1c59      	adds	r1, r3, #1
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6211      	str	r1, [r2, #32]
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003938:	b29b      	uxth	r3, r3
 800393a:	3b01      	subs	r3, #1
 800393c:	b29b      	uxth	r3, r3
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	4619      	mov	r1, r3
 8003942:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10f      	bne.n	8003968 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003956:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003966:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	e000      	b.n	800396e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800396c:	2302      	movs	r3, #2
  }
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003990:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff fe8e 	bl	80036bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b08c      	sub	sp, #48	; 0x30
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b22      	cmp	r3, #34	; 0x22
 80039bc:	f040 80ab 	bne.w	8003b16 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039c8:	d117      	bne.n	80039fa <UART_Receive_IT+0x50>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d113      	bne.n	80039fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	1c9a      	adds	r2, r3, #2
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28
 80039f8:	e026      	b.n	8003a48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a0c:	d007      	beq.n	8003a1e <UART_Receive_IT+0x74>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <UART_Receive_IT+0x82>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a28:	701a      	strb	r2, [r3, #0]
 8003a2a:	e008      	b.n	8003a3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	4619      	mov	r1, r3
 8003a56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d15a      	bne.n	8003b12 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68da      	ldr	r2, [r3, #12]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0220 	bic.w	r2, r2, #32
 8003a6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695a      	ldr	r2, [r3, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0201 	bic.w	r2, r2, #1
 8003a8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d135      	bne.n	8003b08 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f023 0310 	bic.w	r3, r3, #16
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	330c      	adds	r3, #12
 8003ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac2:	623a      	str	r2, [r7, #32]
 8003ac4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac6:	69f9      	ldr	r1, [r7, #28]
 8003ac8:	6a3a      	ldr	r2, [r7, #32]
 8003aca:	e841 2300 	strex	r3, r2, [r1]
 8003ace:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1e5      	bne.n	8003aa2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d10a      	bne.n	8003afa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003afe:	4619      	mov	r1, r3
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff fdf9 	bl	80036f8 <HAL_UARTEx_RxEventCallback>
 8003b06:	e002      	b.n	8003b0e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f7ff fde1 	bl	80036d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	e002      	b.n	8003b18 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	e000      	b.n	8003b18 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003b16:	2302      	movs	r3, #2
  }
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3730      	adds	r7, #48	; 0x30
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b24:	b09f      	sub	sp, #124	; 0x7c
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b36:	68d9      	ldr	r1, [r3, #12]
 8003b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	ea40 0301 	orr.w	r3, r0, r1
 8003b40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	431a      	orrs	r2, r3
 8003b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b64:	f021 010c 	bic.w	r1, r1, #12
 8003b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b7e:	6999      	ldr	r1, [r3, #24]
 8003b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	ea40 0301 	orr.w	r3, r0, r1
 8003b88:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	4bc5      	ldr	r3, [pc, #788]	; (8003ea4 <UART_SetConfig+0x384>)
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d004      	beq.n	8003b9e <UART_SetConfig+0x7e>
 8003b94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	4bc3      	ldr	r3, [pc, #780]	; (8003ea8 <UART_SetConfig+0x388>)
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d103      	bne.n	8003ba6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b9e:	f7fe fd19 	bl	80025d4 <HAL_RCC_GetPCLK2Freq>
 8003ba2:	6778      	str	r0, [r7, #116]	; 0x74
 8003ba4:	e002      	b.n	8003bac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ba6:	f7fe fd01 	bl	80025ac <HAL_RCC_GetPCLK1Freq>
 8003baa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb4:	f040 80b6 	bne.w	8003d24 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bba:	461c      	mov	r4, r3
 8003bbc:	f04f 0500 	mov.w	r5, #0
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	462b      	mov	r3, r5
 8003bc4:	1891      	adds	r1, r2, r2
 8003bc6:	6439      	str	r1, [r7, #64]	; 0x40
 8003bc8:	415b      	adcs	r3, r3
 8003bca:	647b      	str	r3, [r7, #68]	; 0x44
 8003bcc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bd0:	1912      	adds	r2, r2, r4
 8003bd2:	eb45 0303 	adc.w	r3, r5, r3
 8003bd6:	f04f 0000 	mov.w	r0, #0
 8003bda:	f04f 0100 	mov.w	r1, #0
 8003bde:	00d9      	lsls	r1, r3, #3
 8003be0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003be4:	00d0      	lsls	r0, r2, #3
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	1911      	adds	r1, r2, r4
 8003bec:	6639      	str	r1, [r7, #96]	; 0x60
 8003bee:	416b      	adcs	r3, r5
 8003bf0:	667b      	str	r3, [r7, #100]	; 0x64
 8003bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	1891      	adds	r1, r2, r2
 8003bfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c00:	415b      	adcs	r3, r3
 8003c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c08:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003c0c:	f7fc fb40 	bl	8000290 <__aeabi_uldivmod>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4ba5      	ldr	r3, [pc, #660]	; (8003eac <UART_SetConfig+0x38c>)
 8003c16:	fba3 2302 	umull	r2, r3, r3, r2
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	011e      	lsls	r6, r3, #4
 8003c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c20:	461c      	mov	r4, r3
 8003c22:	f04f 0500 	mov.w	r5, #0
 8003c26:	4622      	mov	r2, r4
 8003c28:	462b      	mov	r3, r5
 8003c2a:	1891      	adds	r1, r2, r2
 8003c2c:	6339      	str	r1, [r7, #48]	; 0x30
 8003c2e:	415b      	adcs	r3, r3
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
 8003c32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c36:	1912      	adds	r2, r2, r4
 8003c38:	eb45 0303 	adc.w	r3, r5, r3
 8003c3c:	f04f 0000 	mov.w	r0, #0
 8003c40:	f04f 0100 	mov.w	r1, #0
 8003c44:	00d9      	lsls	r1, r3, #3
 8003c46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c4a:	00d0      	lsls	r0, r2, #3
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	1911      	adds	r1, r2, r4
 8003c52:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c54:	416b      	adcs	r3, r5
 8003c56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	1891      	adds	r1, r2, r2
 8003c64:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c66:	415b      	adcs	r3, r3
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c6e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003c72:	f7fc fb0d 	bl	8000290 <__aeabi_uldivmod>
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	4b8c      	ldr	r3, [pc, #560]	; (8003eac <UART_SetConfig+0x38c>)
 8003c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	2164      	movs	r1, #100	; 0x64
 8003c84:	fb01 f303 	mul.w	r3, r1, r3
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	3332      	adds	r3, #50	; 0x32
 8003c8e:	4a87      	ldr	r2, [pc, #540]	; (8003eac <UART_SetConfig+0x38c>)
 8003c90:	fba2 2303 	umull	r2, r3, r2, r3
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c9c:	441e      	add	r6, r3
 8003c9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f04f 0100 	mov.w	r1, #0
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	1894      	adds	r4, r2, r2
 8003cac:	623c      	str	r4, [r7, #32]
 8003cae:	415b      	adcs	r3, r3
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003cb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cb6:	1812      	adds	r2, r2, r0
 8003cb8:	eb41 0303 	adc.w	r3, r1, r3
 8003cbc:	f04f 0400 	mov.w	r4, #0
 8003cc0:	f04f 0500 	mov.w	r5, #0
 8003cc4:	00dd      	lsls	r5, r3, #3
 8003cc6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cca:	00d4      	lsls	r4, r2, #3
 8003ccc:	4622      	mov	r2, r4
 8003cce:	462b      	mov	r3, r5
 8003cd0:	1814      	adds	r4, r2, r0
 8003cd2:	653c      	str	r4, [r7, #80]	; 0x50
 8003cd4:	414b      	adcs	r3, r1
 8003cd6:	657b      	str	r3, [r7, #84]	; 0x54
 8003cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	1891      	adds	r1, r2, r2
 8003ce4:	61b9      	str	r1, [r7, #24]
 8003ce6:	415b      	adcs	r3, r3
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003cf2:	f7fc facd 	bl	8000290 <__aeabi_uldivmod>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	4b6c      	ldr	r3, [pc, #432]	; (8003eac <UART_SetConfig+0x38c>)
 8003cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8003d00:	095b      	lsrs	r3, r3, #5
 8003d02:	2164      	movs	r1, #100	; 0x64
 8003d04:	fb01 f303 	mul.w	r3, r1, r3
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	3332      	adds	r3, #50	; 0x32
 8003d0e:	4a67      	ldr	r2, [pc, #412]	; (8003eac <UART_SetConfig+0x38c>)
 8003d10:	fba2 2303 	umull	r2, r3, r2, r3
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	f003 0207 	and.w	r2, r3, #7
 8003d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4432      	add	r2, r6
 8003d20:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d22:	e0b9      	b.n	8003e98 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d26:	461c      	mov	r4, r3
 8003d28:	f04f 0500 	mov.w	r5, #0
 8003d2c:	4622      	mov	r2, r4
 8003d2e:	462b      	mov	r3, r5
 8003d30:	1891      	adds	r1, r2, r2
 8003d32:	6139      	str	r1, [r7, #16]
 8003d34:	415b      	adcs	r3, r3
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d3c:	1912      	adds	r2, r2, r4
 8003d3e:	eb45 0303 	adc.w	r3, r5, r3
 8003d42:	f04f 0000 	mov.w	r0, #0
 8003d46:	f04f 0100 	mov.w	r1, #0
 8003d4a:	00d9      	lsls	r1, r3, #3
 8003d4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d50:	00d0      	lsls	r0, r2, #3
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	eb12 0804 	adds.w	r8, r2, r4
 8003d5a:	eb43 0905 	adc.w	r9, r3, r5
 8003d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f04f 0100 	mov.w	r1, #0
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	008b      	lsls	r3, r1, #2
 8003d72:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d76:	0082      	lsls	r2, r0, #2
 8003d78:	4640      	mov	r0, r8
 8003d7a:	4649      	mov	r1, r9
 8003d7c:	f7fc fa88 	bl	8000290 <__aeabi_uldivmod>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4b49      	ldr	r3, [pc, #292]	; (8003eac <UART_SetConfig+0x38c>)
 8003d86:	fba3 2302 	umull	r2, r3, r3, r2
 8003d8a:	095b      	lsrs	r3, r3, #5
 8003d8c:	011e      	lsls	r6, r3, #4
 8003d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d90:	4618      	mov	r0, r3
 8003d92:	f04f 0100 	mov.w	r1, #0
 8003d96:	4602      	mov	r2, r0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	1894      	adds	r4, r2, r2
 8003d9c:	60bc      	str	r4, [r7, #8]
 8003d9e:	415b      	adcs	r3, r3
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003da6:	1812      	adds	r2, r2, r0
 8003da8:	eb41 0303 	adc.w	r3, r1, r3
 8003dac:	f04f 0400 	mov.w	r4, #0
 8003db0:	f04f 0500 	mov.w	r5, #0
 8003db4:	00dd      	lsls	r5, r3, #3
 8003db6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003dba:	00d4      	lsls	r4, r2, #3
 8003dbc:	4622      	mov	r2, r4
 8003dbe:	462b      	mov	r3, r5
 8003dc0:	1814      	adds	r4, r2, r0
 8003dc2:	64bc      	str	r4, [r7, #72]	; 0x48
 8003dc4:	414b      	adcs	r3, r1
 8003dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f04f 0100 	mov.w	r1, #0
 8003dd2:	f04f 0200 	mov.w	r2, #0
 8003dd6:	f04f 0300 	mov.w	r3, #0
 8003dda:	008b      	lsls	r3, r1, #2
 8003ddc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003de0:	0082      	lsls	r2, r0, #2
 8003de2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003de6:	f7fc fa53 	bl	8000290 <__aeabi_uldivmod>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4b2f      	ldr	r3, [pc, #188]	; (8003eac <UART_SetConfig+0x38c>)
 8003df0:	fba3 1302 	umull	r1, r3, r3, r2
 8003df4:	095b      	lsrs	r3, r3, #5
 8003df6:	2164      	movs	r1, #100	; 0x64
 8003df8:	fb01 f303 	mul.w	r3, r1, r3
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	3332      	adds	r3, #50	; 0x32
 8003e02:	4a2a      	ldr	r2, [pc, #168]	; (8003eac <UART_SetConfig+0x38c>)
 8003e04:	fba2 2303 	umull	r2, r3, r2, r3
 8003e08:	095b      	lsrs	r3, r3, #5
 8003e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e0e:	441e      	add	r6, r3
 8003e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e12:	4618      	mov	r0, r3
 8003e14:	f04f 0100 	mov.w	r1, #0
 8003e18:	4602      	mov	r2, r0
 8003e1a:	460b      	mov	r3, r1
 8003e1c:	1894      	adds	r4, r2, r2
 8003e1e:	603c      	str	r4, [r7, #0]
 8003e20:	415b      	adcs	r3, r3
 8003e22:	607b      	str	r3, [r7, #4]
 8003e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e28:	1812      	adds	r2, r2, r0
 8003e2a:	eb41 0303 	adc.w	r3, r1, r3
 8003e2e:	f04f 0400 	mov.w	r4, #0
 8003e32:	f04f 0500 	mov.w	r5, #0
 8003e36:	00dd      	lsls	r5, r3, #3
 8003e38:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e3c:	00d4      	lsls	r4, r2, #3
 8003e3e:	4622      	mov	r2, r4
 8003e40:	462b      	mov	r3, r5
 8003e42:	eb12 0a00 	adds.w	sl, r2, r0
 8003e46:	eb43 0b01 	adc.w	fp, r3, r1
 8003e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f04f 0100 	mov.w	r1, #0
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	f04f 0300 	mov.w	r3, #0
 8003e5c:	008b      	lsls	r3, r1, #2
 8003e5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e62:	0082      	lsls	r2, r0, #2
 8003e64:	4650      	mov	r0, sl
 8003e66:	4659      	mov	r1, fp
 8003e68:	f7fc fa12 	bl	8000290 <__aeabi_uldivmod>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4b0e      	ldr	r3, [pc, #56]	; (8003eac <UART_SetConfig+0x38c>)
 8003e72:	fba3 1302 	umull	r1, r3, r3, r2
 8003e76:	095b      	lsrs	r3, r3, #5
 8003e78:	2164      	movs	r1, #100	; 0x64
 8003e7a:	fb01 f303 	mul.w	r3, r1, r3
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	3332      	adds	r3, #50	; 0x32
 8003e84:	4a09      	ldr	r2, [pc, #36]	; (8003eac <UART_SetConfig+0x38c>)
 8003e86:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	f003 020f 	and.w	r2, r3, #15
 8003e90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4432      	add	r2, r6
 8003e96:	609a      	str	r2, [r3, #8]
}
 8003e98:	bf00      	nop
 8003e9a:	377c      	adds	r7, #124	; 0x7c
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40011000 	.word	0x40011000
 8003ea8:	40011400 	.word	0x40011400
 8003eac:	51eb851f 	.word	0x51eb851f

08003eb0 <atoi>:
 8003eb0:	220a      	movs	r2, #10
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	f000 b912 	b.w	80040dc <strtol>

08003eb8 <__errno>:
 8003eb8:	4b01      	ldr	r3, [pc, #4]	; (8003ec0 <__errno+0x8>)
 8003eba:	6818      	ldr	r0, [r3, #0]
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000034 	.word	0x20000034

08003ec4 <__libc_init_array>:
 8003ec4:	b570      	push	{r4, r5, r6, lr}
 8003ec6:	4d0d      	ldr	r5, [pc, #52]	; (8003efc <__libc_init_array+0x38>)
 8003ec8:	4c0d      	ldr	r4, [pc, #52]	; (8003f00 <__libc_init_array+0x3c>)
 8003eca:	1b64      	subs	r4, r4, r5
 8003ecc:	10a4      	asrs	r4, r4, #2
 8003ece:	2600      	movs	r6, #0
 8003ed0:	42a6      	cmp	r6, r4
 8003ed2:	d109      	bne.n	8003ee8 <__libc_init_array+0x24>
 8003ed4:	4d0b      	ldr	r5, [pc, #44]	; (8003f04 <__libc_init_array+0x40>)
 8003ed6:	4c0c      	ldr	r4, [pc, #48]	; (8003f08 <__libc_init_array+0x44>)
 8003ed8:	f001 f8cc 	bl	8005074 <_init>
 8003edc:	1b64      	subs	r4, r4, r5
 8003ede:	10a4      	asrs	r4, r4, #2
 8003ee0:	2600      	movs	r6, #0
 8003ee2:	42a6      	cmp	r6, r4
 8003ee4:	d105      	bne.n	8003ef2 <__libc_init_array+0x2e>
 8003ee6:	bd70      	pop	{r4, r5, r6, pc}
 8003ee8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eec:	4798      	blx	r3
 8003eee:	3601      	adds	r6, #1
 8003ef0:	e7ee      	b.n	8003ed0 <__libc_init_array+0xc>
 8003ef2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ef6:	4798      	blx	r3
 8003ef8:	3601      	adds	r6, #1
 8003efa:	e7f2      	b.n	8003ee2 <__libc_init_array+0x1e>
 8003efc:	080053e4 	.word	0x080053e4
 8003f00:	080053e4 	.word	0x080053e4
 8003f04:	080053e4 	.word	0x080053e4
 8003f08:	080053e8 	.word	0x080053e8

08003f0c <memset>:
 8003f0c:	4402      	add	r2, r0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d100      	bne.n	8003f16 <memset+0xa>
 8003f14:	4770      	bx	lr
 8003f16:	f803 1b01 	strb.w	r1, [r3], #1
 8003f1a:	e7f9      	b.n	8003f10 <memset+0x4>

08003f1c <strtok>:
 8003f1c:	4b16      	ldr	r3, [pc, #88]	; (8003f78 <strtok+0x5c>)
 8003f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f20:	681e      	ldr	r6, [r3, #0]
 8003f22:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003f24:	4605      	mov	r5, r0
 8003f26:	b9fc      	cbnz	r4, 8003f68 <strtok+0x4c>
 8003f28:	2050      	movs	r0, #80	; 0x50
 8003f2a:	9101      	str	r1, [sp, #4]
 8003f2c:	f000 f910 	bl	8004150 <malloc>
 8003f30:	9901      	ldr	r1, [sp, #4]
 8003f32:	65b0      	str	r0, [r6, #88]	; 0x58
 8003f34:	4602      	mov	r2, r0
 8003f36:	b920      	cbnz	r0, 8003f42 <strtok+0x26>
 8003f38:	4b10      	ldr	r3, [pc, #64]	; (8003f7c <strtok+0x60>)
 8003f3a:	4811      	ldr	r0, [pc, #68]	; (8003f80 <strtok+0x64>)
 8003f3c:	2157      	movs	r1, #87	; 0x57
 8003f3e:	f000 f8d7 	bl	80040f0 <__assert_func>
 8003f42:	e9c0 4400 	strd	r4, r4, [r0]
 8003f46:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003f4a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003f4e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003f52:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003f56:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003f5a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003f5e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003f62:	6184      	str	r4, [r0, #24]
 8003f64:	7704      	strb	r4, [r0, #28]
 8003f66:	6244      	str	r4, [r0, #36]	; 0x24
 8003f68:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	b002      	add	sp, #8
 8003f70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003f74:	f000 b806 	b.w	8003f84 <__strtok_r>
 8003f78:	20000034 	.word	0x20000034
 8003f7c:	08005194 	.word	0x08005194
 8003f80:	080051ab 	.word	0x080051ab

08003f84 <__strtok_r>:
 8003f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f86:	b908      	cbnz	r0, 8003f8c <__strtok_r+0x8>
 8003f88:	6810      	ldr	r0, [r2, #0]
 8003f8a:	b188      	cbz	r0, 8003fb0 <__strtok_r+0x2c>
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	4620      	mov	r0, r4
 8003f90:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003f94:	460f      	mov	r7, r1
 8003f96:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003f9a:	b91e      	cbnz	r6, 8003fa4 <__strtok_r+0x20>
 8003f9c:	b965      	cbnz	r5, 8003fb8 <__strtok_r+0x34>
 8003f9e:	6015      	str	r5, [r2, #0]
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	e005      	b.n	8003fb0 <__strtok_r+0x2c>
 8003fa4:	42b5      	cmp	r5, r6
 8003fa6:	d1f6      	bne.n	8003f96 <__strtok_r+0x12>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d1f0      	bne.n	8003f8e <__strtok_r+0xa>
 8003fac:	6014      	str	r4, [r2, #0]
 8003fae:	7003      	strb	r3, [r0, #0]
 8003fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb2:	461c      	mov	r4, r3
 8003fb4:	e00c      	b.n	8003fd0 <__strtok_r+0x4c>
 8003fb6:	b915      	cbnz	r5, 8003fbe <__strtok_r+0x3a>
 8003fb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003fbc:	460e      	mov	r6, r1
 8003fbe:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003fc2:	42ab      	cmp	r3, r5
 8003fc4:	d1f7      	bne.n	8003fb6 <__strtok_r+0x32>
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f3      	beq.n	8003fb2 <__strtok_r+0x2e>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003fd0:	6014      	str	r4, [r2, #0]
 8003fd2:	e7ed      	b.n	8003fb0 <__strtok_r+0x2c>

08003fd4 <_strtol_l.isra.0>:
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fda:	d001      	beq.n	8003fe0 <_strtol_l.isra.0+0xc>
 8003fdc:	2b24      	cmp	r3, #36	; 0x24
 8003fde:	d906      	bls.n	8003fee <_strtol_l.isra.0+0x1a>
 8003fe0:	f7ff ff6a 	bl	8003eb8 <__errno>
 8003fe4:	2316      	movs	r3, #22
 8003fe6:	6003      	str	r3, [r0, #0]
 8003fe8:	2000      	movs	r0, #0
 8003fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fee:	4f3a      	ldr	r7, [pc, #232]	; (80040d8 <_strtol_l.isra.0+0x104>)
 8003ff0:	468e      	mov	lr, r1
 8003ff2:	4676      	mov	r6, lr
 8003ff4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003ff8:	5de5      	ldrb	r5, [r4, r7]
 8003ffa:	f015 0508 	ands.w	r5, r5, #8
 8003ffe:	d1f8      	bne.n	8003ff2 <_strtol_l.isra.0+0x1e>
 8004000:	2c2d      	cmp	r4, #45	; 0x2d
 8004002:	d134      	bne.n	800406e <_strtol_l.isra.0+0x9a>
 8004004:	f89e 4000 	ldrb.w	r4, [lr]
 8004008:	f04f 0801 	mov.w	r8, #1
 800400c:	f106 0e02 	add.w	lr, r6, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d05c      	beq.n	80040ce <_strtol_l.isra.0+0xfa>
 8004014:	2b10      	cmp	r3, #16
 8004016:	d10c      	bne.n	8004032 <_strtol_l.isra.0+0x5e>
 8004018:	2c30      	cmp	r4, #48	; 0x30
 800401a:	d10a      	bne.n	8004032 <_strtol_l.isra.0+0x5e>
 800401c:	f89e 4000 	ldrb.w	r4, [lr]
 8004020:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004024:	2c58      	cmp	r4, #88	; 0x58
 8004026:	d14d      	bne.n	80040c4 <_strtol_l.isra.0+0xf0>
 8004028:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800402c:	2310      	movs	r3, #16
 800402e:	f10e 0e02 	add.w	lr, lr, #2
 8004032:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004036:	f10c 3cff 	add.w	ip, ip, #4294967295
 800403a:	2600      	movs	r6, #0
 800403c:	fbbc f9f3 	udiv	r9, ip, r3
 8004040:	4635      	mov	r5, r6
 8004042:	fb03 ca19 	mls	sl, r3, r9, ip
 8004046:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800404a:	2f09      	cmp	r7, #9
 800404c:	d818      	bhi.n	8004080 <_strtol_l.isra.0+0xac>
 800404e:	463c      	mov	r4, r7
 8004050:	42a3      	cmp	r3, r4
 8004052:	dd24      	ble.n	800409e <_strtol_l.isra.0+0xca>
 8004054:	2e00      	cmp	r6, #0
 8004056:	db1f      	blt.n	8004098 <_strtol_l.isra.0+0xc4>
 8004058:	45a9      	cmp	r9, r5
 800405a:	d31d      	bcc.n	8004098 <_strtol_l.isra.0+0xc4>
 800405c:	d101      	bne.n	8004062 <_strtol_l.isra.0+0x8e>
 800405e:	45a2      	cmp	sl, r4
 8004060:	db1a      	blt.n	8004098 <_strtol_l.isra.0+0xc4>
 8004062:	fb05 4503 	mla	r5, r5, r3, r4
 8004066:	2601      	movs	r6, #1
 8004068:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800406c:	e7eb      	b.n	8004046 <_strtol_l.isra.0+0x72>
 800406e:	2c2b      	cmp	r4, #43	; 0x2b
 8004070:	bf08      	it	eq
 8004072:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004076:	46a8      	mov	r8, r5
 8004078:	bf08      	it	eq
 800407a:	f106 0e02 	addeq.w	lr, r6, #2
 800407e:	e7c7      	b.n	8004010 <_strtol_l.isra.0+0x3c>
 8004080:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004084:	2f19      	cmp	r7, #25
 8004086:	d801      	bhi.n	800408c <_strtol_l.isra.0+0xb8>
 8004088:	3c37      	subs	r4, #55	; 0x37
 800408a:	e7e1      	b.n	8004050 <_strtol_l.isra.0+0x7c>
 800408c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004090:	2f19      	cmp	r7, #25
 8004092:	d804      	bhi.n	800409e <_strtol_l.isra.0+0xca>
 8004094:	3c57      	subs	r4, #87	; 0x57
 8004096:	e7db      	b.n	8004050 <_strtol_l.isra.0+0x7c>
 8004098:	f04f 36ff 	mov.w	r6, #4294967295
 800409c:	e7e4      	b.n	8004068 <_strtol_l.isra.0+0x94>
 800409e:	2e00      	cmp	r6, #0
 80040a0:	da05      	bge.n	80040ae <_strtol_l.isra.0+0xda>
 80040a2:	2322      	movs	r3, #34	; 0x22
 80040a4:	6003      	str	r3, [r0, #0]
 80040a6:	4665      	mov	r5, ip
 80040a8:	b942      	cbnz	r2, 80040bc <_strtol_l.isra.0+0xe8>
 80040aa:	4628      	mov	r0, r5
 80040ac:	e79d      	b.n	8003fea <_strtol_l.isra.0+0x16>
 80040ae:	f1b8 0f00 	cmp.w	r8, #0
 80040b2:	d000      	beq.n	80040b6 <_strtol_l.isra.0+0xe2>
 80040b4:	426d      	negs	r5, r5
 80040b6:	2a00      	cmp	r2, #0
 80040b8:	d0f7      	beq.n	80040aa <_strtol_l.isra.0+0xd6>
 80040ba:	b10e      	cbz	r6, 80040c0 <_strtol_l.isra.0+0xec>
 80040bc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80040c0:	6011      	str	r1, [r2, #0]
 80040c2:	e7f2      	b.n	80040aa <_strtol_l.isra.0+0xd6>
 80040c4:	2430      	movs	r4, #48	; 0x30
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1b3      	bne.n	8004032 <_strtol_l.isra.0+0x5e>
 80040ca:	2308      	movs	r3, #8
 80040cc:	e7b1      	b.n	8004032 <_strtol_l.isra.0+0x5e>
 80040ce:	2c30      	cmp	r4, #48	; 0x30
 80040d0:	d0a4      	beq.n	800401c <_strtol_l.isra.0+0x48>
 80040d2:	230a      	movs	r3, #10
 80040d4:	e7ad      	b.n	8004032 <_strtol_l.isra.0+0x5e>
 80040d6:	bf00      	nop
 80040d8:	08005249 	.word	0x08005249

080040dc <strtol>:
 80040dc:	4613      	mov	r3, r2
 80040de:	460a      	mov	r2, r1
 80040e0:	4601      	mov	r1, r0
 80040e2:	4802      	ldr	r0, [pc, #8]	; (80040ec <strtol+0x10>)
 80040e4:	6800      	ldr	r0, [r0, #0]
 80040e6:	f7ff bf75 	b.w	8003fd4 <_strtol_l.isra.0>
 80040ea:	bf00      	nop
 80040ec:	20000034 	.word	0x20000034

080040f0 <__assert_func>:
 80040f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80040f2:	4614      	mov	r4, r2
 80040f4:	461a      	mov	r2, r3
 80040f6:	4b09      	ldr	r3, [pc, #36]	; (800411c <__assert_func+0x2c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4605      	mov	r5, r0
 80040fc:	68d8      	ldr	r0, [r3, #12]
 80040fe:	b14c      	cbz	r4, 8004114 <__assert_func+0x24>
 8004100:	4b07      	ldr	r3, [pc, #28]	; (8004120 <__assert_func+0x30>)
 8004102:	9100      	str	r1, [sp, #0]
 8004104:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004108:	4906      	ldr	r1, [pc, #24]	; (8004124 <__assert_func+0x34>)
 800410a:	462b      	mov	r3, r5
 800410c:	f000 f80e 	bl	800412c <fiprintf>
 8004110:	f000 fc8e 	bl	8004a30 <abort>
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <__assert_func+0x38>)
 8004116:	461c      	mov	r4, r3
 8004118:	e7f3      	b.n	8004102 <__assert_func+0x12>
 800411a:	bf00      	nop
 800411c:	20000034 	.word	0x20000034
 8004120:	0800520c 	.word	0x0800520c
 8004124:	08005219 	.word	0x08005219
 8004128:	08005247 	.word	0x08005247

0800412c <fiprintf>:
 800412c:	b40e      	push	{r1, r2, r3}
 800412e:	b503      	push	{r0, r1, lr}
 8004130:	4601      	mov	r1, r0
 8004132:	ab03      	add	r3, sp, #12
 8004134:	4805      	ldr	r0, [pc, #20]	; (800414c <fiprintf+0x20>)
 8004136:	f853 2b04 	ldr.w	r2, [r3], #4
 800413a:	6800      	ldr	r0, [r0, #0]
 800413c:	9301      	str	r3, [sp, #4]
 800413e:	f000 f8e3 	bl	8004308 <_vfiprintf_r>
 8004142:	b002      	add	sp, #8
 8004144:	f85d eb04 	ldr.w	lr, [sp], #4
 8004148:	b003      	add	sp, #12
 800414a:	4770      	bx	lr
 800414c:	20000034 	.word	0x20000034

08004150 <malloc>:
 8004150:	4b02      	ldr	r3, [pc, #8]	; (800415c <malloc+0xc>)
 8004152:	4601      	mov	r1, r0
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	f000 b853 	b.w	8004200 <_malloc_r>
 800415a:	bf00      	nop
 800415c:	20000034 	.word	0x20000034

08004160 <_free_r>:
 8004160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004162:	2900      	cmp	r1, #0
 8004164:	d048      	beq.n	80041f8 <_free_r+0x98>
 8004166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800416a:	9001      	str	r0, [sp, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	f1a1 0404 	sub.w	r4, r1, #4
 8004172:	bfb8      	it	lt
 8004174:	18e4      	addlt	r4, r4, r3
 8004176:	f000 fe81 	bl	8004e7c <__malloc_lock>
 800417a:	4a20      	ldr	r2, [pc, #128]	; (80041fc <_free_r+0x9c>)
 800417c:	9801      	ldr	r0, [sp, #4]
 800417e:	6813      	ldr	r3, [r2, #0]
 8004180:	4615      	mov	r5, r2
 8004182:	b933      	cbnz	r3, 8004192 <_free_r+0x32>
 8004184:	6063      	str	r3, [r4, #4]
 8004186:	6014      	str	r4, [r2, #0]
 8004188:	b003      	add	sp, #12
 800418a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800418e:	f000 be7b 	b.w	8004e88 <__malloc_unlock>
 8004192:	42a3      	cmp	r3, r4
 8004194:	d90b      	bls.n	80041ae <_free_r+0x4e>
 8004196:	6821      	ldr	r1, [r4, #0]
 8004198:	1862      	adds	r2, r4, r1
 800419a:	4293      	cmp	r3, r2
 800419c:	bf04      	itt	eq
 800419e:	681a      	ldreq	r2, [r3, #0]
 80041a0:	685b      	ldreq	r3, [r3, #4]
 80041a2:	6063      	str	r3, [r4, #4]
 80041a4:	bf04      	itt	eq
 80041a6:	1852      	addeq	r2, r2, r1
 80041a8:	6022      	streq	r2, [r4, #0]
 80041aa:	602c      	str	r4, [r5, #0]
 80041ac:	e7ec      	b.n	8004188 <_free_r+0x28>
 80041ae:	461a      	mov	r2, r3
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	b10b      	cbz	r3, 80041b8 <_free_r+0x58>
 80041b4:	42a3      	cmp	r3, r4
 80041b6:	d9fa      	bls.n	80041ae <_free_r+0x4e>
 80041b8:	6811      	ldr	r1, [r2, #0]
 80041ba:	1855      	adds	r5, r2, r1
 80041bc:	42a5      	cmp	r5, r4
 80041be:	d10b      	bne.n	80041d8 <_free_r+0x78>
 80041c0:	6824      	ldr	r4, [r4, #0]
 80041c2:	4421      	add	r1, r4
 80041c4:	1854      	adds	r4, r2, r1
 80041c6:	42a3      	cmp	r3, r4
 80041c8:	6011      	str	r1, [r2, #0]
 80041ca:	d1dd      	bne.n	8004188 <_free_r+0x28>
 80041cc:	681c      	ldr	r4, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	6053      	str	r3, [r2, #4]
 80041d2:	4421      	add	r1, r4
 80041d4:	6011      	str	r1, [r2, #0]
 80041d6:	e7d7      	b.n	8004188 <_free_r+0x28>
 80041d8:	d902      	bls.n	80041e0 <_free_r+0x80>
 80041da:	230c      	movs	r3, #12
 80041dc:	6003      	str	r3, [r0, #0]
 80041de:	e7d3      	b.n	8004188 <_free_r+0x28>
 80041e0:	6825      	ldr	r5, [r4, #0]
 80041e2:	1961      	adds	r1, r4, r5
 80041e4:	428b      	cmp	r3, r1
 80041e6:	bf04      	itt	eq
 80041e8:	6819      	ldreq	r1, [r3, #0]
 80041ea:	685b      	ldreq	r3, [r3, #4]
 80041ec:	6063      	str	r3, [r4, #4]
 80041ee:	bf04      	itt	eq
 80041f0:	1949      	addeq	r1, r1, r5
 80041f2:	6021      	streq	r1, [r4, #0]
 80041f4:	6054      	str	r4, [r2, #4]
 80041f6:	e7c7      	b.n	8004188 <_free_r+0x28>
 80041f8:	b003      	add	sp, #12
 80041fa:	bd30      	pop	{r4, r5, pc}
 80041fc:	200000c0 	.word	0x200000c0

08004200 <_malloc_r>:
 8004200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004202:	1ccd      	adds	r5, r1, #3
 8004204:	f025 0503 	bic.w	r5, r5, #3
 8004208:	3508      	adds	r5, #8
 800420a:	2d0c      	cmp	r5, #12
 800420c:	bf38      	it	cc
 800420e:	250c      	movcc	r5, #12
 8004210:	2d00      	cmp	r5, #0
 8004212:	4606      	mov	r6, r0
 8004214:	db01      	blt.n	800421a <_malloc_r+0x1a>
 8004216:	42a9      	cmp	r1, r5
 8004218:	d903      	bls.n	8004222 <_malloc_r+0x22>
 800421a:	230c      	movs	r3, #12
 800421c:	6033      	str	r3, [r6, #0]
 800421e:	2000      	movs	r0, #0
 8004220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004222:	f000 fe2b 	bl	8004e7c <__malloc_lock>
 8004226:	4921      	ldr	r1, [pc, #132]	; (80042ac <_malloc_r+0xac>)
 8004228:	680a      	ldr	r2, [r1, #0]
 800422a:	4614      	mov	r4, r2
 800422c:	b99c      	cbnz	r4, 8004256 <_malloc_r+0x56>
 800422e:	4f20      	ldr	r7, [pc, #128]	; (80042b0 <_malloc_r+0xb0>)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	b923      	cbnz	r3, 800423e <_malloc_r+0x3e>
 8004234:	4621      	mov	r1, r4
 8004236:	4630      	mov	r0, r6
 8004238:	f000 fb2a 	bl	8004890 <_sbrk_r>
 800423c:	6038      	str	r0, [r7, #0]
 800423e:	4629      	mov	r1, r5
 8004240:	4630      	mov	r0, r6
 8004242:	f000 fb25 	bl	8004890 <_sbrk_r>
 8004246:	1c43      	adds	r3, r0, #1
 8004248:	d123      	bne.n	8004292 <_malloc_r+0x92>
 800424a:	230c      	movs	r3, #12
 800424c:	6033      	str	r3, [r6, #0]
 800424e:	4630      	mov	r0, r6
 8004250:	f000 fe1a 	bl	8004e88 <__malloc_unlock>
 8004254:	e7e3      	b.n	800421e <_malloc_r+0x1e>
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	1b5b      	subs	r3, r3, r5
 800425a:	d417      	bmi.n	800428c <_malloc_r+0x8c>
 800425c:	2b0b      	cmp	r3, #11
 800425e:	d903      	bls.n	8004268 <_malloc_r+0x68>
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	441c      	add	r4, r3
 8004264:	6025      	str	r5, [r4, #0]
 8004266:	e004      	b.n	8004272 <_malloc_r+0x72>
 8004268:	6863      	ldr	r3, [r4, #4]
 800426a:	42a2      	cmp	r2, r4
 800426c:	bf0c      	ite	eq
 800426e:	600b      	streq	r3, [r1, #0]
 8004270:	6053      	strne	r3, [r2, #4]
 8004272:	4630      	mov	r0, r6
 8004274:	f000 fe08 	bl	8004e88 <__malloc_unlock>
 8004278:	f104 000b 	add.w	r0, r4, #11
 800427c:	1d23      	adds	r3, r4, #4
 800427e:	f020 0007 	bic.w	r0, r0, #7
 8004282:	1ac2      	subs	r2, r0, r3
 8004284:	d0cc      	beq.n	8004220 <_malloc_r+0x20>
 8004286:	1a1b      	subs	r3, r3, r0
 8004288:	50a3      	str	r3, [r4, r2]
 800428a:	e7c9      	b.n	8004220 <_malloc_r+0x20>
 800428c:	4622      	mov	r2, r4
 800428e:	6864      	ldr	r4, [r4, #4]
 8004290:	e7cc      	b.n	800422c <_malloc_r+0x2c>
 8004292:	1cc4      	adds	r4, r0, #3
 8004294:	f024 0403 	bic.w	r4, r4, #3
 8004298:	42a0      	cmp	r0, r4
 800429a:	d0e3      	beq.n	8004264 <_malloc_r+0x64>
 800429c:	1a21      	subs	r1, r4, r0
 800429e:	4630      	mov	r0, r6
 80042a0:	f000 faf6 	bl	8004890 <_sbrk_r>
 80042a4:	3001      	adds	r0, #1
 80042a6:	d1dd      	bne.n	8004264 <_malloc_r+0x64>
 80042a8:	e7cf      	b.n	800424a <_malloc_r+0x4a>
 80042aa:	bf00      	nop
 80042ac:	200000c0 	.word	0x200000c0
 80042b0:	200000c4 	.word	0x200000c4

080042b4 <__sfputc_r>:
 80042b4:	6893      	ldr	r3, [r2, #8]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	b410      	push	{r4}
 80042bc:	6093      	str	r3, [r2, #8]
 80042be:	da08      	bge.n	80042d2 <__sfputc_r+0x1e>
 80042c0:	6994      	ldr	r4, [r2, #24]
 80042c2:	42a3      	cmp	r3, r4
 80042c4:	db01      	blt.n	80042ca <__sfputc_r+0x16>
 80042c6:	290a      	cmp	r1, #10
 80042c8:	d103      	bne.n	80042d2 <__sfputc_r+0x1e>
 80042ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042ce:	f000 baef 	b.w	80048b0 <__swbuf_r>
 80042d2:	6813      	ldr	r3, [r2, #0]
 80042d4:	1c58      	adds	r0, r3, #1
 80042d6:	6010      	str	r0, [r2, #0]
 80042d8:	7019      	strb	r1, [r3, #0]
 80042da:	4608      	mov	r0, r1
 80042dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <__sfputs_r>:
 80042e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e4:	4606      	mov	r6, r0
 80042e6:	460f      	mov	r7, r1
 80042e8:	4614      	mov	r4, r2
 80042ea:	18d5      	adds	r5, r2, r3
 80042ec:	42ac      	cmp	r4, r5
 80042ee:	d101      	bne.n	80042f4 <__sfputs_r+0x12>
 80042f0:	2000      	movs	r0, #0
 80042f2:	e007      	b.n	8004304 <__sfputs_r+0x22>
 80042f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042f8:	463a      	mov	r2, r7
 80042fa:	4630      	mov	r0, r6
 80042fc:	f7ff ffda 	bl	80042b4 <__sfputc_r>
 8004300:	1c43      	adds	r3, r0, #1
 8004302:	d1f3      	bne.n	80042ec <__sfputs_r+0xa>
 8004304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004308 <_vfiprintf_r>:
 8004308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430c:	460d      	mov	r5, r1
 800430e:	b09d      	sub	sp, #116	; 0x74
 8004310:	4614      	mov	r4, r2
 8004312:	4698      	mov	r8, r3
 8004314:	4606      	mov	r6, r0
 8004316:	b118      	cbz	r0, 8004320 <_vfiprintf_r+0x18>
 8004318:	6983      	ldr	r3, [r0, #24]
 800431a:	b90b      	cbnz	r3, 8004320 <_vfiprintf_r+0x18>
 800431c:	f000 fcaa 	bl	8004c74 <__sinit>
 8004320:	4b89      	ldr	r3, [pc, #548]	; (8004548 <_vfiprintf_r+0x240>)
 8004322:	429d      	cmp	r5, r3
 8004324:	d11b      	bne.n	800435e <_vfiprintf_r+0x56>
 8004326:	6875      	ldr	r5, [r6, #4]
 8004328:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800432a:	07d9      	lsls	r1, r3, #31
 800432c:	d405      	bmi.n	800433a <_vfiprintf_r+0x32>
 800432e:	89ab      	ldrh	r3, [r5, #12]
 8004330:	059a      	lsls	r2, r3, #22
 8004332:	d402      	bmi.n	800433a <_vfiprintf_r+0x32>
 8004334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004336:	f000 fd3b 	bl	8004db0 <__retarget_lock_acquire_recursive>
 800433a:	89ab      	ldrh	r3, [r5, #12]
 800433c:	071b      	lsls	r3, r3, #28
 800433e:	d501      	bpl.n	8004344 <_vfiprintf_r+0x3c>
 8004340:	692b      	ldr	r3, [r5, #16]
 8004342:	b9eb      	cbnz	r3, 8004380 <_vfiprintf_r+0x78>
 8004344:	4629      	mov	r1, r5
 8004346:	4630      	mov	r0, r6
 8004348:	f000 fb04 	bl	8004954 <__swsetup_r>
 800434c:	b1c0      	cbz	r0, 8004380 <_vfiprintf_r+0x78>
 800434e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004350:	07dc      	lsls	r4, r3, #31
 8004352:	d50e      	bpl.n	8004372 <_vfiprintf_r+0x6a>
 8004354:	f04f 30ff 	mov.w	r0, #4294967295
 8004358:	b01d      	add	sp, #116	; 0x74
 800435a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800435e:	4b7b      	ldr	r3, [pc, #492]	; (800454c <_vfiprintf_r+0x244>)
 8004360:	429d      	cmp	r5, r3
 8004362:	d101      	bne.n	8004368 <_vfiprintf_r+0x60>
 8004364:	68b5      	ldr	r5, [r6, #8]
 8004366:	e7df      	b.n	8004328 <_vfiprintf_r+0x20>
 8004368:	4b79      	ldr	r3, [pc, #484]	; (8004550 <_vfiprintf_r+0x248>)
 800436a:	429d      	cmp	r5, r3
 800436c:	bf08      	it	eq
 800436e:	68f5      	ldreq	r5, [r6, #12]
 8004370:	e7da      	b.n	8004328 <_vfiprintf_r+0x20>
 8004372:	89ab      	ldrh	r3, [r5, #12]
 8004374:	0598      	lsls	r0, r3, #22
 8004376:	d4ed      	bmi.n	8004354 <_vfiprintf_r+0x4c>
 8004378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800437a:	f000 fd1a 	bl	8004db2 <__retarget_lock_release_recursive>
 800437e:	e7e9      	b.n	8004354 <_vfiprintf_r+0x4c>
 8004380:	2300      	movs	r3, #0
 8004382:	9309      	str	r3, [sp, #36]	; 0x24
 8004384:	2320      	movs	r3, #32
 8004386:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800438a:	f8cd 800c 	str.w	r8, [sp, #12]
 800438e:	2330      	movs	r3, #48	; 0x30
 8004390:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004554 <_vfiprintf_r+0x24c>
 8004394:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004398:	f04f 0901 	mov.w	r9, #1
 800439c:	4623      	mov	r3, r4
 800439e:	469a      	mov	sl, r3
 80043a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043a4:	b10a      	cbz	r2, 80043aa <_vfiprintf_r+0xa2>
 80043a6:	2a25      	cmp	r2, #37	; 0x25
 80043a8:	d1f9      	bne.n	800439e <_vfiprintf_r+0x96>
 80043aa:	ebba 0b04 	subs.w	fp, sl, r4
 80043ae:	d00b      	beq.n	80043c8 <_vfiprintf_r+0xc0>
 80043b0:	465b      	mov	r3, fp
 80043b2:	4622      	mov	r2, r4
 80043b4:	4629      	mov	r1, r5
 80043b6:	4630      	mov	r0, r6
 80043b8:	f7ff ff93 	bl	80042e2 <__sfputs_r>
 80043bc:	3001      	adds	r0, #1
 80043be:	f000 80aa 	beq.w	8004516 <_vfiprintf_r+0x20e>
 80043c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043c4:	445a      	add	r2, fp
 80043c6:	9209      	str	r2, [sp, #36]	; 0x24
 80043c8:	f89a 3000 	ldrb.w	r3, [sl]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80a2 	beq.w	8004516 <_vfiprintf_r+0x20e>
 80043d2:	2300      	movs	r3, #0
 80043d4:	f04f 32ff 	mov.w	r2, #4294967295
 80043d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043dc:	f10a 0a01 	add.w	sl, sl, #1
 80043e0:	9304      	str	r3, [sp, #16]
 80043e2:	9307      	str	r3, [sp, #28]
 80043e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043e8:	931a      	str	r3, [sp, #104]	; 0x68
 80043ea:	4654      	mov	r4, sl
 80043ec:	2205      	movs	r2, #5
 80043ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f2:	4858      	ldr	r0, [pc, #352]	; (8004554 <_vfiprintf_r+0x24c>)
 80043f4:	f7fb fefc 	bl	80001f0 <memchr>
 80043f8:	9a04      	ldr	r2, [sp, #16]
 80043fa:	b9d8      	cbnz	r0, 8004434 <_vfiprintf_r+0x12c>
 80043fc:	06d1      	lsls	r1, r2, #27
 80043fe:	bf44      	itt	mi
 8004400:	2320      	movmi	r3, #32
 8004402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004406:	0713      	lsls	r3, r2, #28
 8004408:	bf44      	itt	mi
 800440a:	232b      	movmi	r3, #43	; 0x2b
 800440c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004410:	f89a 3000 	ldrb.w	r3, [sl]
 8004414:	2b2a      	cmp	r3, #42	; 0x2a
 8004416:	d015      	beq.n	8004444 <_vfiprintf_r+0x13c>
 8004418:	9a07      	ldr	r2, [sp, #28]
 800441a:	4654      	mov	r4, sl
 800441c:	2000      	movs	r0, #0
 800441e:	f04f 0c0a 	mov.w	ip, #10
 8004422:	4621      	mov	r1, r4
 8004424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004428:	3b30      	subs	r3, #48	; 0x30
 800442a:	2b09      	cmp	r3, #9
 800442c:	d94e      	bls.n	80044cc <_vfiprintf_r+0x1c4>
 800442e:	b1b0      	cbz	r0, 800445e <_vfiprintf_r+0x156>
 8004430:	9207      	str	r2, [sp, #28]
 8004432:	e014      	b.n	800445e <_vfiprintf_r+0x156>
 8004434:	eba0 0308 	sub.w	r3, r0, r8
 8004438:	fa09 f303 	lsl.w	r3, r9, r3
 800443c:	4313      	orrs	r3, r2
 800443e:	9304      	str	r3, [sp, #16]
 8004440:	46a2      	mov	sl, r4
 8004442:	e7d2      	b.n	80043ea <_vfiprintf_r+0xe2>
 8004444:	9b03      	ldr	r3, [sp, #12]
 8004446:	1d19      	adds	r1, r3, #4
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	9103      	str	r1, [sp, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	bfbb      	ittet	lt
 8004450:	425b      	neglt	r3, r3
 8004452:	f042 0202 	orrlt.w	r2, r2, #2
 8004456:	9307      	strge	r3, [sp, #28]
 8004458:	9307      	strlt	r3, [sp, #28]
 800445a:	bfb8      	it	lt
 800445c:	9204      	strlt	r2, [sp, #16]
 800445e:	7823      	ldrb	r3, [r4, #0]
 8004460:	2b2e      	cmp	r3, #46	; 0x2e
 8004462:	d10c      	bne.n	800447e <_vfiprintf_r+0x176>
 8004464:	7863      	ldrb	r3, [r4, #1]
 8004466:	2b2a      	cmp	r3, #42	; 0x2a
 8004468:	d135      	bne.n	80044d6 <_vfiprintf_r+0x1ce>
 800446a:	9b03      	ldr	r3, [sp, #12]
 800446c:	1d1a      	adds	r2, r3, #4
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	9203      	str	r2, [sp, #12]
 8004472:	2b00      	cmp	r3, #0
 8004474:	bfb8      	it	lt
 8004476:	f04f 33ff 	movlt.w	r3, #4294967295
 800447a:	3402      	adds	r4, #2
 800447c:	9305      	str	r3, [sp, #20]
 800447e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004564 <_vfiprintf_r+0x25c>
 8004482:	7821      	ldrb	r1, [r4, #0]
 8004484:	2203      	movs	r2, #3
 8004486:	4650      	mov	r0, sl
 8004488:	f7fb feb2 	bl	80001f0 <memchr>
 800448c:	b140      	cbz	r0, 80044a0 <_vfiprintf_r+0x198>
 800448e:	2340      	movs	r3, #64	; 0x40
 8004490:	eba0 000a 	sub.w	r0, r0, sl
 8004494:	fa03 f000 	lsl.w	r0, r3, r0
 8004498:	9b04      	ldr	r3, [sp, #16]
 800449a:	4303      	orrs	r3, r0
 800449c:	3401      	adds	r4, #1
 800449e:	9304      	str	r3, [sp, #16]
 80044a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a4:	482c      	ldr	r0, [pc, #176]	; (8004558 <_vfiprintf_r+0x250>)
 80044a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044aa:	2206      	movs	r2, #6
 80044ac:	f7fb fea0 	bl	80001f0 <memchr>
 80044b0:	2800      	cmp	r0, #0
 80044b2:	d03f      	beq.n	8004534 <_vfiprintf_r+0x22c>
 80044b4:	4b29      	ldr	r3, [pc, #164]	; (800455c <_vfiprintf_r+0x254>)
 80044b6:	bb1b      	cbnz	r3, 8004500 <_vfiprintf_r+0x1f8>
 80044b8:	9b03      	ldr	r3, [sp, #12]
 80044ba:	3307      	adds	r3, #7
 80044bc:	f023 0307 	bic.w	r3, r3, #7
 80044c0:	3308      	adds	r3, #8
 80044c2:	9303      	str	r3, [sp, #12]
 80044c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044c6:	443b      	add	r3, r7
 80044c8:	9309      	str	r3, [sp, #36]	; 0x24
 80044ca:	e767      	b.n	800439c <_vfiprintf_r+0x94>
 80044cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80044d0:	460c      	mov	r4, r1
 80044d2:	2001      	movs	r0, #1
 80044d4:	e7a5      	b.n	8004422 <_vfiprintf_r+0x11a>
 80044d6:	2300      	movs	r3, #0
 80044d8:	3401      	adds	r4, #1
 80044da:	9305      	str	r3, [sp, #20]
 80044dc:	4619      	mov	r1, r3
 80044de:	f04f 0c0a 	mov.w	ip, #10
 80044e2:	4620      	mov	r0, r4
 80044e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044e8:	3a30      	subs	r2, #48	; 0x30
 80044ea:	2a09      	cmp	r2, #9
 80044ec:	d903      	bls.n	80044f6 <_vfiprintf_r+0x1ee>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0c5      	beq.n	800447e <_vfiprintf_r+0x176>
 80044f2:	9105      	str	r1, [sp, #20]
 80044f4:	e7c3      	b.n	800447e <_vfiprintf_r+0x176>
 80044f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80044fa:	4604      	mov	r4, r0
 80044fc:	2301      	movs	r3, #1
 80044fe:	e7f0      	b.n	80044e2 <_vfiprintf_r+0x1da>
 8004500:	ab03      	add	r3, sp, #12
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	462a      	mov	r2, r5
 8004506:	4b16      	ldr	r3, [pc, #88]	; (8004560 <_vfiprintf_r+0x258>)
 8004508:	a904      	add	r1, sp, #16
 800450a:	4630      	mov	r0, r6
 800450c:	f3af 8000 	nop.w
 8004510:	4607      	mov	r7, r0
 8004512:	1c78      	adds	r0, r7, #1
 8004514:	d1d6      	bne.n	80044c4 <_vfiprintf_r+0x1bc>
 8004516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004518:	07d9      	lsls	r1, r3, #31
 800451a:	d405      	bmi.n	8004528 <_vfiprintf_r+0x220>
 800451c:	89ab      	ldrh	r3, [r5, #12]
 800451e:	059a      	lsls	r2, r3, #22
 8004520:	d402      	bmi.n	8004528 <_vfiprintf_r+0x220>
 8004522:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004524:	f000 fc45 	bl	8004db2 <__retarget_lock_release_recursive>
 8004528:	89ab      	ldrh	r3, [r5, #12]
 800452a:	065b      	lsls	r3, r3, #25
 800452c:	f53f af12 	bmi.w	8004354 <_vfiprintf_r+0x4c>
 8004530:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004532:	e711      	b.n	8004358 <_vfiprintf_r+0x50>
 8004534:	ab03      	add	r3, sp, #12
 8004536:	9300      	str	r3, [sp, #0]
 8004538:	462a      	mov	r2, r5
 800453a:	4b09      	ldr	r3, [pc, #36]	; (8004560 <_vfiprintf_r+0x258>)
 800453c:	a904      	add	r1, sp, #16
 800453e:	4630      	mov	r0, r6
 8004540:	f000 f880 	bl	8004644 <_printf_i>
 8004544:	e7e4      	b.n	8004510 <_vfiprintf_r+0x208>
 8004546:	bf00      	nop
 8004548:	0800539c 	.word	0x0800539c
 800454c:	080053bc 	.word	0x080053bc
 8004550:	0800537c 	.word	0x0800537c
 8004554:	08005349 	.word	0x08005349
 8004558:	08005353 	.word	0x08005353
 800455c:	00000000 	.word	0x00000000
 8004560:	080042e3 	.word	0x080042e3
 8004564:	0800534f 	.word	0x0800534f

08004568 <_printf_common>:
 8004568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800456c:	4616      	mov	r6, r2
 800456e:	4699      	mov	r9, r3
 8004570:	688a      	ldr	r2, [r1, #8]
 8004572:	690b      	ldr	r3, [r1, #16]
 8004574:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004578:	4293      	cmp	r3, r2
 800457a:	bfb8      	it	lt
 800457c:	4613      	movlt	r3, r2
 800457e:	6033      	str	r3, [r6, #0]
 8004580:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004584:	4607      	mov	r7, r0
 8004586:	460c      	mov	r4, r1
 8004588:	b10a      	cbz	r2, 800458e <_printf_common+0x26>
 800458a:	3301      	adds	r3, #1
 800458c:	6033      	str	r3, [r6, #0]
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	0699      	lsls	r1, r3, #26
 8004592:	bf42      	ittt	mi
 8004594:	6833      	ldrmi	r3, [r6, #0]
 8004596:	3302      	addmi	r3, #2
 8004598:	6033      	strmi	r3, [r6, #0]
 800459a:	6825      	ldr	r5, [r4, #0]
 800459c:	f015 0506 	ands.w	r5, r5, #6
 80045a0:	d106      	bne.n	80045b0 <_printf_common+0x48>
 80045a2:	f104 0a19 	add.w	sl, r4, #25
 80045a6:	68e3      	ldr	r3, [r4, #12]
 80045a8:	6832      	ldr	r2, [r6, #0]
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	42ab      	cmp	r3, r5
 80045ae:	dc26      	bgt.n	80045fe <_printf_common+0x96>
 80045b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045b4:	1e13      	subs	r3, r2, #0
 80045b6:	6822      	ldr	r2, [r4, #0]
 80045b8:	bf18      	it	ne
 80045ba:	2301      	movne	r3, #1
 80045bc:	0692      	lsls	r2, r2, #26
 80045be:	d42b      	bmi.n	8004618 <_printf_common+0xb0>
 80045c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045c4:	4649      	mov	r1, r9
 80045c6:	4638      	mov	r0, r7
 80045c8:	47c0      	blx	r8
 80045ca:	3001      	adds	r0, #1
 80045cc:	d01e      	beq.n	800460c <_printf_common+0xa4>
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	68e5      	ldr	r5, [r4, #12]
 80045d2:	6832      	ldr	r2, [r6, #0]
 80045d4:	f003 0306 	and.w	r3, r3, #6
 80045d8:	2b04      	cmp	r3, #4
 80045da:	bf08      	it	eq
 80045dc:	1aad      	subeq	r5, r5, r2
 80045de:	68a3      	ldr	r3, [r4, #8]
 80045e0:	6922      	ldr	r2, [r4, #16]
 80045e2:	bf0c      	ite	eq
 80045e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045e8:	2500      	movne	r5, #0
 80045ea:	4293      	cmp	r3, r2
 80045ec:	bfc4      	itt	gt
 80045ee:	1a9b      	subgt	r3, r3, r2
 80045f0:	18ed      	addgt	r5, r5, r3
 80045f2:	2600      	movs	r6, #0
 80045f4:	341a      	adds	r4, #26
 80045f6:	42b5      	cmp	r5, r6
 80045f8:	d11a      	bne.n	8004630 <_printf_common+0xc8>
 80045fa:	2000      	movs	r0, #0
 80045fc:	e008      	b.n	8004610 <_printf_common+0xa8>
 80045fe:	2301      	movs	r3, #1
 8004600:	4652      	mov	r2, sl
 8004602:	4649      	mov	r1, r9
 8004604:	4638      	mov	r0, r7
 8004606:	47c0      	blx	r8
 8004608:	3001      	adds	r0, #1
 800460a:	d103      	bne.n	8004614 <_printf_common+0xac>
 800460c:	f04f 30ff 	mov.w	r0, #4294967295
 8004610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004614:	3501      	adds	r5, #1
 8004616:	e7c6      	b.n	80045a6 <_printf_common+0x3e>
 8004618:	18e1      	adds	r1, r4, r3
 800461a:	1c5a      	adds	r2, r3, #1
 800461c:	2030      	movs	r0, #48	; 0x30
 800461e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004622:	4422      	add	r2, r4
 8004624:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004628:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800462c:	3302      	adds	r3, #2
 800462e:	e7c7      	b.n	80045c0 <_printf_common+0x58>
 8004630:	2301      	movs	r3, #1
 8004632:	4622      	mov	r2, r4
 8004634:	4649      	mov	r1, r9
 8004636:	4638      	mov	r0, r7
 8004638:	47c0      	blx	r8
 800463a:	3001      	adds	r0, #1
 800463c:	d0e6      	beq.n	800460c <_printf_common+0xa4>
 800463e:	3601      	adds	r6, #1
 8004640:	e7d9      	b.n	80045f6 <_printf_common+0x8e>
	...

08004644 <_printf_i>:
 8004644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004648:	460c      	mov	r4, r1
 800464a:	4691      	mov	r9, r2
 800464c:	7e27      	ldrb	r7, [r4, #24]
 800464e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004650:	2f78      	cmp	r7, #120	; 0x78
 8004652:	4680      	mov	r8, r0
 8004654:	469a      	mov	sl, r3
 8004656:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800465a:	d807      	bhi.n	800466c <_printf_i+0x28>
 800465c:	2f62      	cmp	r7, #98	; 0x62
 800465e:	d80a      	bhi.n	8004676 <_printf_i+0x32>
 8004660:	2f00      	cmp	r7, #0
 8004662:	f000 80d8 	beq.w	8004816 <_printf_i+0x1d2>
 8004666:	2f58      	cmp	r7, #88	; 0x58
 8004668:	f000 80a3 	beq.w	80047b2 <_printf_i+0x16e>
 800466c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004674:	e03a      	b.n	80046ec <_printf_i+0xa8>
 8004676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800467a:	2b15      	cmp	r3, #21
 800467c:	d8f6      	bhi.n	800466c <_printf_i+0x28>
 800467e:	a001      	add	r0, pc, #4	; (adr r0, 8004684 <_printf_i+0x40>)
 8004680:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004684:	080046dd 	.word	0x080046dd
 8004688:	080046f1 	.word	0x080046f1
 800468c:	0800466d 	.word	0x0800466d
 8004690:	0800466d 	.word	0x0800466d
 8004694:	0800466d 	.word	0x0800466d
 8004698:	0800466d 	.word	0x0800466d
 800469c:	080046f1 	.word	0x080046f1
 80046a0:	0800466d 	.word	0x0800466d
 80046a4:	0800466d 	.word	0x0800466d
 80046a8:	0800466d 	.word	0x0800466d
 80046ac:	0800466d 	.word	0x0800466d
 80046b0:	080047fd 	.word	0x080047fd
 80046b4:	08004721 	.word	0x08004721
 80046b8:	080047df 	.word	0x080047df
 80046bc:	0800466d 	.word	0x0800466d
 80046c0:	0800466d 	.word	0x0800466d
 80046c4:	0800481f 	.word	0x0800481f
 80046c8:	0800466d 	.word	0x0800466d
 80046cc:	08004721 	.word	0x08004721
 80046d0:	0800466d 	.word	0x0800466d
 80046d4:	0800466d 	.word	0x0800466d
 80046d8:	080047e7 	.word	0x080047e7
 80046dc:	680b      	ldr	r3, [r1, #0]
 80046de:	1d1a      	adds	r2, r3, #4
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	600a      	str	r2, [r1, #0]
 80046e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80046e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0a3      	b.n	8004838 <_printf_i+0x1f4>
 80046f0:	6825      	ldr	r5, [r4, #0]
 80046f2:	6808      	ldr	r0, [r1, #0]
 80046f4:	062e      	lsls	r6, r5, #24
 80046f6:	f100 0304 	add.w	r3, r0, #4
 80046fa:	d50a      	bpl.n	8004712 <_printf_i+0xce>
 80046fc:	6805      	ldr	r5, [r0, #0]
 80046fe:	600b      	str	r3, [r1, #0]
 8004700:	2d00      	cmp	r5, #0
 8004702:	da03      	bge.n	800470c <_printf_i+0xc8>
 8004704:	232d      	movs	r3, #45	; 0x2d
 8004706:	426d      	negs	r5, r5
 8004708:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800470c:	485e      	ldr	r0, [pc, #376]	; (8004888 <_printf_i+0x244>)
 800470e:	230a      	movs	r3, #10
 8004710:	e019      	b.n	8004746 <_printf_i+0x102>
 8004712:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004716:	6805      	ldr	r5, [r0, #0]
 8004718:	600b      	str	r3, [r1, #0]
 800471a:	bf18      	it	ne
 800471c:	b22d      	sxthne	r5, r5
 800471e:	e7ef      	b.n	8004700 <_printf_i+0xbc>
 8004720:	680b      	ldr	r3, [r1, #0]
 8004722:	6825      	ldr	r5, [r4, #0]
 8004724:	1d18      	adds	r0, r3, #4
 8004726:	6008      	str	r0, [r1, #0]
 8004728:	0628      	lsls	r0, r5, #24
 800472a:	d501      	bpl.n	8004730 <_printf_i+0xec>
 800472c:	681d      	ldr	r5, [r3, #0]
 800472e:	e002      	b.n	8004736 <_printf_i+0xf2>
 8004730:	0669      	lsls	r1, r5, #25
 8004732:	d5fb      	bpl.n	800472c <_printf_i+0xe8>
 8004734:	881d      	ldrh	r5, [r3, #0]
 8004736:	4854      	ldr	r0, [pc, #336]	; (8004888 <_printf_i+0x244>)
 8004738:	2f6f      	cmp	r7, #111	; 0x6f
 800473a:	bf0c      	ite	eq
 800473c:	2308      	moveq	r3, #8
 800473e:	230a      	movne	r3, #10
 8004740:	2100      	movs	r1, #0
 8004742:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004746:	6866      	ldr	r6, [r4, #4]
 8004748:	60a6      	str	r6, [r4, #8]
 800474a:	2e00      	cmp	r6, #0
 800474c:	bfa2      	ittt	ge
 800474e:	6821      	ldrge	r1, [r4, #0]
 8004750:	f021 0104 	bicge.w	r1, r1, #4
 8004754:	6021      	strge	r1, [r4, #0]
 8004756:	b90d      	cbnz	r5, 800475c <_printf_i+0x118>
 8004758:	2e00      	cmp	r6, #0
 800475a:	d04d      	beq.n	80047f8 <_printf_i+0x1b4>
 800475c:	4616      	mov	r6, r2
 800475e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004762:	fb03 5711 	mls	r7, r3, r1, r5
 8004766:	5dc7      	ldrb	r7, [r0, r7]
 8004768:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800476c:	462f      	mov	r7, r5
 800476e:	42bb      	cmp	r3, r7
 8004770:	460d      	mov	r5, r1
 8004772:	d9f4      	bls.n	800475e <_printf_i+0x11a>
 8004774:	2b08      	cmp	r3, #8
 8004776:	d10b      	bne.n	8004790 <_printf_i+0x14c>
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	07df      	lsls	r7, r3, #31
 800477c:	d508      	bpl.n	8004790 <_printf_i+0x14c>
 800477e:	6923      	ldr	r3, [r4, #16]
 8004780:	6861      	ldr	r1, [r4, #4]
 8004782:	4299      	cmp	r1, r3
 8004784:	bfde      	ittt	le
 8004786:	2330      	movle	r3, #48	; 0x30
 8004788:	f806 3c01 	strble.w	r3, [r6, #-1]
 800478c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004790:	1b92      	subs	r2, r2, r6
 8004792:	6122      	str	r2, [r4, #16]
 8004794:	f8cd a000 	str.w	sl, [sp]
 8004798:	464b      	mov	r3, r9
 800479a:	aa03      	add	r2, sp, #12
 800479c:	4621      	mov	r1, r4
 800479e:	4640      	mov	r0, r8
 80047a0:	f7ff fee2 	bl	8004568 <_printf_common>
 80047a4:	3001      	adds	r0, #1
 80047a6:	d14c      	bne.n	8004842 <_printf_i+0x1fe>
 80047a8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ac:	b004      	add	sp, #16
 80047ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b2:	4835      	ldr	r0, [pc, #212]	; (8004888 <_printf_i+0x244>)
 80047b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	680e      	ldr	r6, [r1, #0]
 80047bc:	061f      	lsls	r7, r3, #24
 80047be:	f856 5b04 	ldr.w	r5, [r6], #4
 80047c2:	600e      	str	r6, [r1, #0]
 80047c4:	d514      	bpl.n	80047f0 <_printf_i+0x1ac>
 80047c6:	07d9      	lsls	r1, r3, #31
 80047c8:	bf44      	itt	mi
 80047ca:	f043 0320 	orrmi.w	r3, r3, #32
 80047ce:	6023      	strmi	r3, [r4, #0]
 80047d0:	b91d      	cbnz	r5, 80047da <_printf_i+0x196>
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	f023 0320 	bic.w	r3, r3, #32
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	2310      	movs	r3, #16
 80047dc:	e7b0      	b.n	8004740 <_printf_i+0xfc>
 80047de:	6823      	ldr	r3, [r4, #0]
 80047e0:	f043 0320 	orr.w	r3, r3, #32
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	2378      	movs	r3, #120	; 0x78
 80047e8:	4828      	ldr	r0, [pc, #160]	; (800488c <_printf_i+0x248>)
 80047ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80047ee:	e7e3      	b.n	80047b8 <_printf_i+0x174>
 80047f0:	065e      	lsls	r6, r3, #25
 80047f2:	bf48      	it	mi
 80047f4:	b2ad      	uxthmi	r5, r5
 80047f6:	e7e6      	b.n	80047c6 <_printf_i+0x182>
 80047f8:	4616      	mov	r6, r2
 80047fa:	e7bb      	b.n	8004774 <_printf_i+0x130>
 80047fc:	680b      	ldr	r3, [r1, #0]
 80047fe:	6826      	ldr	r6, [r4, #0]
 8004800:	6960      	ldr	r0, [r4, #20]
 8004802:	1d1d      	adds	r5, r3, #4
 8004804:	600d      	str	r5, [r1, #0]
 8004806:	0635      	lsls	r5, r6, #24
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	d501      	bpl.n	8004810 <_printf_i+0x1cc>
 800480c:	6018      	str	r0, [r3, #0]
 800480e:	e002      	b.n	8004816 <_printf_i+0x1d2>
 8004810:	0671      	lsls	r1, r6, #25
 8004812:	d5fb      	bpl.n	800480c <_printf_i+0x1c8>
 8004814:	8018      	strh	r0, [r3, #0]
 8004816:	2300      	movs	r3, #0
 8004818:	6123      	str	r3, [r4, #16]
 800481a:	4616      	mov	r6, r2
 800481c:	e7ba      	b.n	8004794 <_printf_i+0x150>
 800481e:	680b      	ldr	r3, [r1, #0]
 8004820:	1d1a      	adds	r2, r3, #4
 8004822:	600a      	str	r2, [r1, #0]
 8004824:	681e      	ldr	r6, [r3, #0]
 8004826:	6862      	ldr	r2, [r4, #4]
 8004828:	2100      	movs	r1, #0
 800482a:	4630      	mov	r0, r6
 800482c:	f7fb fce0 	bl	80001f0 <memchr>
 8004830:	b108      	cbz	r0, 8004836 <_printf_i+0x1f2>
 8004832:	1b80      	subs	r0, r0, r6
 8004834:	6060      	str	r0, [r4, #4]
 8004836:	6863      	ldr	r3, [r4, #4]
 8004838:	6123      	str	r3, [r4, #16]
 800483a:	2300      	movs	r3, #0
 800483c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004840:	e7a8      	b.n	8004794 <_printf_i+0x150>
 8004842:	6923      	ldr	r3, [r4, #16]
 8004844:	4632      	mov	r2, r6
 8004846:	4649      	mov	r1, r9
 8004848:	4640      	mov	r0, r8
 800484a:	47d0      	blx	sl
 800484c:	3001      	adds	r0, #1
 800484e:	d0ab      	beq.n	80047a8 <_printf_i+0x164>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	079b      	lsls	r3, r3, #30
 8004854:	d413      	bmi.n	800487e <_printf_i+0x23a>
 8004856:	68e0      	ldr	r0, [r4, #12]
 8004858:	9b03      	ldr	r3, [sp, #12]
 800485a:	4298      	cmp	r0, r3
 800485c:	bfb8      	it	lt
 800485e:	4618      	movlt	r0, r3
 8004860:	e7a4      	b.n	80047ac <_printf_i+0x168>
 8004862:	2301      	movs	r3, #1
 8004864:	4632      	mov	r2, r6
 8004866:	4649      	mov	r1, r9
 8004868:	4640      	mov	r0, r8
 800486a:	47d0      	blx	sl
 800486c:	3001      	adds	r0, #1
 800486e:	d09b      	beq.n	80047a8 <_printf_i+0x164>
 8004870:	3501      	adds	r5, #1
 8004872:	68e3      	ldr	r3, [r4, #12]
 8004874:	9903      	ldr	r1, [sp, #12]
 8004876:	1a5b      	subs	r3, r3, r1
 8004878:	42ab      	cmp	r3, r5
 800487a:	dcf2      	bgt.n	8004862 <_printf_i+0x21e>
 800487c:	e7eb      	b.n	8004856 <_printf_i+0x212>
 800487e:	2500      	movs	r5, #0
 8004880:	f104 0619 	add.w	r6, r4, #25
 8004884:	e7f5      	b.n	8004872 <_printf_i+0x22e>
 8004886:	bf00      	nop
 8004888:	0800535a 	.word	0x0800535a
 800488c:	0800536b 	.word	0x0800536b

08004890 <_sbrk_r>:
 8004890:	b538      	push	{r3, r4, r5, lr}
 8004892:	4d06      	ldr	r5, [pc, #24]	; (80048ac <_sbrk_r+0x1c>)
 8004894:	2300      	movs	r3, #0
 8004896:	4604      	mov	r4, r0
 8004898:	4608      	mov	r0, r1
 800489a:	602b      	str	r3, [r5, #0]
 800489c:	f7fc fe04 	bl	80014a8 <_sbrk>
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	d102      	bne.n	80048aa <_sbrk_r+0x1a>
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	b103      	cbz	r3, 80048aa <_sbrk_r+0x1a>
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	bd38      	pop	{r3, r4, r5, pc}
 80048ac:	20000238 	.word	0x20000238

080048b0 <__swbuf_r>:
 80048b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b2:	460e      	mov	r6, r1
 80048b4:	4614      	mov	r4, r2
 80048b6:	4605      	mov	r5, r0
 80048b8:	b118      	cbz	r0, 80048c2 <__swbuf_r+0x12>
 80048ba:	6983      	ldr	r3, [r0, #24]
 80048bc:	b90b      	cbnz	r3, 80048c2 <__swbuf_r+0x12>
 80048be:	f000 f9d9 	bl	8004c74 <__sinit>
 80048c2:	4b21      	ldr	r3, [pc, #132]	; (8004948 <__swbuf_r+0x98>)
 80048c4:	429c      	cmp	r4, r3
 80048c6:	d12b      	bne.n	8004920 <__swbuf_r+0x70>
 80048c8:	686c      	ldr	r4, [r5, #4]
 80048ca:	69a3      	ldr	r3, [r4, #24]
 80048cc:	60a3      	str	r3, [r4, #8]
 80048ce:	89a3      	ldrh	r3, [r4, #12]
 80048d0:	071a      	lsls	r2, r3, #28
 80048d2:	d52f      	bpl.n	8004934 <__swbuf_r+0x84>
 80048d4:	6923      	ldr	r3, [r4, #16]
 80048d6:	b36b      	cbz	r3, 8004934 <__swbuf_r+0x84>
 80048d8:	6923      	ldr	r3, [r4, #16]
 80048da:	6820      	ldr	r0, [r4, #0]
 80048dc:	1ac0      	subs	r0, r0, r3
 80048de:	6963      	ldr	r3, [r4, #20]
 80048e0:	b2f6      	uxtb	r6, r6
 80048e2:	4283      	cmp	r3, r0
 80048e4:	4637      	mov	r7, r6
 80048e6:	dc04      	bgt.n	80048f2 <__swbuf_r+0x42>
 80048e8:	4621      	mov	r1, r4
 80048ea:	4628      	mov	r0, r5
 80048ec:	f000 f92e 	bl	8004b4c <_fflush_r>
 80048f0:	bb30      	cbnz	r0, 8004940 <__swbuf_r+0x90>
 80048f2:	68a3      	ldr	r3, [r4, #8]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	60a3      	str	r3, [r4, #8]
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	6022      	str	r2, [r4, #0]
 80048fe:	701e      	strb	r6, [r3, #0]
 8004900:	6963      	ldr	r3, [r4, #20]
 8004902:	3001      	adds	r0, #1
 8004904:	4283      	cmp	r3, r0
 8004906:	d004      	beq.n	8004912 <__swbuf_r+0x62>
 8004908:	89a3      	ldrh	r3, [r4, #12]
 800490a:	07db      	lsls	r3, r3, #31
 800490c:	d506      	bpl.n	800491c <__swbuf_r+0x6c>
 800490e:	2e0a      	cmp	r6, #10
 8004910:	d104      	bne.n	800491c <__swbuf_r+0x6c>
 8004912:	4621      	mov	r1, r4
 8004914:	4628      	mov	r0, r5
 8004916:	f000 f919 	bl	8004b4c <_fflush_r>
 800491a:	b988      	cbnz	r0, 8004940 <__swbuf_r+0x90>
 800491c:	4638      	mov	r0, r7
 800491e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004920:	4b0a      	ldr	r3, [pc, #40]	; (800494c <__swbuf_r+0x9c>)
 8004922:	429c      	cmp	r4, r3
 8004924:	d101      	bne.n	800492a <__swbuf_r+0x7a>
 8004926:	68ac      	ldr	r4, [r5, #8]
 8004928:	e7cf      	b.n	80048ca <__swbuf_r+0x1a>
 800492a:	4b09      	ldr	r3, [pc, #36]	; (8004950 <__swbuf_r+0xa0>)
 800492c:	429c      	cmp	r4, r3
 800492e:	bf08      	it	eq
 8004930:	68ec      	ldreq	r4, [r5, #12]
 8004932:	e7ca      	b.n	80048ca <__swbuf_r+0x1a>
 8004934:	4621      	mov	r1, r4
 8004936:	4628      	mov	r0, r5
 8004938:	f000 f80c 	bl	8004954 <__swsetup_r>
 800493c:	2800      	cmp	r0, #0
 800493e:	d0cb      	beq.n	80048d8 <__swbuf_r+0x28>
 8004940:	f04f 37ff 	mov.w	r7, #4294967295
 8004944:	e7ea      	b.n	800491c <__swbuf_r+0x6c>
 8004946:	bf00      	nop
 8004948:	0800539c 	.word	0x0800539c
 800494c:	080053bc 	.word	0x080053bc
 8004950:	0800537c 	.word	0x0800537c

08004954 <__swsetup_r>:
 8004954:	4b32      	ldr	r3, [pc, #200]	; (8004a20 <__swsetup_r+0xcc>)
 8004956:	b570      	push	{r4, r5, r6, lr}
 8004958:	681d      	ldr	r5, [r3, #0]
 800495a:	4606      	mov	r6, r0
 800495c:	460c      	mov	r4, r1
 800495e:	b125      	cbz	r5, 800496a <__swsetup_r+0x16>
 8004960:	69ab      	ldr	r3, [r5, #24]
 8004962:	b913      	cbnz	r3, 800496a <__swsetup_r+0x16>
 8004964:	4628      	mov	r0, r5
 8004966:	f000 f985 	bl	8004c74 <__sinit>
 800496a:	4b2e      	ldr	r3, [pc, #184]	; (8004a24 <__swsetup_r+0xd0>)
 800496c:	429c      	cmp	r4, r3
 800496e:	d10f      	bne.n	8004990 <__swsetup_r+0x3c>
 8004970:	686c      	ldr	r4, [r5, #4]
 8004972:	89a3      	ldrh	r3, [r4, #12]
 8004974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004978:	0719      	lsls	r1, r3, #28
 800497a:	d42c      	bmi.n	80049d6 <__swsetup_r+0x82>
 800497c:	06dd      	lsls	r5, r3, #27
 800497e:	d411      	bmi.n	80049a4 <__swsetup_r+0x50>
 8004980:	2309      	movs	r3, #9
 8004982:	6033      	str	r3, [r6, #0]
 8004984:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004988:	81a3      	strh	r3, [r4, #12]
 800498a:	f04f 30ff 	mov.w	r0, #4294967295
 800498e:	e03e      	b.n	8004a0e <__swsetup_r+0xba>
 8004990:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <__swsetup_r+0xd4>)
 8004992:	429c      	cmp	r4, r3
 8004994:	d101      	bne.n	800499a <__swsetup_r+0x46>
 8004996:	68ac      	ldr	r4, [r5, #8]
 8004998:	e7eb      	b.n	8004972 <__swsetup_r+0x1e>
 800499a:	4b24      	ldr	r3, [pc, #144]	; (8004a2c <__swsetup_r+0xd8>)
 800499c:	429c      	cmp	r4, r3
 800499e:	bf08      	it	eq
 80049a0:	68ec      	ldreq	r4, [r5, #12]
 80049a2:	e7e6      	b.n	8004972 <__swsetup_r+0x1e>
 80049a4:	0758      	lsls	r0, r3, #29
 80049a6:	d512      	bpl.n	80049ce <__swsetup_r+0x7a>
 80049a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80049aa:	b141      	cbz	r1, 80049be <__swsetup_r+0x6a>
 80049ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80049b0:	4299      	cmp	r1, r3
 80049b2:	d002      	beq.n	80049ba <__swsetup_r+0x66>
 80049b4:	4630      	mov	r0, r6
 80049b6:	f7ff fbd3 	bl	8004160 <_free_r>
 80049ba:	2300      	movs	r3, #0
 80049bc:	6363      	str	r3, [r4, #52]	; 0x34
 80049be:	89a3      	ldrh	r3, [r4, #12]
 80049c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80049c4:	81a3      	strh	r3, [r4, #12]
 80049c6:	2300      	movs	r3, #0
 80049c8:	6063      	str	r3, [r4, #4]
 80049ca:	6923      	ldr	r3, [r4, #16]
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	89a3      	ldrh	r3, [r4, #12]
 80049d0:	f043 0308 	orr.w	r3, r3, #8
 80049d4:	81a3      	strh	r3, [r4, #12]
 80049d6:	6923      	ldr	r3, [r4, #16]
 80049d8:	b94b      	cbnz	r3, 80049ee <__swsetup_r+0x9a>
 80049da:	89a3      	ldrh	r3, [r4, #12]
 80049dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e4:	d003      	beq.n	80049ee <__swsetup_r+0x9a>
 80049e6:	4621      	mov	r1, r4
 80049e8:	4630      	mov	r0, r6
 80049ea:	f000 fa07 	bl	8004dfc <__smakebuf_r>
 80049ee:	89a0      	ldrh	r0, [r4, #12]
 80049f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049f4:	f010 0301 	ands.w	r3, r0, #1
 80049f8:	d00a      	beq.n	8004a10 <__swsetup_r+0xbc>
 80049fa:	2300      	movs	r3, #0
 80049fc:	60a3      	str	r3, [r4, #8]
 80049fe:	6963      	ldr	r3, [r4, #20]
 8004a00:	425b      	negs	r3, r3
 8004a02:	61a3      	str	r3, [r4, #24]
 8004a04:	6923      	ldr	r3, [r4, #16]
 8004a06:	b943      	cbnz	r3, 8004a1a <__swsetup_r+0xc6>
 8004a08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004a0c:	d1ba      	bne.n	8004984 <__swsetup_r+0x30>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	0781      	lsls	r1, r0, #30
 8004a12:	bf58      	it	pl
 8004a14:	6963      	ldrpl	r3, [r4, #20]
 8004a16:	60a3      	str	r3, [r4, #8]
 8004a18:	e7f4      	b.n	8004a04 <__swsetup_r+0xb0>
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	e7f7      	b.n	8004a0e <__swsetup_r+0xba>
 8004a1e:	bf00      	nop
 8004a20:	20000034 	.word	0x20000034
 8004a24:	0800539c 	.word	0x0800539c
 8004a28:	080053bc 	.word	0x080053bc
 8004a2c:	0800537c 	.word	0x0800537c

08004a30 <abort>:
 8004a30:	b508      	push	{r3, lr}
 8004a32:	2006      	movs	r0, #6
 8004a34:	f000 fa56 	bl	8004ee4 <raise>
 8004a38:	2001      	movs	r0, #1
 8004a3a:	f7fc fcbd 	bl	80013b8 <_exit>
	...

08004a40 <__sflush_r>:
 8004a40:	898a      	ldrh	r2, [r1, #12]
 8004a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a46:	4605      	mov	r5, r0
 8004a48:	0710      	lsls	r0, r2, #28
 8004a4a:	460c      	mov	r4, r1
 8004a4c:	d458      	bmi.n	8004b00 <__sflush_r+0xc0>
 8004a4e:	684b      	ldr	r3, [r1, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	dc05      	bgt.n	8004a60 <__sflush_r+0x20>
 8004a54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	dc02      	bgt.n	8004a60 <__sflush_r+0x20>
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a62:	2e00      	cmp	r6, #0
 8004a64:	d0f9      	beq.n	8004a5a <__sflush_r+0x1a>
 8004a66:	2300      	movs	r3, #0
 8004a68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a6c:	682f      	ldr	r7, [r5, #0]
 8004a6e:	602b      	str	r3, [r5, #0]
 8004a70:	d032      	beq.n	8004ad8 <__sflush_r+0x98>
 8004a72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	075a      	lsls	r2, r3, #29
 8004a78:	d505      	bpl.n	8004a86 <__sflush_r+0x46>
 8004a7a:	6863      	ldr	r3, [r4, #4]
 8004a7c:	1ac0      	subs	r0, r0, r3
 8004a7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a80:	b10b      	cbz	r3, 8004a86 <__sflush_r+0x46>
 8004a82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a84:	1ac0      	subs	r0, r0, r3
 8004a86:	2300      	movs	r3, #0
 8004a88:	4602      	mov	r2, r0
 8004a8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a8c:	6a21      	ldr	r1, [r4, #32]
 8004a8e:	4628      	mov	r0, r5
 8004a90:	47b0      	blx	r6
 8004a92:	1c43      	adds	r3, r0, #1
 8004a94:	89a3      	ldrh	r3, [r4, #12]
 8004a96:	d106      	bne.n	8004aa6 <__sflush_r+0x66>
 8004a98:	6829      	ldr	r1, [r5, #0]
 8004a9a:	291d      	cmp	r1, #29
 8004a9c:	d82c      	bhi.n	8004af8 <__sflush_r+0xb8>
 8004a9e:	4a2a      	ldr	r2, [pc, #168]	; (8004b48 <__sflush_r+0x108>)
 8004aa0:	40ca      	lsrs	r2, r1
 8004aa2:	07d6      	lsls	r6, r2, #31
 8004aa4:	d528      	bpl.n	8004af8 <__sflush_r+0xb8>
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	6062      	str	r2, [r4, #4]
 8004aaa:	04d9      	lsls	r1, r3, #19
 8004aac:	6922      	ldr	r2, [r4, #16]
 8004aae:	6022      	str	r2, [r4, #0]
 8004ab0:	d504      	bpl.n	8004abc <__sflush_r+0x7c>
 8004ab2:	1c42      	adds	r2, r0, #1
 8004ab4:	d101      	bne.n	8004aba <__sflush_r+0x7a>
 8004ab6:	682b      	ldr	r3, [r5, #0]
 8004ab8:	b903      	cbnz	r3, 8004abc <__sflush_r+0x7c>
 8004aba:	6560      	str	r0, [r4, #84]	; 0x54
 8004abc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004abe:	602f      	str	r7, [r5, #0]
 8004ac0:	2900      	cmp	r1, #0
 8004ac2:	d0ca      	beq.n	8004a5a <__sflush_r+0x1a>
 8004ac4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ac8:	4299      	cmp	r1, r3
 8004aca:	d002      	beq.n	8004ad2 <__sflush_r+0x92>
 8004acc:	4628      	mov	r0, r5
 8004ace:	f7ff fb47 	bl	8004160 <_free_r>
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	6360      	str	r0, [r4, #52]	; 0x34
 8004ad6:	e7c1      	b.n	8004a5c <__sflush_r+0x1c>
 8004ad8:	6a21      	ldr	r1, [r4, #32]
 8004ada:	2301      	movs	r3, #1
 8004adc:	4628      	mov	r0, r5
 8004ade:	47b0      	blx	r6
 8004ae0:	1c41      	adds	r1, r0, #1
 8004ae2:	d1c7      	bne.n	8004a74 <__sflush_r+0x34>
 8004ae4:	682b      	ldr	r3, [r5, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0c4      	beq.n	8004a74 <__sflush_r+0x34>
 8004aea:	2b1d      	cmp	r3, #29
 8004aec:	d001      	beq.n	8004af2 <__sflush_r+0xb2>
 8004aee:	2b16      	cmp	r3, #22
 8004af0:	d101      	bne.n	8004af6 <__sflush_r+0xb6>
 8004af2:	602f      	str	r7, [r5, #0]
 8004af4:	e7b1      	b.n	8004a5a <__sflush_r+0x1a>
 8004af6:	89a3      	ldrh	r3, [r4, #12]
 8004af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004afc:	81a3      	strh	r3, [r4, #12]
 8004afe:	e7ad      	b.n	8004a5c <__sflush_r+0x1c>
 8004b00:	690f      	ldr	r7, [r1, #16]
 8004b02:	2f00      	cmp	r7, #0
 8004b04:	d0a9      	beq.n	8004a5a <__sflush_r+0x1a>
 8004b06:	0793      	lsls	r3, r2, #30
 8004b08:	680e      	ldr	r6, [r1, #0]
 8004b0a:	bf08      	it	eq
 8004b0c:	694b      	ldreq	r3, [r1, #20]
 8004b0e:	600f      	str	r7, [r1, #0]
 8004b10:	bf18      	it	ne
 8004b12:	2300      	movne	r3, #0
 8004b14:	eba6 0807 	sub.w	r8, r6, r7
 8004b18:	608b      	str	r3, [r1, #8]
 8004b1a:	f1b8 0f00 	cmp.w	r8, #0
 8004b1e:	dd9c      	ble.n	8004a5a <__sflush_r+0x1a>
 8004b20:	6a21      	ldr	r1, [r4, #32]
 8004b22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b24:	4643      	mov	r3, r8
 8004b26:	463a      	mov	r2, r7
 8004b28:	4628      	mov	r0, r5
 8004b2a:	47b0      	blx	r6
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	dc06      	bgt.n	8004b3e <__sflush_r+0xfe>
 8004b30:	89a3      	ldrh	r3, [r4, #12]
 8004b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b36:	81a3      	strh	r3, [r4, #12]
 8004b38:	f04f 30ff 	mov.w	r0, #4294967295
 8004b3c:	e78e      	b.n	8004a5c <__sflush_r+0x1c>
 8004b3e:	4407      	add	r7, r0
 8004b40:	eba8 0800 	sub.w	r8, r8, r0
 8004b44:	e7e9      	b.n	8004b1a <__sflush_r+0xda>
 8004b46:	bf00      	nop
 8004b48:	20400001 	.word	0x20400001

08004b4c <_fflush_r>:
 8004b4c:	b538      	push	{r3, r4, r5, lr}
 8004b4e:	690b      	ldr	r3, [r1, #16]
 8004b50:	4605      	mov	r5, r0
 8004b52:	460c      	mov	r4, r1
 8004b54:	b913      	cbnz	r3, 8004b5c <_fflush_r+0x10>
 8004b56:	2500      	movs	r5, #0
 8004b58:	4628      	mov	r0, r5
 8004b5a:	bd38      	pop	{r3, r4, r5, pc}
 8004b5c:	b118      	cbz	r0, 8004b66 <_fflush_r+0x1a>
 8004b5e:	6983      	ldr	r3, [r0, #24]
 8004b60:	b90b      	cbnz	r3, 8004b66 <_fflush_r+0x1a>
 8004b62:	f000 f887 	bl	8004c74 <__sinit>
 8004b66:	4b14      	ldr	r3, [pc, #80]	; (8004bb8 <_fflush_r+0x6c>)
 8004b68:	429c      	cmp	r4, r3
 8004b6a:	d11b      	bne.n	8004ba4 <_fflush_r+0x58>
 8004b6c:	686c      	ldr	r4, [r5, #4]
 8004b6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0ef      	beq.n	8004b56 <_fflush_r+0xa>
 8004b76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b78:	07d0      	lsls	r0, r2, #31
 8004b7a:	d404      	bmi.n	8004b86 <_fflush_r+0x3a>
 8004b7c:	0599      	lsls	r1, r3, #22
 8004b7e:	d402      	bmi.n	8004b86 <_fflush_r+0x3a>
 8004b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b82:	f000 f915 	bl	8004db0 <__retarget_lock_acquire_recursive>
 8004b86:	4628      	mov	r0, r5
 8004b88:	4621      	mov	r1, r4
 8004b8a:	f7ff ff59 	bl	8004a40 <__sflush_r>
 8004b8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b90:	07da      	lsls	r2, r3, #31
 8004b92:	4605      	mov	r5, r0
 8004b94:	d4e0      	bmi.n	8004b58 <_fflush_r+0xc>
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	059b      	lsls	r3, r3, #22
 8004b9a:	d4dd      	bmi.n	8004b58 <_fflush_r+0xc>
 8004b9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b9e:	f000 f908 	bl	8004db2 <__retarget_lock_release_recursive>
 8004ba2:	e7d9      	b.n	8004b58 <_fflush_r+0xc>
 8004ba4:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <_fflush_r+0x70>)
 8004ba6:	429c      	cmp	r4, r3
 8004ba8:	d101      	bne.n	8004bae <_fflush_r+0x62>
 8004baa:	68ac      	ldr	r4, [r5, #8]
 8004bac:	e7df      	b.n	8004b6e <_fflush_r+0x22>
 8004bae:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <_fflush_r+0x74>)
 8004bb0:	429c      	cmp	r4, r3
 8004bb2:	bf08      	it	eq
 8004bb4:	68ec      	ldreq	r4, [r5, #12]
 8004bb6:	e7da      	b.n	8004b6e <_fflush_r+0x22>
 8004bb8:	0800539c 	.word	0x0800539c
 8004bbc:	080053bc 	.word	0x080053bc
 8004bc0:	0800537c 	.word	0x0800537c

08004bc4 <std>:
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	b510      	push	{r4, lr}
 8004bc8:	4604      	mov	r4, r0
 8004bca:	e9c0 3300 	strd	r3, r3, [r0]
 8004bce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bd2:	6083      	str	r3, [r0, #8]
 8004bd4:	8181      	strh	r1, [r0, #12]
 8004bd6:	6643      	str	r3, [r0, #100]	; 0x64
 8004bd8:	81c2      	strh	r2, [r0, #14]
 8004bda:	6183      	str	r3, [r0, #24]
 8004bdc:	4619      	mov	r1, r3
 8004bde:	2208      	movs	r2, #8
 8004be0:	305c      	adds	r0, #92	; 0x5c
 8004be2:	f7ff f993 	bl	8003f0c <memset>
 8004be6:	4b05      	ldr	r3, [pc, #20]	; (8004bfc <std+0x38>)
 8004be8:	6263      	str	r3, [r4, #36]	; 0x24
 8004bea:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <std+0x3c>)
 8004bec:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bee:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <std+0x40>)
 8004bf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bf2:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <std+0x44>)
 8004bf4:	6224      	str	r4, [r4, #32]
 8004bf6:	6323      	str	r3, [r4, #48]	; 0x30
 8004bf8:	bd10      	pop	{r4, pc}
 8004bfa:	bf00      	nop
 8004bfc:	08004f1d 	.word	0x08004f1d
 8004c00:	08004f3f 	.word	0x08004f3f
 8004c04:	08004f77 	.word	0x08004f77
 8004c08:	08004f9b 	.word	0x08004f9b

08004c0c <_cleanup_r>:
 8004c0c:	4901      	ldr	r1, [pc, #4]	; (8004c14 <_cleanup_r+0x8>)
 8004c0e:	f000 b8af 	b.w	8004d70 <_fwalk_reent>
 8004c12:	bf00      	nop
 8004c14:	08004b4d 	.word	0x08004b4d

08004c18 <__sfmoreglue>:
 8004c18:	b570      	push	{r4, r5, r6, lr}
 8004c1a:	1e4a      	subs	r2, r1, #1
 8004c1c:	2568      	movs	r5, #104	; 0x68
 8004c1e:	4355      	muls	r5, r2
 8004c20:	460e      	mov	r6, r1
 8004c22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c26:	f7ff faeb 	bl	8004200 <_malloc_r>
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	b140      	cbz	r0, 8004c40 <__sfmoreglue+0x28>
 8004c2e:	2100      	movs	r1, #0
 8004c30:	e9c0 1600 	strd	r1, r6, [r0]
 8004c34:	300c      	adds	r0, #12
 8004c36:	60a0      	str	r0, [r4, #8]
 8004c38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c3c:	f7ff f966 	bl	8003f0c <memset>
 8004c40:	4620      	mov	r0, r4
 8004c42:	bd70      	pop	{r4, r5, r6, pc}

08004c44 <__sfp_lock_acquire>:
 8004c44:	4801      	ldr	r0, [pc, #4]	; (8004c4c <__sfp_lock_acquire+0x8>)
 8004c46:	f000 b8b3 	b.w	8004db0 <__retarget_lock_acquire_recursive>
 8004c4a:	bf00      	nop
 8004c4c:	20000234 	.word	0x20000234

08004c50 <__sfp_lock_release>:
 8004c50:	4801      	ldr	r0, [pc, #4]	; (8004c58 <__sfp_lock_release+0x8>)
 8004c52:	f000 b8ae 	b.w	8004db2 <__retarget_lock_release_recursive>
 8004c56:	bf00      	nop
 8004c58:	20000234 	.word	0x20000234

08004c5c <__sinit_lock_acquire>:
 8004c5c:	4801      	ldr	r0, [pc, #4]	; (8004c64 <__sinit_lock_acquire+0x8>)
 8004c5e:	f000 b8a7 	b.w	8004db0 <__retarget_lock_acquire_recursive>
 8004c62:	bf00      	nop
 8004c64:	2000022f 	.word	0x2000022f

08004c68 <__sinit_lock_release>:
 8004c68:	4801      	ldr	r0, [pc, #4]	; (8004c70 <__sinit_lock_release+0x8>)
 8004c6a:	f000 b8a2 	b.w	8004db2 <__retarget_lock_release_recursive>
 8004c6e:	bf00      	nop
 8004c70:	2000022f 	.word	0x2000022f

08004c74 <__sinit>:
 8004c74:	b510      	push	{r4, lr}
 8004c76:	4604      	mov	r4, r0
 8004c78:	f7ff fff0 	bl	8004c5c <__sinit_lock_acquire>
 8004c7c:	69a3      	ldr	r3, [r4, #24]
 8004c7e:	b11b      	cbz	r3, 8004c88 <__sinit+0x14>
 8004c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c84:	f7ff bff0 	b.w	8004c68 <__sinit_lock_release>
 8004c88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004c8c:	6523      	str	r3, [r4, #80]	; 0x50
 8004c8e:	4b13      	ldr	r3, [pc, #76]	; (8004cdc <__sinit+0x68>)
 8004c90:	4a13      	ldr	r2, [pc, #76]	; (8004ce0 <__sinit+0x6c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	62a2      	str	r2, [r4, #40]	; 0x28
 8004c96:	42a3      	cmp	r3, r4
 8004c98:	bf04      	itt	eq
 8004c9a:	2301      	moveq	r3, #1
 8004c9c:	61a3      	streq	r3, [r4, #24]
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f000 f820 	bl	8004ce4 <__sfp>
 8004ca4:	6060      	str	r0, [r4, #4]
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	f000 f81c 	bl	8004ce4 <__sfp>
 8004cac:	60a0      	str	r0, [r4, #8]
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f000 f818 	bl	8004ce4 <__sfp>
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	60e0      	str	r0, [r4, #12]
 8004cb8:	2104      	movs	r1, #4
 8004cba:	6860      	ldr	r0, [r4, #4]
 8004cbc:	f7ff ff82 	bl	8004bc4 <std>
 8004cc0:	68a0      	ldr	r0, [r4, #8]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	2109      	movs	r1, #9
 8004cc6:	f7ff ff7d 	bl	8004bc4 <std>
 8004cca:	68e0      	ldr	r0, [r4, #12]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	2112      	movs	r1, #18
 8004cd0:	f7ff ff78 	bl	8004bc4 <std>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	61a3      	str	r3, [r4, #24]
 8004cd8:	e7d2      	b.n	8004c80 <__sinit+0xc>
 8004cda:	bf00      	nop
 8004cdc:	08005190 	.word	0x08005190
 8004ce0:	08004c0d 	.word	0x08004c0d

08004ce4 <__sfp>:
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	4607      	mov	r7, r0
 8004ce8:	f7ff ffac 	bl	8004c44 <__sfp_lock_acquire>
 8004cec:	4b1e      	ldr	r3, [pc, #120]	; (8004d68 <__sfp+0x84>)
 8004cee:	681e      	ldr	r6, [r3, #0]
 8004cf0:	69b3      	ldr	r3, [r6, #24]
 8004cf2:	b913      	cbnz	r3, 8004cfa <__sfp+0x16>
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	f7ff ffbd 	bl	8004c74 <__sinit>
 8004cfa:	3648      	adds	r6, #72	; 0x48
 8004cfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	d503      	bpl.n	8004d0c <__sfp+0x28>
 8004d04:	6833      	ldr	r3, [r6, #0]
 8004d06:	b30b      	cbz	r3, 8004d4c <__sfp+0x68>
 8004d08:	6836      	ldr	r6, [r6, #0]
 8004d0a:	e7f7      	b.n	8004cfc <__sfp+0x18>
 8004d0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d10:	b9d5      	cbnz	r5, 8004d48 <__sfp+0x64>
 8004d12:	4b16      	ldr	r3, [pc, #88]	; (8004d6c <__sfp+0x88>)
 8004d14:	60e3      	str	r3, [r4, #12]
 8004d16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d1a:	6665      	str	r5, [r4, #100]	; 0x64
 8004d1c:	f000 f847 	bl	8004dae <__retarget_lock_init_recursive>
 8004d20:	f7ff ff96 	bl	8004c50 <__sfp_lock_release>
 8004d24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d2c:	6025      	str	r5, [r4, #0]
 8004d2e:	61a5      	str	r5, [r4, #24]
 8004d30:	2208      	movs	r2, #8
 8004d32:	4629      	mov	r1, r5
 8004d34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d38:	f7ff f8e8 	bl	8003f0c <memset>
 8004d3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d44:	4620      	mov	r0, r4
 8004d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d48:	3468      	adds	r4, #104	; 0x68
 8004d4a:	e7d9      	b.n	8004d00 <__sfp+0x1c>
 8004d4c:	2104      	movs	r1, #4
 8004d4e:	4638      	mov	r0, r7
 8004d50:	f7ff ff62 	bl	8004c18 <__sfmoreglue>
 8004d54:	4604      	mov	r4, r0
 8004d56:	6030      	str	r0, [r6, #0]
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d1d5      	bne.n	8004d08 <__sfp+0x24>
 8004d5c:	f7ff ff78 	bl	8004c50 <__sfp_lock_release>
 8004d60:	230c      	movs	r3, #12
 8004d62:	603b      	str	r3, [r7, #0]
 8004d64:	e7ee      	b.n	8004d44 <__sfp+0x60>
 8004d66:	bf00      	nop
 8004d68:	08005190 	.word	0x08005190
 8004d6c:	ffff0001 	.word	0xffff0001

08004d70 <_fwalk_reent>:
 8004d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d74:	4606      	mov	r6, r0
 8004d76:	4688      	mov	r8, r1
 8004d78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004d7c:	2700      	movs	r7, #0
 8004d7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d82:	f1b9 0901 	subs.w	r9, r9, #1
 8004d86:	d505      	bpl.n	8004d94 <_fwalk_reent+0x24>
 8004d88:	6824      	ldr	r4, [r4, #0]
 8004d8a:	2c00      	cmp	r4, #0
 8004d8c:	d1f7      	bne.n	8004d7e <_fwalk_reent+0xe>
 8004d8e:	4638      	mov	r0, r7
 8004d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d94:	89ab      	ldrh	r3, [r5, #12]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d907      	bls.n	8004daa <_fwalk_reent+0x3a>
 8004d9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	d003      	beq.n	8004daa <_fwalk_reent+0x3a>
 8004da2:	4629      	mov	r1, r5
 8004da4:	4630      	mov	r0, r6
 8004da6:	47c0      	blx	r8
 8004da8:	4307      	orrs	r7, r0
 8004daa:	3568      	adds	r5, #104	; 0x68
 8004dac:	e7e9      	b.n	8004d82 <_fwalk_reent+0x12>

08004dae <__retarget_lock_init_recursive>:
 8004dae:	4770      	bx	lr

08004db0 <__retarget_lock_acquire_recursive>:
 8004db0:	4770      	bx	lr

08004db2 <__retarget_lock_release_recursive>:
 8004db2:	4770      	bx	lr

08004db4 <__swhatbuf_r>:
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	460e      	mov	r6, r1
 8004db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dbc:	2900      	cmp	r1, #0
 8004dbe:	b096      	sub	sp, #88	; 0x58
 8004dc0:	4614      	mov	r4, r2
 8004dc2:	461d      	mov	r5, r3
 8004dc4:	da07      	bge.n	8004dd6 <__swhatbuf_r+0x22>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	602b      	str	r3, [r5, #0]
 8004dca:	89b3      	ldrh	r3, [r6, #12]
 8004dcc:	061a      	lsls	r2, r3, #24
 8004dce:	d410      	bmi.n	8004df2 <__swhatbuf_r+0x3e>
 8004dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dd4:	e00e      	b.n	8004df4 <__swhatbuf_r+0x40>
 8004dd6:	466a      	mov	r2, sp
 8004dd8:	f000 f906 	bl	8004fe8 <_fstat_r>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	dbf2      	blt.n	8004dc6 <__swhatbuf_r+0x12>
 8004de0:	9a01      	ldr	r2, [sp, #4]
 8004de2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004de6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004dea:	425a      	negs	r2, r3
 8004dec:	415a      	adcs	r2, r3
 8004dee:	602a      	str	r2, [r5, #0]
 8004df0:	e7ee      	b.n	8004dd0 <__swhatbuf_r+0x1c>
 8004df2:	2340      	movs	r3, #64	; 0x40
 8004df4:	2000      	movs	r0, #0
 8004df6:	6023      	str	r3, [r4, #0]
 8004df8:	b016      	add	sp, #88	; 0x58
 8004dfa:	bd70      	pop	{r4, r5, r6, pc}

08004dfc <__smakebuf_r>:
 8004dfc:	898b      	ldrh	r3, [r1, #12]
 8004dfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e00:	079d      	lsls	r5, r3, #30
 8004e02:	4606      	mov	r6, r0
 8004e04:	460c      	mov	r4, r1
 8004e06:	d507      	bpl.n	8004e18 <__smakebuf_r+0x1c>
 8004e08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	6123      	str	r3, [r4, #16]
 8004e10:	2301      	movs	r3, #1
 8004e12:	6163      	str	r3, [r4, #20]
 8004e14:	b002      	add	sp, #8
 8004e16:	bd70      	pop	{r4, r5, r6, pc}
 8004e18:	ab01      	add	r3, sp, #4
 8004e1a:	466a      	mov	r2, sp
 8004e1c:	f7ff ffca 	bl	8004db4 <__swhatbuf_r>
 8004e20:	9900      	ldr	r1, [sp, #0]
 8004e22:	4605      	mov	r5, r0
 8004e24:	4630      	mov	r0, r6
 8004e26:	f7ff f9eb 	bl	8004200 <_malloc_r>
 8004e2a:	b948      	cbnz	r0, 8004e40 <__smakebuf_r+0x44>
 8004e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e30:	059a      	lsls	r2, r3, #22
 8004e32:	d4ef      	bmi.n	8004e14 <__smakebuf_r+0x18>
 8004e34:	f023 0303 	bic.w	r3, r3, #3
 8004e38:	f043 0302 	orr.w	r3, r3, #2
 8004e3c:	81a3      	strh	r3, [r4, #12]
 8004e3e:	e7e3      	b.n	8004e08 <__smakebuf_r+0xc>
 8004e40:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <__smakebuf_r+0x7c>)
 8004e42:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	6020      	str	r0, [r4, #0]
 8004e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e4c:	81a3      	strh	r3, [r4, #12]
 8004e4e:	9b00      	ldr	r3, [sp, #0]
 8004e50:	6163      	str	r3, [r4, #20]
 8004e52:	9b01      	ldr	r3, [sp, #4]
 8004e54:	6120      	str	r0, [r4, #16]
 8004e56:	b15b      	cbz	r3, 8004e70 <__smakebuf_r+0x74>
 8004e58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	f000 f8d5 	bl	800500c <_isatty_r>
 8004e62:	b128      	cbz	r0, 8004e70 <__smakebuf_r+0x74>
 8004e64:	89a3      	ldrh	r3, [r4, #12]
 8004e66:	f023 0303 	bic.w	r3, r3, #3
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	81a3      	strh	r3, [r4, #12]
 8004e70:	89a0      	ldrh	r0, [r4, #12]
 8004e72:	4305      	orrs	r5, r0
 8004e74:	81a5      	strh	r5, [r4, #12]
 8004e76:	e7cd      	b.n	8004e14 <__smakebuf_r+0x18>
 8004e78:	08004c0d 	.word	0x08004c0d

08004e7c <__malloc_lock>:
 8004e7c:	4801      	ldr	r0, [pc, #4]	; (8004e84 <__malloc_lock+0x8>)
 8004e7e:	f7ff bf97 	b.w	8004db0 <__retarget_lock_acquire_recursive>
 8004e82:	bf00      	nop
 8004e84:	20000230 	.word	0x20000230

08004e88 <__malloc_unlock>:
 8004e88:	4801      	ldr	r0, [pc, #4]	; (8004e90 <__malloc_unlock+0x8>)
 8004e8a:	f7ff bf92 	b.w	8004db2 <__retarget_lock_release_recursive>
 8004e8e:	bf00      	nop
 8004e90:	20000230 	.word	0x20000230

08004e94 <_raise_r>:
 8004e94:	291f      	cmp	r1, #31
 8004e96:	b538      	push	{r3, r4, r5, lr}
 8004e98:	4604      	mov	r4, r0
 8004e9a:	460d      	mov	r5, r1
 8004e9c:	d904      	bls.n	8004ea8 <_raise_r+0x14>
 8004e9e:	2316      	movs	r3, #22
 8004ea0:	6003      	str	r3, [r0, #0]
 8004ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea6:	bd38      	pop	{r3, r4, r5, pc}
 8004ea8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004eaa:	b112      	cbz	r2, 8004eb2 <_raise_r+0x1e>
 8004eac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004eb0:	b94b      	cbnz	r3, 8004ec6 <_raise_r+0x32>
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	f000 f830 	bl	8004f18 <_getpid_r>
 8004eb8:	462a      	mov	r2, r5
 8004eba:	4601      	mov	r1, r0
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ec2:	f000 b817 	b.w	8004ef4 <_kill_r>
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d00a      	beq.n	8004ee0 <_raise_r+0x4c>
 8004eca:	1c59      	adds	r1, r3, #1
 8004ecc:	d103      	bne.n	8004ed6 <_raise_r+0x42>
 8004ece:	2316      	movs	r3, #22
 8004ed0:	6003      	str	r3, [r0, #0]
 8004ed2:	2001      	movs	r0, #1
 8004ed4:	e7e7      	b.n	8004ea6 <_raise_r+0x12>
 8004ed6:	2400      	movs	r4, #0
 8004ed8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004edc:	4628      	mov	r0, r5
 8004ede:	4798      	blx	r3
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	e7e0      	b.n	8004ea6 <_raise_r+0x12>

08004ee4 <raise>:
 8004ee4:	4b02      	ldr	r3, [pc, #8]	; (8004ef0 <raise+0xc>)
 8004ee6:	4601      	mov	r1, r0
 8004ee8:	6818      	ldr	r0, [r3, #0]
 8004eea:	f7ff bfd3 	b.w	8004e94 <_raise_r>
 8004eee:	bf00      	nop
 8004ef0:	20000034 	.word	0x20000034

08004ef4 <_kill_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	4d07      	ldr	r5, [pc, #28]	; (8004f14 <_kill_r+0x20>)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	4604      	mov	r4, r0
 8004efc:	4608      	mov	r0, r1
 8004efe:	4611      	mov	r1, r2
 8004f00:	602b      	str	r3, [r5, #0]
 8004f02:	f7fc fa49 	bl	8001398 <_kill>
 8004f06:	1c43      	adds	r3, r0, #1
 8004f08:	d102      	bne.n	8004f10 <_kill_r+0x1c>
 8004f0a:	682b      	ldr	r3, [r5, #0]
 8004f0c:	b103      	cbz	r3, 8004f10 <_kill_r+0x1c>
 8004f0e:	6023      	str	r3, [r4, #0]
 8004f10:	bd38      	pop	{r3, r4, r5, pc}
 8004f12:	bf00      	nop
 8004f14:	20000238 	.word	0x20000238

08004f18 <_getpid_r>:
 8004f18:	f7fc ba36 	b.w	8001388 <_getpid>

08004f1c <__sread>:
 8004f1c:	b510      	push	{r4, lr}
 8004f1e:	460c      	mov	r4, r1
 8004f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f24:	f000 f894 	bl	8005050 <_read_r>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	bfab      	itete	ge
 8004f2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8004f30:	181b      	addge	r3, r3, r0
 8004f32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004f36:	bfac      	ite	ge
 8004f38:	6563      	strge	r3, [r4, #84]	; 0x54
 8004f3a:	81a3      	strhlt	r3, [r4, #12]
 8004f3c:	bd10      	pop	{r4, pc}

08004f3e <__swrite>:
 8004f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f42:	461f      	mov	r7, r3
 8004f44:	898b      	ldrh	r3, [r1, #12]
 8004f46:	05db      	lsls	r3, r3, #23
 8004f48:	4605      	mov	r5, r0
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	4616      	mov	r6, r2
 8004f4e:	d505      	bpl.n	8004f5c <__swrite+0x1e>
 8004f50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f54:	2302      	movs	r3, #2
 8004f56:	2200      	movs	r2, #0
 8004f58:	f000 f868 	bl	800502c <_lseek_r>
 8004f5c:	89a3      	ldrh	r3, [r4, #12]
 8004f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f66:	81a3      	strh	r3, [r4, #12]
 8004f68:	4632      	mov	r2, r6
 8004f6a:	463b      	mov	r3, r7
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f72:	f000 b817 	b.w	8004fa4 <_write_r>

08004f76 <__sseek>:
 8004f76:	b510      	push	{r4, lr}
 8004f78:	460c      	mov	r4, r1
 8004f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f7e:	f000 f855 	bl	800502c <_lseek_r>
 8004f82:	1c43      	adds	r3, r0, #1
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	bf15      	itete	ne
 8004f88:	6560      	strne	r0, [r4, #84]	; 0x54
 8004f8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004f8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004f92:	81a3      	strheq	r3, [r4, #12]
 8004f94:	bf18      	it	ne
 8004f96:	81a3      	strhne	r3, [r4, #12]
 8004f98:	bd10      	pop	{r4, pc}

08004f9a <__sclose>:
 8004f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f9e:	f000 b813 	b.w	8004fc8 <_close_r>
	...

08004fa4 <_write_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	4d07      	ldr	r5, [pc, #28]	; (8004fc4 <_write_r+0x20>)
 8004fa8:	4604      	mov	r4, r0
 8004faa:	4608      	mov	r0, r1
 8004fac:	4611      	mov	r1, r2
 8004fae:	2200      	movs	r2, #0
 8004fb0:	602a      	str	r2, [r5, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f7fc fa27 	bl	8001406 <_write>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_write_r+0x1e>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_write_r+0x1e>
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	20000238 	.word	0x20000238

08004fc8 <_close_r>:
 8004fc8:	b538      	push	{r3, r4, r5, lr}
 8004fca:	4d06      	ldr	r5, [pc, #24]	; (8004fe4 <_close_r+0x1c>)
 8004fcc:	2300      	movs	r3, #0
 8004fce:	4604      	mov	r4, r0
 8004fd0:	4608      	mov	r0, r1
 8004fd2:	602b      	str	r3, [r5, #0]
 8004fd4:	f7fc fa33 	bl	800143e <_close>
 8004fd8:	1c43      	adds	r3, r0, #1
 8004fda:	d102      	bne.n	8004fe2 <_close_r+0x1a>
 8004fdc:	682b      	ldr	r3, [r5, #0]
 8004fde:	b103      	cbz	r3, 8004fe2 <_close_r+0x1a>
 8004fe0:	6023      	str	r3, [r4, #0]
 8004fe2:	bd38      	pop	{r3, r4, r5, pc}
 8004fe4:	20000238 	.word	0x20000238

08004fe8 <_fstat_r>:
 8004fe8:	b538      	push	{r3, r4, r5, lr}
 8004fea:	4d07      	ldr	r5, [pc, #28]	; (8005008 <_fstat_r+0x20>)
 8004fec:	2300      	movs	r3, #0
 8004fee:	4604      	mov	r4, r0
 8004ff0:	4608      	mov	r0, r1
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	602b      	str	r3, [r5, #0]
 8004ff6:	f7fc fa2e 	bl	8001456 <_fstat>
 8004ffa:	1c43      	adds	r3, r0, #1
 8004ffc:	d102      	bne.n	8005004 <_fstat_r+0x1c>
 8004ffe:	682b      	ldr	r3, [r5, #0]
 8005000:	b103      	cbz	r3, 8005004 <_fstat_r+0x1c>
 8005002:	6023      	str	r3, [r4, #0]
 8005004:	bd38      	pop	{r3, r4, r5, pc}
 8005006:	bf00      	nop
 8005008:	20000238 	.word	0x20000238

0800500c <_isatty_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	4d06      	ldr	r5, [pc, #24]	; (8005028 <_isatty_r+0x1c>)
 8005010:	2300      	movs	r3, #0
 8005012:	4604      	mov	r4, r0
 8005014:	4608      	mov	r0, r1
 8005016:	602b      	str	r3, [r5, #0]
 8005018:	f7fc fa2d 	bl	8001476 <_isatty>
 800501c:	1c43      	adds	r3, r0, #1
 800501e:	d102      	bne.n	8005026 <_isatty_r+0x1a>
 8005020:	682b      	ldr	r3, [r5, #0]
 8005022:	b103      	cbz	r3, 8005026 <_isatty_r+0x1a>
 8005024:	6023      	str	r3, [r4, #0]
 8005026:	bd38      	pop	{r3, r4, r5, pc}
 8005028:	20000238 	.word	0x20000238

0800502c <_lseek_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	4d07      	ldr	r5, [pc, #28]	; (800504c <_lseek_r+0x20>)
 8005030:	4604      	mov	r4, r0
 8005032:	4608      	mov	r0, r1
 8005034:	4611      	mov	r1, r2
 8005036:	2200      	movs	r2, #0
 8005038:	602a      	str	r2, [r5, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	f7fc fa26 	bl	800148c <_lseek>
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	d102      	bne.n	800504a <_lseek_r+0x1e>
 8005044:	682b      	ldr	r3, [r5, #0]
 8005046:	b103      	cbz	r3, 800504a <_lseek_r+0x1e>
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	bd38      	pop	{r3, r4, r5, pc}
 800504c:	20000238 	.word	0x20000238

08005050 <_read_r>:
 8005050:	b538      	push	{r3, r4, r5, lr}
 8005052:	4d07      	ldr	r5, [pc, #28]	; (8005070 <_read_r+0x20>)
 8005054:	4604      	mov	r4, r0
 8005056:	4608      	mov	r0, r1
 8005058:	4611      	mov	r1, r2
 800505a:	2200      	movs	r2, #0
 800505c:	602a      	str	r2, [r5, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	f7fc f9b4 	bl	80013cc <_read>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	d102      	bne.n	800506e <_read_r+0x1e>
 8005068:	682b      	ldr	r3, [r5, #0]
 800506a:	b103      	cbz	r3, 800506e <_read_r+0x1e>
 800506c:	6023      	str	r3, [r4, #0]
 800506e:	bd38      	pop	{r3, r4, r5, pc}
 8005070:	20000238 	.word	0x20000238

08005074 <_init>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr

08005080 <_fini>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	bf00      	nop
 8005084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005086:	bc08      	pop	{r3}
 8005088:	469e      	mov	lr, r3
 800508a:	4770      	bx	lr
